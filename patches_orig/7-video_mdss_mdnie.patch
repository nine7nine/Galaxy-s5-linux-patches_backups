diff -Nuarb a/include/linux/dvb/dmx.h b/include/linux/dvb/dmx.h
--- a/include/linux/dvb/dmx.h	2016-01-06 22:47:37.540090979 -0500
+++ b/include/linux/dvb/dmx.h	2015-12-01 05:57:40.000000000 -0500
@@ -39,7 +39,7 @@
 /* Min recording chunk upon which event is generated */
 #define DMX_REC_BUFF_CHUNK_MIN_SIZE		(100*188)
 
-#define DMX_MAX_DECODER_BUFFER_NUM		(32)
+#define DMX_MAX_DECODER_BUFFER_NUM		(64)
 
 typedef enum
 {
@@ -868,6 +868,6 @@
 #define DMX_ABORT_TS_INSERTION _IOW('o', 71, struct dmx_abort_ts_insertion)
 #define DMX_GET_SCRAMBLING_BITS _IOWR('o', 72, struct dmx_scrambling_bits)
 #define DMX_SET_CIPHER _IOW('o', 73, struct dmx_cipher_operations)
-
-
+#define DMX_FLUSH_BUFFER _IO('o', 74)
+#define DMX_GET_PCR_TS_INSERTED _IOR('o', 75, unsigned long long int)
 #endif /*_DVBDMX_H_*/
diff -Nuarb a/include/linux/msm_mdp.h b/include/linux/msm_mdp.h
--- a/include/linux/msm_mdp.h	2016-01-06 22:47:37.583090981 -0500
+++ b/include/linux/msm_mdp.h	2015-12-01 05:57:50.000000000 -0500
@@ -528,7 +528,7 @@
 	BLEND_OP_COVERAGE,
 	BLEND_OP_MAX,
 };
-
+#define DECIMATED_DIMENSION(dim, deci) (((dim) + ((1 << (deci)) - 1)) >> (deci))
 #define MAX_PLANES	4
 struct mdp_scale_data {
 	uint8_t enable_pxl_ext;
diff -Nur a/drivers/video/msm/mdp.c b/drivers/video/msm/mdp.c
--- a/drivers/video/msm/mdp.c	2016-01-11 21:01:32.958655506 -0500
+++ b/drivers/video/msm/mdp.c	2015-12-01 05:57:12.000000000 -0500
@@ -493,6 +493,11 @@
 	c[1] = cmap->blue;
 	c[2] = cmap->red;
 
+	if (cmap->start > MDP_HIST_LUT_SIZE || cmap->len > MDP_HIST_LUT_SIZE ||
+			(cmap->start + cmap->len > MDP_HIST_LUT_SIZE)) {
+		pr_err("mdp_lut_hw_update invalid arguments\n");
+		return -EINVAL;
+	}
 	for (i = 0; i < cmap->len; i++) {
 		if (copy_from_user(&r, cmap->red++, sizeof(r)) ||
 		    copy_from_user(&g, cmap->green++, sizeof(g)) ||
diff -Nur a/drivers/video/msm/mdss/dsi_host_v2.c b/drivers/video/msm/mdss/dsi_host_v2.c
--- a/drivers/video/msm/mdss/dsi_host_v2.c	2016-01-10 16:25:37.417141000 -0500
+++ b/drivers/video/msm/mdss/dsi_host_v2.c	2015-12-01 05:57:12.000000000 -0500
@@ -682,14 +682,25 @@
 	return rc;
 }
 
+/* MIPI_DSI_MRPS, Maximum Return Packet Size */
+static char max_pktsize[2] = {0x00, 0x00}; /* LSB tx first, 10 bytes */
+
+static struct dsi_cmd_desc pkt_size_cmd = {
+	{DTYPE_MAX_PKTSIZE, 1, 0, 0, 0, sizeof(max_pktsize)},
+	max_pktsize,
+};
+
 int msm_dsi_cmd_dma_rx(struct mdss_dsi_ctrl_pdata *ctrl,
 			struct dsi_buf *rp, int rlen)
 {
-	u32 *lp, data;
-	int i, off, cnt;
+	u32 *lp, data, *temp;
+	int i, j = 0, off, cnt;
 	unsigned char *ctrl_base = dsi_host_private->dsi_base;
+	char reg[16];
+	int repeated_bytes = 0;
 
 	lp = (u32 *)rp->data;
+	temp = (u32 *)reg;
 	cnt = rlen;
 	cnt += 3;
 	cnt >>= 2;
@@ -697,16 +708,52 @@
 	if (cnt > 4)
 		cnt = 4; /* 4 x 32 bits registers only */
 
+	if (rlen == 4)
+		rp->read_cnt = 4;
+	else
+		rp->read_cnt = (max_pktsize[0] + 6);
+
+	if (rp->read_cnt > 16) {
+		int bytes_shifted, data_lost = 0, rem_header_bytes = 0;
+		/* Any data more than 16 bytes will be shifted out */
+		bytes_shifted = rp->read_cnt - rlen;
+		if (bytes_shifted >= 4)
+			data_lost = bytes_shifted - 4; /* remove dcs header */
+		else
+			rem_header_bytes = 4 - bytes_shifted; /* rem header */
+		/*
+		 * (rp->len - 4) -> current rx buffer data length.
+		 * If data_lost > 0, then ((rp->len - 4) - data_lost) will be
+		 * the number of repeating bytes.
+		 * If data_lost == 0, then ((rp->len - 4) + rem_header_bytes)
+		 * will be the number of bytes repeating in between rx buffer
+		 * and the current RDBK_DATA registers. We need to skip the
+		 * repeating bytes.
+		 */
+		repeated_bytes = (rp->len - 4) - data_lost + rem_header_bytes;
+	}
+
 	off = DSI_RDBK_DATA0;
 	off += ((cnt - 1) * 4);
 
 	for (i = 0; i < cnt; i++) {
 		data = (u32)MIPI_INP(ctrl_base + off);
-		*lp++ = ntohl(data); /* to network byte order */
+		/* to network byte order */
+		if (!repeated_bytes)
+			*lp++ = ntohl(data);
+		else
+			*temp++ = ntohl(data);
 		pr_debug("%s: data = 0x%x and ntohl(data) = 0x%x\n",
 					 __func__, data, ntohl(data));
 		off -= 4;
-		rp->len += sizeof(*lp);
+		if (rlen == 4)
+			rp->len += sizeof(*lp);
+	}
+
+	/* Skip duplicates and append other data to the rx buffer */
+	if (repeated_bytes) {
+		for (i = repeated_bytes; i < 16; i++)
+			rp->data[j++] = reg[i];
 	}
 
 	return rlen;
@@ -798,14 +845,6 @@
 	return rc;
 }
 
-/* MIPI_DSI_MRPS, Maximum Return Packet Size */
-static char max_pktsize[2] = {0x00, 0x00}; /* LSB tx first, 10 bytes */
-
-static struct dsi_cmd_desc pkt_size_cmd = {
-	{DTYPE_MAX_PKTSIZE, 1, 0, 0, 0, sizeof(max_pktsize)},
-	max_pktsize,
-};
-
 static int msm_dsi_set_max_packet_size(struct mdss_dsi_ctrl_pdata *ctrl,
 						int size)
 {
@@ -843,10 +882,23 @@
 {
 	int rc;
 	struct dsi_buf *tp, *rp;
+	int rx_byte = 0;
+
+	if (rlen <= 2)
+		rx_byte = 4;
+	else
+		rx_byte = DSI_MAX_BYTES_TO_READ;
 
 	tp = &ctrl->tx_buf;
 	rp = &ctrl->rx_buf;
 	mdss_dsi_buf_init(rp);
+	rc = msm_dsi_set_max_packet_size(ctrl, rlen);
+	if (rc) {
+		pr_err("%s: dsi_set_max_pkt failed\n", __func__);
+		rc = -EINVAL;
+		goto dsi_cmds_rx_1_error;
+	}
+
 	mdss_dsi_buf_init(tp);
 
 	rc = mdss_dsi_cmd_dma_add(tp, cmds);
@@ -869,10 +921,12 @@
 	}
 
 	if (rlen <= DSI_SHORT_PKT_DATA_SIZE) {
-		msm_dsi_cmd_dma_rx(ctrl, rp, rlen);
+		msm_dsi_cmd_dma_rx(ctrl, rp, rx_byte);
 	} else {
-		msm_dsi_cmd_dma_rx(ctrl, rp, rlen + DSI_HOST_HDR_SIZE);
-		rp->len = rlen + DSI_HOST_HDR_SIZE;
+		msm_dsi_cmd_dma_rx(ctrl, rp, rx_byte);
+		rp->len = rx_byte - 2;	/*2 bytes for CRC*/
+		rp->len = rp->len - (DSI_MAX_PKT_SIZE - rlen);
+		rp->data = rp->start + (16 - (rlen + 2 + DSI_HOST_HDR_SIZE));
 	}
 	rc = msm_dsi_parse_rx_response(rp);
 
@@ -889,16 +943,15 @@
 {
 	int rc;
 	struct dsi_buf *tp, *rp;
-	int pkt_size, data_bytes, total;
+	int pkt_size, data_bytes, dlen, end = 0, diff;
 
 	tp = &ctrl->tx_buf;
 	rp = &ctrl->rx_buf;
 	mdss_dsi_buf_init(rp);
 	pkt_size = DSI_MAX_PKT_SIZE;
 	data_bytes = MDSS_DSI_LEN;
-	total = 0;
 
-	while (true) {
+	while (!end) {
 		rc = msm_dsi_set_max_packet_size(ctrl, pkt_size);
 		if (rc)
 			break;
@@ -909,7 +962,7 @@
 			pr_err("%s: dsi_cmd_dma_add failed\n", __func__);
 			rc = -EINVAL;
 			break;
-	}
+		}
 		rc = msm_dsi_wait4video_eng_busy(ctrl);
 		if (rc) {
 			pr_err("%s: wait4video_eng failed\n", __func__);
@@ -923,19 +976,32 @@
 		}
 
 		msm_dsi_cmd_dma_rx(ctrl, rp, DSI_MAX_BYTES_TO_READ);
-
-		rp->data += DSI_MAX_BYTES_TO_READ - DSI_HOST_HDR_SIZE;
-		total += data_bytes;
-		if (total >= rlen)
-			break;
-
-		data_bytes = DSI_MAX_BYTES_TO_READ - DSI_HOST_HDR_SIZE;
-		pkt_size += data_bytes;
+		if (rlen <= data_bytes) {
+			diff = data_bytes - rlen;
+			end = 1;
+		} else {
+			diff = 0;
+			rlen -= data_bytes;
+		}
+		dlen = DSI_MAX_BYTES_TO_READ - 2;
+		dlen -= diff;
+		rp->data += dlen;
+		rp->len += dlen;
+
+		if (!end) {
+			data_bytes = 14;
+			if (rlen < data_bytes)
+				pkt_size += rlen;
+			else
+				pkt_size += data_bytes;
+		}
+		pr_debug("%s: rp data=%x len=%d dlen=%d diff=%d\n",
+			 __func__, (int) (unsigned long) rp->data,
+			 rp->len, dlen, diff);
 	}
 
 	if (!rc) {
 		rp->data = rp->start;
-		rp->len = rlen + DSI_HOST_HDR_SIZE;
 		rc = msm_dsi_parse_rx_response(rp);
 	}
 
diff -Nur a/drivers/video/msm/mdss/edp-backlight.c b/drivers/video/msm/mdss/edp-backlight.c
--- a/drivers/video/msm/mdss/edp-backlight.c	2016-01-10 16:25:37.417141000 -0500
+++ b/drivers/video/msm/mdss/edp-backlight.c	2015-12-01 05:57:12.000000000 -0500
@@ -151,11 +151,7 @@
 	{0xA4, 0x72},
 	{0xA5, 0x04},
 	{0xA6, 0x40},
-#if defined(CONFIG_MACH_VIENNAATT)
-	{0xA7, 0xC8},
-#else
 	{0xA7, 0xFB},
-#endif
 	{0xA8, 0x00},
 	{0xA9, 0xA0},
 	{0xAA, 0x0F},
diff -Nur a/drivers/video/msm/mdss/Kconfig b/drivers/video/msm/mdss/Kconfig
--- a/drivers/video/msm/mdss/Kconfig	2016-01-10 16:25:37.416141000 -0500
+++ b/drivers/video/msm/mdss/Kconfig	2015-12-01 05:57:12.000000000 -0500
@@ -194,6 +194,14 @@
 	bool "Support Regulator LP8720"
 	default n
 
+config NEW_UX_MDNIE
+	bool "Support LOS_NEW_UX_MDNIE"
+	default n
+
+config NEW_UX_ACL_SUPPORT
+	bool "Support LOS_NEW_UX_ACL"
+	default n
+	
 config DUAL_LCD
 	bool "Support DUAL LCD"
 	select FB_MSM_MIPI_MAGNA_OCTA_VIDEO_WXGA_PT_DUAL_PANEL
@@ -343,3 +351,6 @@
 	bool "Support MDSS UD flip"
 	default n
 
+config PANEL_RECOVERY
+	bool "Support recovery when check rddpm err"
+	default n
diff -Nur a/drivers/video/msm/mdss/mdnie_lite_tuning.c b/drivers/video/msm/mdss/mdnie_lite_tuning.c
--- a/drivers/video/msm/mdss/mdnie_lite_tuning.c	2016-01-10 16:25:37.417141000 -0500
+++ b/drivers/video/msm/mdss/mdnie_lite_tuning.c	2015-12-01 05:57:12.000000000 -0500
@@ -48,7 +48,11 @@
 #elif defined(CONFIG_FB_MSM_MIPI_SAMSUNG_YOUM_CMD_FULL_HD_PT_PANEL) // F
 #include "mdnie_lite_tuning_data_flte.h"
 #elif defined(CONFIG_FB_MSM_MIPI_SAMSUNG_OCTA_CMD_WQHD_PT_PANEL) // K
+#if defined(CONFIG_NEW_UX_MDNIE)
+#include "mdnie_lite_tuning_data_klte_fhd_s6e3fa2_newux.h"
+#else
 #include "mdnie_lite_tuning_data_klte_fhd_s6e3fa2.h"
+#endif
 #elif defined(CONFIG_FB_MSM_MIPI_MAGNA_OCTA_CMD_HD_PT_PANEL)
 #include "mdnie_lite_tuning_data_slte_hd_ea8064g.h"
 #elif defined(CONFIG_FB_MSM_MIPI_JDI_TFT_VIDEO_FULL_HD_PT_PANEL) // JACTIVE
@@ -61,9 +65,10 @@
 */
 #elif defined(CONFIG_FB_MSM_MDSS_SAMSUNG_OCTA_VIDEO_720P_PT_PANEL)
 #include "mdnie_lite_tuning_data_fresco.h"
-#elif defined(CONFIG_FB_MSM_MDSS_MAGNA_OCTA_VIDEO_720P_PANEL) \
-	|| defined(CONFIG_FB_MSM_MIPI_MAGNA_OCTA_VIDEO_WXGA_PT_DUAL_PANEL)
+#elif defined(CONFIG_FB_MSM_MDSS_MAGNA_OCTA_VIDEO_720P_PANEL)
 #include "mdnie_lite_tuning_data_kmini.h"
+#elif defined(CONFIG_FB_MSM_MIPI_MAGNA_OCTA_VIDEO_WXGA_PT_DUAL_PANEL) // PATEK
+#include "mdnie_lite_tuning_data_patek.h"
 #elif defined(CONFIG_FB_MSM_MIPI_VIDEO_WVGA_NT35502_PT_PANEL) // KANAS
 #include "mdnie_lite_tuning_data_wvga_nt35502.h"
 #elif defined (CONFIG_FB_MSM_MDSS_SHARP_HD_PANEL)
@@ -203,9 +208,16 @@
 #if defined(CONFIG_FB_MSM_MIPI_SAMSUNG_OCTA_CMD_WQHD_PT_PANEL) || \
 	defined(CONFIG_FB_MSM_MIPI_SAMSUNG_OCTA_CMD_FULL_HD_PT_PANEL) || defined (CONFIG_FB_MSM_MIPI_MAGNA_OCTA_CMD_HD_PT_PANEL)||\
 	defined(CONFIG_FB_MSM_MDSS_MAGNA_OCTA_VIDEO_720P_PANEL)	|| defined(CONFIG_FB_MSM_MIPI_MAGNA_OCTA_VIDEO_WXGA_PT_DUAL_PANEL) ||\
-	defined(CONFIG_FB_MSM_MIPI_SAMSUNG_OCTA_CMD_WQXGA_S6E3HA1_PT_PANEL)
+	defined(CONFIG_FB_MSM_MIPI_SAMSUNG_OCTA_CMD_WQXGA_S6E3HA1_PT_PANEL) || defined(CONFIG_FB_MSM_MIPI_SAMSUNG_OCTA_VIDEO_FULL_HD_PT_PANEL)
 	"SCREEN_CURTAIN_MODE",
 #endif
+#if defined(CONFIG_FB_MSM_MIPI_SAMSUNG_OCTA_CMD_WQHD_PT_PANEL) || \
+	defined(CONFIG_FB_MSM_MIPI_SAMSUNG_OCTA_CMD_FULL_HD_PT_PANEL)|| defined (CONFIG_FB_MSM_MIPI_MAGNA_OCTA_CMD_HD_PT_PANEL) ||\
+	defined(CONFIG_FB_MSM_MDSS_MAGNA_OCTA_VIDEO_720P_PANEL)	|| defined(CONFIG_FB_MSM_MIPI_MAGNA_OCTA_VIDEO_WXGA_PT_DUAL_PANEL) ||\
+	defined(CONFIG_FB_MSM_MIPI_SAMSUNG_OCTA_CMD_WQXGA_S6E3HA1_PT_PANEL)
+	"GRAYSCALE_MODE",
+	"GRAY_NEGATIVE_MODE",
+#endif
 #endif /* NEGATIVE_COLOR_USE_ACCESSIBILLITY */
 };
 
@@ -277,9 +289,9 @@
 	{{DTYPE_DCS_LWRITE, 1, 0, 0, 0, sizeof(tune_data5)}, tune_data5},
 	{{DTYPE_DCS_LWRITE, 1, 0, 0, 0, sizeof(cmd_disable)}, cmd_disable},
 #else
-	{{DTYPE_DCS_LWRITE, 0, 0, 0, 0,
+	{{DTYPE_DCS_LWRITE, 1, 0, 0, 0,
 		sizeof(level1_key)}, level1_key},
-	{{DTYPE_DCS_LWRITE, 0, 0, 0, 0,
+	{{DTYPE_DCS_LWRITE, 1, 0, 0, 0,
 		sizeof(level2_key)}, level2_key},
 
 	{{DTYPE_DCS_LWRITE, 1, 0, 0, 0,
@@ -467,6 +479,14 @@
 
 	play_speed_1_5 = 0;
 
+#if defined(CONFIG_FB_MSM_MIPI_JDI_TFT_VIDEO_FULL_HD_PT_PANEL) // JACTIVE
+	if(mdnie_tun_state.scenario == mDNIe_EMAIL_MODE && \
+		mdnie_tune_value[mdnie_tun_state.scenario][mdnie_tun_state.background][mdnie_tun_state.outdoor][0] == NULL) {
+		mdnie_tun_state.scenario = mDNIe_eBOOK_MODE;
+		DPRINT("EMAIL mode data is null, set eBOOK mode. \n");
+	}
+#endif
+
 	if (mdnie_tun_state.accessibility) {
 		DPRINT(" = ACCESSIBILITY MODE =\n");
 #if defined(CONFIG_FB_MSM_MIPI_VIDEO_WVGA_NT35502_PT_PANEL)
@@ -484,7 +504,7 @@
 
 #if defined(CONFIG_FB_MSM_MIPI_SAMSUNG_OCTA_CMD_WQHD_PT_PANEL) || defined (CONFIG_FB_MSM_MIPI_MAGNA_OCTA_CMD_HD_PT_PANEL) \
 	|| defined (CONFIG_FB_MSM_MDSS_MAGNA_OCTA_VIDEO_720P_PANEL)
-	else if (mdnie_msd->dstat.auto_brightness == 6) {
+	else if (mdnie_msd->dstat.auto_brightness >= 6 && mdnie_msd->dstat.bright_level == 255) {
 		DPRINT("[LOCAL CE] HBM mode! only LOCAL CE tuning\n");
 #if defined(CONFIG_MDNIE_ENHENCED_LOCAL_CE)
 			INPUT_PAYLOAD1(LOCAL_CE_1_ENHENCED);
@@ -624,6 +644,8 @@
 		return size;
 	}
 	backup = mdnie_tun_state.background;
+	if(mdnie_tun_state.background == value)
+		return size;
 	mdnie_tun_state.background = value;
 
 	if (mdnie_tun_state.accessibility == NEGATIVE) {
@@ -668,6 +690,8 @@
 	}
 
 	backup = mdnie_tun_state.scenario;
+	if(mdnie_tun_state.scenario == value)
+		return size;
 	mdnie_tun_state.scenario = value;
 
 #if defined(CONFIG_TDMB)
@@ -791,6 +815,8 @@
 	}
 
 	backup = mdnie_tun_state.outdoor;
+	if(mdnie_tun_state.outdoor == value)
+		return size;
 	mdnie_tun_state.outdoor = value;
 
 	if (mdnie_tun_state.accessibility == NEGATIVE) {
@@ -807,6 +833,64 @@
 
 static DEVICE_ATTR(outdoor, 0664, outdoor_show, outdoor_store);
 
+
+#if defined(AUTO_BRIGHTNESS_CABC_FUNCTION)
+
+unsigned int mdss_dsi_show_cabc(void )
+{
+	return msd.dstat.cabc_on;
+}
+void mdss_dsi_store_cabc(unsigned int cabc)
+{
+	struct msm_fb_data_type *mfd;
+	mfd = mdnie_msd->mfd;
+
+	if(mfd->resume_state == MIPI_SUSPEND_STATE){
+		pr_err("%s: panel power off no bl ctrl\n", __func__);
+		return;
+	}
+
+	msd.dstat.cabc_on = cabc;
+
+	pr_info("%s : CABC : %d\n", __func__,msd.dstat.cabc_on);
+
+	if(mfd->resume_state == MIPI_RESUME_STATE)
+		mipi_samsung_cabc_onoff(cabc);
+}
+
+
+static ssize_t cabc_show(struct device *dev,
+		struct device_attribute *attr, char *buf)
+{
+	unsigned int cabc;
+	cabc = mdss_dsi_show_cabc();
+	pr_info("%s : CABC : %d\n", __func__, cabc);
+	return cabc;
+
+}
+
+static ssize_t cabc_store(struct device *dev,
+		struct device_attribute *attr, const char *buf, size_t size)
+{
+
+	unsigned char cabc;
+	cabc = mdss_dsi_show_cabc();
+
+	if (sysfs_streq(buf, "1") && !cabc)
+		cabc = true;
+	else if (sysfs_streq(buf, "0") && cabc)
+		cabc = false;
+	else
+		pr_info("%s: Invalid argument!!", __func__);
+	mdss_dsi_store_cabc(cabc);
+
+	return size;
+
+}
+static DEVICE_ATTR(cabc, 0664, cabc_show, cabc_store);
+#endif
+
+
 #if 0 // accessibility
 static ssize_t negative_show(struct device *dev,
 					      struct device_attribute *attr,
@@ -827,7 +911,8 @@
 	DPRINT
 	    ("negative_store, input value = %d\n",
 	     value);
-
+	if(mdnie_tun_state.accessibility == value)
+		return size;
 	mdnie_tun_state.accessibility = value;
 
 	mDNIe_Set_Mode();
@@ -913,6 +998,8 @@
 	backup = mdnie_tun_state.accessibility;
 
 	if (cmd_value == NEGATIVE) {
+		if(mdnie_tun_state.accessibility == NEGATIVE)
+			return size;
 		mdnie_tun_state.accessibility = NEGATIVE;
 	}
 #ifndef	NEGATIVE_COLOR_USE_ACCESSIBILLITY
@@ -930,13 +1017,32 @@
 #if defined(CONFIG_FB_MSM_MIPI_SAMSUNG_OCTA_CMD_WQHD_PT_PANEL) || \
 	defined(CONFIG_FB_MSM_MIPI_SAMSUNG_OCTA_CMD_FULL_HD_PT_PANEL) || defined (CONFIG_FB_MSM_MIPI_MAGNA_OCTA_CMD_HD_PT_PANEL) ||\
 	defined(CONFIG_FB_MSM_MDSS_MAGNA_OCTA_VIDEO_720P_PANEL) || defined(CONFIG_FB_MSM_MIPI_MAGNA_OCTA_VIDEO_WXGA_PT_DUAL_PANEL) ||\
-	defined(CONFIG_FB_MSM_MIPI_SAMSUNG_OCTA_CMD_WQXGA_S6E3HA1_PT_PANEL)
+	defined(CONFIG_FB_MSM_MIPI_SAMSUNG_OCTA_CMD_WQXGA_S6E3HA1_PT_PANEL) || defined(CONFIG_FB_MSM_MIPI_SAMSUNG_OCTA_VIDEO_FULL_HD_PT_PANEL)
 	else if (cmd_value == SCREEN_CURTAIN) {
+		if(mdnie_tun_state.accessibility == SCREEN_CURTAIN)
+			return size;
 		mdnie_tun_state.accessibility = SCREEN_CURTAIN;
 	}
 #endif
+#if defined(CONFIG_FB_MSM_MIPI_SAMSUNG_OCTA_CMD_WQHD_PT_PANEL) || \
+	defined(CONFIG_FB_MSM_MIPI_SAMSUNG_OCTA_CMD_FULL_HD_PT_PANEL)|| defined (CONFIG_FB_MSM_MIPI_MAGNA_OCTA_CMD_HD_PT_PANEL) ||\
+	defined(CONFIG_FB_MSM_MDSS_MAGNA_OCTA_VIDEO_720P_PANEL)	|| defined(CONFIG_FB_MSM_MIPI_MAGNA_OCTA_VIDEO_WXGA_PT_DUAL_PANEL) ||\
+	defined(CONFIG_FB_MSM_MIPI_SAMSUNG_OCTA_CMD_WQXGA_S6E3HA1_PT_PANEL)
+	else if (cmd_value == GRAYSCALE) {
+		if(mdnie_tun_state.accessibility == GRAYSCALE)
+			return size;
+		mdnie_tun_state.accessibility = GRAYSCALE;
+	}
+	else if (cmd_value == GRAYSCALE_NEGATIVE) {
+		if(mdnie_tun_state.accessibility == GRAYSCALE_NEGATIVE)
+			return size;
+		mdnie_tun_state.accessibility = GRAYSCALE_NEGATIVE;
+	}
+#endif
 #endif /* NEGATIVE_COLOR_USE_ACCESSIBILLITY */
 	else if (cmd_value == ACCESSIBILITY_OFF) {
+		if(mdnie_tun_state.accessibility == ACCESSIBILITY_OFF)
+			return size;
 		mdnie_tun_state.accessibility = ACCESSIBILITY_OFF;
 	} else
 		pr_info("%s ACCESSIBILITY_MAX", __func__);
@@ -1231,6 +1337,13 @@
 		pr_err("Failed to create device file(%s)!\n",
 	       dev_attr_outdoor.attr.name);
 
+#if defined(AUTO_BRIGHTNESS_CABC_FUNCTION)
+	if (device_create_file
+		(tune_mdnie_dev, &dev_attr_cabc) < 0)
+		pr_err("Failed to create device file(%s)!\n",
+		   dev_attr_cabc.attr.name);
+#endif
+
 #if 0 // accessibility
 	if (device_create_file
 		(tune_mdnie_dev, &dev_attr_negative) < 0)
@@ -1435,7 +1548,8 @@
 void coordinate_tunning(int x, int y)
 {
 	int tune_number;
-#if defined(CONFIG_FB_MSM_MIPI_MAGNA_OCTA_CMD_HD_PT_PANEL) || defined(CONFIG_FB_MSM_MIPI_SAMSUNG_OCTA_CMD_WQXGA_S6E3HA1_PT_PANEL)
+#if defined(CONFIG_FB_MSM_MIPI_MAGNA_OCTA_CMD_HD_PT_PANEL) || defined(CONFIG_FB_MSM_MIPI_SAMSUNG_OCTA_CMD_WQXGA_S6E3HA1_PT_PANEL) || \
+	defined(CONFIG_NEW_UX_MDNIE)
 	int i, j;
 #endif
 	tune_number = 0;
@@ -1481,7 +1595,8 @@
 	}
 
 	pr_info("%s x : %d, y : %d, tune_number : %d", __func__, x, y, tune_number);
-#if defined(CONFIG_FB_MSM_MIPI_MAGNA_OCTA_CMD_HD_PT_PANEL) || defined(CONFIG_FB_MSM_MIPI_SAMSUNG_OCTA_CMD_WQXGA_S6E3HA1_PT_PANEL)
+#if defined(CONFIG_FB_MSM_MIPI_MAGNA_OCTA_CMD_HD_PT_PANEL) || defined(CONFIG_FB_MSM_MIPI_SAMSUNG_OCTA_CMD_WQXGA_S6E3HA1_PT_PANEL) || \
+	defined(CONFIG_NEW_UX_MDNIE)
 	for(i = 0; i < mDNIe_eBOOK_MODE; i++)
 	{
 		for(j = 0; j < AUTO_MODE; j++)
@@ -1503,12 +1618,14 @@
 	memcpy(&DYNAMIC_VT_2[scr_wr_addr], &coordinate_data[tune_number][0], coordinate_data_size);
 	memcpy(&DYNAMIC_EBOOK_2[scr_wr_addr], &coordinate_data[tune_number][0], coordinate_data_size);
 
+#if !defined(CONFIG_FB_MSM_MIPI_MAGNA_OCTA_VIDEO_WXGA_PT_DUAL_PANEL)
 	memcpy(&STANDARD_BROWSER_2[scr_wr_addr], &coordinate_data[tune_number][0], coordinate_data_size);
 	memcpy(&STANDARD_GALLERY_2[scr_wr_addr], &coordinate_data[tune_number][0], coordinate_data_size);
 	memcpy(&STANDARD_UI_2[scr_wr_addr], &coordinate_data[tune_number][0], coordinate_data_size);
 	memcpy(&STANDARD_VIDEO_2[scr_wr_addr], &coordinate_data[tune_number][0], coordinate_data_size);
 	memcpy(&STANDARD_VT_2[scr_wr_addr], &coordinate_data[tune_number][0], coordinate_data_size);
 	memcpy(&STANDARD_EBOOK_2[scr_wr_addr], &coordinate_data[tune_number][0], coordinate_data_size);
+#endif
 
 	memcpy(&AUTO_BROWSER_2[scr_wr_addr], &coordinate_data[tune_number][0], coordinate_data_size);
 	memcpy(&AUTO_CAMERA_2[scr_wr_addr], &coordinate_data[tune_number][0], coordinate_data_size);
diff -Nur a/drivers/video/msm/mdss/mdnie_lite_tuning_chagall.c b/drivers/video/msm/mdss/mdnie_lite_tuning_chagall.c
--- a/drivers/video/msm/mdss/mdnie_lite_tuning_chagall.c	2016-01-10 16:25:37.418141000 -0500
+++ b/drivers/video/msm/mdss/mdnie_lite_tuning_chagall.c	2015-12-01 05:57:12.000000000 -0500
@@ -266,11 +266,17 @@
 		INPUT_PAYLOAD2(blind_tune_value[mdnie_tun_state.accessibility][1]);
 	}
 
-	else if (mdnie_msd->dstat.auto_brightness == 6) {
+	else if (mdnie_msd->dstat.auto_brightness >= 6 && mdnie_msd->dstat.bright_level == 255) {
 		DPRINT("[LOCAL CE] HBM mode! only LOCAL CE tuning\n");
+		if((mdnie_tun_state.scenario == mDNIe_BROWSER_MODE)||(mdnie_tun_state.scenario == mDNIe_eBOOK_MODE)) {
+			INPUT_PAYLOAD1(LOCAL_CE_TEXT_1);
+			INPUT_PAYLOAD2(LOCAL_CE_TEXT_2);
+		}
+		else {
 			INPUT_PAYLOAD1(LOCAL_CE_1);
 			INPUT_PAYLOAD2(LOCAL_CE_2);
 	}
+	}
 
 #if defined(CONFIG_TDMB)
 	else if (mdnie_tun_state.dmb > DMB_MODE_OFF){
@@ -629,25 +635,37 @@
 		&buffer2[0], &buffer2[1], &buffer2[2], &buffer2[3], &buffer2[4],
 		&buffer2[5], &buffer2[6], &buffer2[7], &buffer2[8]);
 
-	for(loop = 0; loop < MDNIE_COLOR_BLINDE_CMD/2; loop++) {
-		buffer2[loop] = buffer2[loop] & 0xFFFF;
-
-		buffer[loop * 2] = (buffer2[loop] & 0xFF00) >> 8;
-		buffer[loop * 2 + 1] = buffer2[loop] & 0xFF;
-	}
-
-	for(loop = 0; loop < MDNIE_COLOR_BLINDE_CMD; loop+=2) {
-		temp = buffer[loop];
-		buffer[loop] = buffer[loop + 1];
-		buffer[loop + 1] = temp;
-	}
-
 	backup = mdnie_tun_state.accessibility;
 
 	if (cmd_value == NEGATIVE) {
 		mdnie_tun_state.accessibility = NEGATIVE;
 	} else if (cmd_value == COLOR_BLIND) {
 		mdnie_tun_state.accessibility = COLOR_BLIND;
+
+		memcpy(buffer,&COLOR_BLIND_2[MDNIE_COLOR_BLINDE_OFFSET],
+				MDNIE_COLOR_BLINDE_CMD);
+
+	for(loop = 0; loop < MDNIE_COLOR_BLINDE_CMD/2; loop++) {
+		buffer2[loop] = buffer2[loop] & 0xFFFF;
+
+			temp = buffer[loop * 2];
+			temp &= 0xFC;
+			temp |= ((buffer2[loop] & 0xFF) >> 6) & 0x03;
+			buffer[loop * 2] = temp;
+
+			temp = buffer[loop * 2 + 1];
+			temp &= 0x03;
+			temp |= ((buffer2[loop] & 0xFF) << 2) & 0xFC;
+			temp &= 0xFC;
+			temp |= (((buffer2[loop] & 0xFF00) >> 8) >> 6) & 0x03;
+			buffer[loop * 2 + 1] = temp;
+
+			temp = buffer[loop * 2 + 2];
+			temp &= 0x03;
+			temp |= (((buffer2[loop] & 0xFF00) >> 8) << 2) & 0xFC;
+			buffer[loop * 2 + 2] = temp;
+	}
+
 		memcpy(&COLOR_BLIND_2[MDNIE_COLOR_BLINDE_OFFSET],
 				buffer, MDNIE_COLOR_BLINDE_CMD);
 	} else if (cmd_value == SCREEN_CURTAIN) {
diff -Nur a/drivers/video/msm/mdss/mdnie_lite_tuning_data_chagall.h b/drivers/video/msm/mdss/mdnie_lite_tuning_data_chagall.h
--- a/drivers/video/msm/mdss/mdnie_lite_tuning_data_chagall.h	2016-01-10 16:25:37.418141000 -0500
+++ b/drivers/video/msm/mdss/mdnie_lite_tuning_data_chagall.h	2015-12-01 05:57:13.000000000 -0500
@@ -26,8 +26,8 @@
 #define MDNIE_GLOBAL_SECOND	0xD4
 #define MDNIE_TUNE_SECOND_SIZE	55
 
-#define MDNIE_COLOR_BLINDE_OFFSET 30
-#define MDNIE_COLOR_BLINDE_CMD	18
+#define MDNIE_COLOR_BLINDE_OFFSET 29
+#define MDNIE_COLOR_BLINDE_CMD	19
 
 #define BITSHIFT_SCR		2
 #define ADDRESS_SCR_WHITE_RED   47
@@ -232,13 +232,13 @@
 	0xfa, // bth 11111010
 	0x5a, // bin_size_ratio 0101101  dth 0
 	0xe5, // dth 11  min_ref_offset 100101
-	0x83, // min_ref_offset 10  gamma 0  cs 0 sharpen 0 nr 0 mask_th 11
+	0x93, // min_ref_offset 10  gamma 0  cs 1 sharpen 0 nr 0 mask_th 11
 	0xfc, // mask_th 111111  sharpen_weight 00
 	0x10, // sharpen_weight 00010000
 	0x14, // max_plus 00010100
 	0x02, // max_plus 000  max_minus 00010
 	0x81, // max_minus 100000  cs_gain 01
-	0x00, // cs_gain 00000000
+	0x20, // cs_gain 00100000
 	0x00, // curve_1_b
 	0x20, // curve_1_a
 	0x00, // curve_2_b
@@ -321,28 +321,28 @@
 	0xff, // ascr_skin_Wg 111111  ascr_skin_Wb 11
 	0xfc, // ascr_skin_Wb 111111  ascr_Cr 00
 	0x03, // ascr_Cr 000000  ascr_Rr 11
-	0xff, // ascr_Rr 111111  ascr_Cg 11
-	0xfc, // ascr_Cg 111111  ascr_Rg 00
-	0x5b, // ascr_Rg 010110  ascr_Cb 11
-	0x94, // ascr_Cb 100101  ascr_Rb 00
-	0x3b, // ascr_Rb 001110  ascr_Mr 11
+	0xf3, // ascr_Rr 111100  ascr_Cg 11
+	0xe8, // ascr_Cg 111010  ascr_Rg 00
+	0x4b, // ascr_Rg 010010  ascr_Cb 11
+	0xd4, // ascr_Cb 110101  ascr_Rb 00
+	0x7b, // ascr_Rb 011110  ascr_Mr 11
 	0xfc, // ascr_Mr 111111  ascr_Gr 00
 	0x00, // ascr_Gr 000000  ascr_Mg 00
-	0x53, // ascr_Mg 010100  ascr_Gg 11
-	0xff, // ascr_Gg 111111  ascr_Mb 11
-	0x64, // ascr_Mb 011001  ascr_Gb 00
-	0x13, // ascr_Gb 000100  ascr_Yr 11
+	0xa3, // ascr_Mg 101000  ascr_Gg 11
+	0xe3, // ascr_Gg 111000  ascr_Mb 11
+	0x98, // ascr_Mb 100110  ascr_Gb 00
+	0x03, // ascr_Gb 000000  ascr_Yr 11
 	0xf0, // ascr_Yr 111100  ascr_Br 00
-	0x9b, // ascr_Br 100110  ascr_Yg 11
-	0xfc, // ascr_Yg 111111  ascr_Bg 00
-	0x6c, // ascr_Bg 011011  ascr_Yb 00
-	0x8f, // ascr_Yb 100011  ascr_Bb 11
-	0xff, // ascr_Bb 111111  ascr_Wr 11
+	0xb7, // ascr_Br 101101  ascr_Yg 11
+	0xdc, // ascr_Yg 110111  ascr_Bg 00
+	0x70, // ascr_Bg 011100  ascr_Yb 01
+	0xf3, // ascr_Yb 111100  ascr_Bb 11
+	0xe3, // ascr_Bb 111000  ascr_Wr 11
 	0xfc, // ascr_Wr 111111  ascr_Kr 00
 	0x03, // ascr_Kr 000000  ascr_Wg 11
 	0xe0, // ascr_Wg 111000  ascr_Kg 00
 	0x03, // ascr_Kg 000000  ascr_Wb 11
-	0xbc, // ascr_Wb 101111  ascr_Kb 00
+	0xb8, // ascr_Wb 101110  ascr_Kb 00
 	0x00, // ascr_Kb 000000  reserved 00
 	0x0f, // reserved 0000  vsync_mask 1111
 	/* end */
@@ -465,30 +465,30 @@
 	0xff, // ascr_skin_Mb 111111  ascr_skin_Wr 11
 	0xff, // ascr_skin_Wr 111111  ascr_skin_Wg 11
 	0xff, // ascr_skin_Wg 111111  ascr_skin_Wb 11
-	0xfd, // ascr_skin_Wb 111111  ascr_Cr 10
-	0x53, // ascr_Cr 010100  ascr_Rr 11
-	0xff, // ascr_Rr 111111  ascr_Cg 11
+	0xfe, // ascr_skin_Wb 111111  ascr_Cr 10
+	0x2b, // ascr_Cr 001010  ascr_Rr 11
+	0xa3, // ascr_Rr 101000  ascr_Cg 11
 	0xfc, // ascr_Cg 111111  ascr_Rg 00
-	0xcb, // ascr_Rg 110010  ascr_Cb 11
+	0x7b, // ascr_Rg 011110  ascr_Cb 11
 	0xc8, // ascr_Cb 110010  ascr_Rb 00
-	0xcf, // ascr_Rb 110011  ascr_Mr 11
-	0xe9, // ascr_Mr 111010  ascr_Gr 01
-	0xcc, // ascr_Gr 110011  ascr_Mg 00
-	0xf3, // ascr_Mg 111100  ascr_Gg 11
-	0xff, // ascr_Gg 111111  ascr_Mb 11
-	0xfc, // ascr_Mb 111111  ascr_Gb 00
-	0xf7, // ascr_Gb 111101  ascr_Yr 11
-	0xf0, // ascr_Yr 111100  ascr_Br 00
-	0xf7, // ascr_Br 111101  ascr_Yg 11
-	0xfc, // ascr_Yg 111111  ascr_Bg 00
-	0xad, // ascr_Bg 101011  ascr_Yb 01
-	0x5f, // ascr_Yb 010111  ascr_Bb 11
-	0xff, // ascr_Bb 111111  ascr_Wr 11
+	0x9b, // ascr_Rb 100110  ascr_Mr 11
+	0xcd, // ascr_Mr 110011  ascr_Gr 01
+	0xec, // ascr_Gr 111011  ascr_Mg 00
+	0xbb, // ascr_Mg 101110  ascr_Gg 11
+	0xf3, // ascr_Gg 111100  ascr_Mb 11
+	0xd0, // ascr_Mb 110100  ascr_Gb 00
+	0xeb, // ascr_Gb 111101  ascr_Yr 11
+	0xe8, // ascr_Yr 111010  ascr_Br 00
+	0xb7, // ascr_Br 101101  ascr_Yg 11
+	0xd4, // ascr_Yg 110101  ascr_Bg 00
+	0x65, // ascr_Bg 011001  ascr_Yb 01
+	0x1b, // ascr_Yb 000110  ascr_Bb 11
+	0xc7, // ascr_Bb 110001  ascr_Wr 11
 	0xfc, // ascr_Wr 111111  ascr_Kr 00
 	0x03, // ascr_Kr 000000  ascr_Wg 11
 	0xe0, // ascr_Wg 111000  ascr_Kg 00
 	0x03, // ascr_Kg 000000  ascr_Wb 11
-	0xbc, // ascr_Wb 101111  ascr_Kb 00
+	0xb8, // ascr_Wb 101110  ascr_Kb 00
 	0x00, // ascr_Kb 000000  reserved 00
 	0x0f, // reserved 0000  vsync_mask 1111
 	/* end */
@@ -816,85 +816,85 @@
 	0xfa, // bth 11111010
 	0x5a, // bin_size_ratio 0101101  dth 0
 	0xe5, // dth 11  min_ref_offset 100101
-	0xb3, // min_ref_offset 10  gamma 1  cs 1 sharpen 0 nr 0 mask_th 11
+	0x83, // min_ref_offset 10  gamma 0  cs 0 sharpen 0 nr 0 mask_th 11
 	0xfc, // mask_th 111111  sharpen_weight 00
-	0x40, // sharpen_weight 01000000
+	0x15, // sharpen_weight 00010101
 	0x14, // max_plus 00010100
 	0x02, // max_plus 000  max_minus 00010
 	0x81, // max_minus 100000  cs_gain 01
-	0x20, // cs_gain 00100000
+	0x00, // cs_gain 00000000
 	0x00, // curve_1_b
-	0x14, // curve_1_a
+	0x20, // curve_1_a
 	0x00, // curve_2_b
-	0x14, // curve_2_a
+	0x20, // curve_2_a
 	0x00, // curve_3_b
-	0x14, // curve_3_a
+	0x20, // curve_3_a
 	0x00, // curve_4_b
-	0x14, // curve_4_a
-	0x03, // curve_5_b
-	0x9a, // curve_5_a
-	0x03, // curve_6_b
-	0x9a, // curve_6_a
-	0x03, // curve_7_b
-	0x9a, // curve_7_a
-	0x03, // curve_8_b
-	0x9a, // curve_8_a
-	0x07, // curve_9_b
-	0x9e, // curve_9_a
-	0x07, // curve10_b
-	0x9e, // curve10_a
-	0x07, // curve11_b
-	0x9e, // curve11_a
-	0x07, // curve12_b
-	0x9e, // curve12_a
-	0x0a, // curve13_b
-	0xa0, // curve13_a
-	0x0a, // curve14_b
-	0xa0, // curve14_a
-	0x0a, // curve15_b
-	0xa0, // curve15_a
-	0x0a, // curve16_b
-	0xa0, // curve16_a
-	0x16, // curve17_b
-	0xa6, // curve17_a
-	0x16, // curve18_b
-	0xa6, // curve18_a
-	0x16, // curve19_b
-	0xa6, // curve19_a
-	0x16, // curve20_b
-	0xa6, // curve20_a
-	0x05, // curve21_b
-	0x21, // curve21_a
-	0x0b, // curve22_b
-	0x20, // curve22_a
-	0x87, // curve23_b
-	0x0f, // curve23_a
-	0x00, // curve24_b
-	0xFF, // curve24_a
+	0x20, // curve_4_a
+	0x00, // curve_5_b
+	0x20, // curve_5_a
+	0x00, // curve_6_b
+	0x20, // curve_6_a
+	0x00, // curve_7_b
+	0x20, // curve_7_a
+	0x00, // curve_8_b
+	0x20, // curve_8_a
+	0x00, // curve_9_b
+	0x20, // curve_9_a
+	0x00, // curve_10_b
+	0x20, // curve_10_a
+	0x00, // curve_11_b
+	0x20, // curve_11_a
+	0x00, // curve_12_b
+	0x20, // curve_12_a
+	0x00, // curve_13_b
+	0x20, // curve_13_a
+	0x00, // curve_14_b
+	0x20, // curve_14_a
+	0x00, // curve_15_b
+	0x20, // curve_15_a
+	0x00, // curve_16_b
+	0x20, // curve_16_a
+	0x00, // curve_17_b
+	0x20, // curve_17_a
+	0x00, // curve_18_b
+	0x20, // curve_18_a
+	0x00, // curve_19_b
+	0x20, // curve_19_a
+	0x00, // curve_20_b
+	0x20, // curve_20_a
+	0x00, // curve_21_b
+	0x20, // curve_21_a
+	0x00, // curve_22_b
+	0x20, // curve_22_a
+	0x00, // curve_23_b
+	0x20, // curve_23_a
+	0x00, // curve_24_b
+	0xff, // curve_24_a
 };
 
 static unsigned char AUTO_UI_2[] = {
 	0xBA, // Start offset 0x09D4, base B1h
-	0x85, // ascr_strength 10000  ascr_on 1  skin_cb 01
+	0x05, // ascr_strength 00000  ascr_on 1  skin_cb 01
 	0x9e, // skin_cb 100111  skin_cr 10
 	0xa4, // skin_cr 101001  up_distance 00
-	0xdc, // up_distance 110111  down_distance 00
+	0x5c, // up_distance 010111  down_distance 00
 	0xa4, // down_distance 101001  right_distance 00
-	0x65, // right_distance 011001  left_distance 01
-	0x1c, // left_distance 000111  up_divided_distance 00
-	0x09, // up_divided_distance 00001001
-	0x4f, // up_divided_distance 01001111
-	0x40, // up_divided_distance 01  down_divided_distance 000000
+	0x64, // right_distance 011001  left_distance 00
+	0x9c, // left_distance 100111  up_divided_distance 00
+	0x16, // up_divided_distance 00010110
+	0x42, // up_divided_distance 01000010
+	0xc0, // up_divided_distance 11  down_divided_distance 000000
 	0xc7, // down_divided_distance 11000111
 	0xd0, // down_divided_distance 110100 right_divided_distance 00
 	0x14, // right_divided_distance 00010100
 	0x7b, // right_divided_distance 01111011
 	0x00, // right_divided_distance 00  left_divided_distance 000000
-	0x73, // left_divided_distance 01110011
-	0x63, // left_divided_distance 011000  ascr_skin_Rr 11
-	0xfd, // ascr_skin_Rr 111111  ascr_skin_Rg 01
-	0x41, // ascr_skin_Rg 010000  ascr_skin_Rb 01
-	0x83, // ascr_skin_Rb 100000  ascr_skin_Yr 11
+	0xd2, // left_divided_distance 11010010
+	0x0f, // left_divided_distance 000011  ascr_skin_Rr 11
+	0xfc, // ascr_skin_Rr 111111  ascr_skin_Rg 00
+	0x00, // ascr_skin_Rg 000000  ascr_skin_Rb 00
+	0x03, // ascr_skin_Rb 000000  ascr_skin_Yr 11
 	0xff, // ascr_skin_Yr 111111  ascr_skin_Yg 11
 	0xfc, // ascr_skin_Yg 111111  ascr_skin_Yb 00
 	0x03, // ascr_skin_Yb 000000  ascr_skin_Mr 11
@@ -963,13 +963,13 @@
 	0xfa, // bth 11111010
 	0x5a, // bin_size_ratio 0101101  dth 0
 	0xe5, // dth 11  min_ref_offset 100101
-	0x8b, // min_ref_offset 10  gamma 0  cs 0 sharpen 1 nr 0 mask_th 11
+	0x9b, // min_ref_offset 10  gamma 0  cs 1 sharpen 1 nr 0 mask_th 11
 	0xfc, // mask_th 111111  sharpen_weight 00
 	0x10, // sharpen_weight 00010000
 	0x14, // max_plus 00010100
 	0x02, // max_plus 000  max_minus 00010
 	0x81, // max_minus 100000  cs_gain 01
-	0x00, // cs_gain 00000000
+	0x20, // cs_gain 00100000
 	0x00, // curve_1_b
 	0x20, // curve_1_a
 	0x00, // curve_2_b
@@ -1052,28 +1052,28 @@
 	0xff, // ascr_skin_Wg 111111  ascr_skin_Wb 11
 	0xfc, // ascr_skin_Wb 111111  ascr_Cr 00
 	0x03, // ascr_Cr 000000  ascr_Rr 11
-	0xff, // ascr_Rr 111111  ascr_Cg 11
-	0xfc, // ascr_Cg 111111  ascr_Rg 00
-	0x5b, // ascr_Rg 010110  ascr_Cb 11
-	0x94, // ascr_Cb 100101  ascr_Rb 00
-	0x3b, // ascr_Rb 001110  ascr_Mr 11
+	0xf3, // ascr_Rr 111100  ascr_Cg 11
+	0xe8, // ascr_Cg 111010  ascr_Rg 00
+	0x4b, // ascr_Rg 010010  ascr_Cb 11
+	0xd4, // ascr_Cb 110101  ascr_Rb 00
+	0x7b, // ascr_Rb 011110  ascr_Mr 11
 	0xfc, // ascr_Mr 111111  ascr_Gr 00
 	0x00, // ascr_Gr 000000  ascr_Mg 00
-	0x53, // ascr_Mg 010100  ascr_Gg 11
-	0xff, // ascr_Gg 111111  ascr_Mb 11
-	0x64, // ascr_Mb 011001  ascr_Gb 00
-	0x13, // ascr_Gb 000100  ascr_Yr 11
+	0xa3, // ascr_Mg 101000  ascr_Gg 11
+	0xe3, // ascr_Gg 111000  ascr_Mb 11
+	0x98, // ascr_Mb 100110  ascr_Gb 00
+	0x03, // ascr_Gb 000000  ascr_Yr 11
 	0xf0, // ascr_Yr 111100  ascr_Br 00
-	0x9b, // ascr_Br 100110  ascr_Yg 11
-	0xfc, // ascr_Yg 111111  ascr_Bg 00
-	0x6c, // ascr_Bg 011011  ascr_Yb 00
-	0x8f, // ascr_Yb 100011  ascr_Bb 11
-	0xff, // ascr_Bb 111111  ascr_Wr 11
+	0xb7, // ascr_Br 101101  ascr_Yg 11
+	0xdc, // ascr_Yg 110111  ascr_Bg 00
+	0x70, // ascr_Bg 011100  ascr_Yb 01
+	0xf3, // ascr_Yb 111100  ascr_Bb 11
+	0xe3, // ascr_Bb 111000  ascr_Wr 11
 	0xfc, // ascr_Wr 111111  ascr_Kr 00
 	0x03, // ascr_Kr 000000  ascr_Wg 11
 	0xe0, // ascr_Wg 111000  ascr_Kg 00
 	0x03, // ascr_Kg 000000  ascr_Wb 11
-	0xbc, // ascr_Wb 101111  ascr_Kb 00
+	0xb8, // ascr_Wb 101110  ascr_Kb 00
 	0x00, // ascr_Kb 000000  reserved 00
 	0x0f, // reserved 0000  vsync_mask 1111
 	/* end */
@@ -1196,30 +1196,30 @@
 	0xff, // ascr_skin_Mb 111111  ascr_skin_Wr 11
 	0xff, // ascr_skin_Wr 111111  ascr_skin_Wg 11
 	0xff, // ascr_skin_Wg 111111  ascr_skin_Wb 11
-	0xfd, // ascr_skin_Wb 111111  ascr_Cr 10
-	0x53, // ascr_Cr 010100  ascr_Rr 11
-	0xff, // ascr_Rr 111111  ascr_Cg 11
+	0xfe, // ascr_skin_Wb 111111  ascr_Cr 10
+	0x2b, // ascr_Cr 001010  ascr_Rr 11
+	0xa3, // ascr_Rr 101000  ascr_Cg 11
 	0xfc, // ascr_Cg 111111  ascr_Rg 00
-	0xcb, // ascr_Rg 110010  ascr_Cb 11
+	0x7b, // ascr_Rg 011110  ascr_Cb 11
 	0xc8, // ascr_Cb 110010  ascr_Rb 00
-	0xcf, // ascr_Rb 110011  ascr_Mr 11
-	0xe9, // ascr_Mr 111010  ascr_Gr 01
-	0xcc, // ascr_Gr 110011  ascr_Mg 00
-	0xf3, // ascr_Mg 111100  ascr_Gg 11
-	0xff, // ascr_Gg 111111  ascr_Mb 11
-	0xfc, // ascr_Mb 111111  ascr_Gb 00
-	0xf7, // ascr_Gb 111101  ascr_Yr 11
-	0xf0, // ascr_Yr 111100  ascr_Br 00
-	0xf7, // ascr_Br 111101  ascr_Yg 11
-	0xfc, // ascr_Yg 111111  ascr_Bg 00
-	0xad, // ascr_Bg 101011  ascr_Yb 01
-	0x5f, // ascr_Yb 010111  ascr_Bb 11
-	0xff, // ascr_Bb 111111  ascr_Wr 11
+	0x9b, // ascr_Rb 100110  ascr_Mr 11
+	0xcd, // ascr_Mr 110011  ascr_Gr 01
+	0xec, // ascr_Gr 111011  ascr_Mg 00
+	0xbb, // ascr_Mg 101110  ascr_Gg 11
+	0xf3, // ascr_Gg 111100  ascr_Mb 11
+	0xd0, // ascr_Mb 110100  ascr_Gb 00
+	0xeb, // ascr_Gb 111101  ascr_Yr 11
+	0xe8, // ascr_Yr 111010  ascr_Br 00
+	0xb7, // ascr_Br 101101  ascr_Yg 11
+	0xd4, // ascr_Yg 110101  ascr_Bg 00
+	0x65, // ascr_Bg 011001  ascr_Yb 01
+	0x1b, // ascr_Yb 000110  ascr_Bb 11
+	0xc7, // ascr_Bb 110001  ascr_Wr 11
 	0xfc, // ascr_Wr 111111  ascr_Kr 00
 	0x03, // ascr_Kr 000000  ascr_Wg 11
 	0xe0, // ascr_Wg 111000  ascr_Kg 00
 	0x03, // ascr_Kg 000000  ascr_Wb 11
-	0xbc, // ascr_Wb 101111  ascr_Kb 00
+	0xb8, // ascr_Wb 101110  ascr_Kb 00
 	0x00, // ascr_Kb 000000  reserved 00
 	0x0f, // reserved 0000  vsync_mask 1111
 	/* end */
@@ -1624,8 +1624,8 @@
 	0xd2, // left_divided_distance 11010010
 	0x0f, // left_divided_distance 000011  ascr_skin_Rr 11
 	0xfd, // ascr_skin_Rr 111111  ascr_skin_Rg 01
-	0x41, // ascr_skin_Rg 010000  ascr_skin_Rb 01
-	0x83, // ascr_skin_Rb 100000  ascr_skin_Yr 11
+	0xa1, // ascr_skin_Rg 101000  ascr_skin_Rb 01
+	0xc3, // ascr_skin_Rb 110000  ascr_skin_Yr 11
 	0xff, // ascr_skin_Yr 111111  ascr_skin_Yg 11
 	0xfc, // ascr_skin_Yg 111111  ascr_skin_Yb 00
 	0x03, // ascr_skin_Yb 000000  ascr_skin_Mr 11
@@ -1633,7 +1633,7 @@
 	0x03, // ascr_skin_Mg 000000  ascr_skin_Mb 11
 	0xff, // ascr_skin_Mb 111111  ascr_skin_Wr 11
 	0xff, // ascr_skin_Wr 111111  ascr_skin_Wg 11
-	0xff, // ascr_skin_Wg 111111  ascr_skin_Wb 11
+	0xe3, // ascr_skin_Wg 111000  ascr_skin_Wb 11
 	0xfc, // ascr_skin_Wb 111111  ascr_Cr 00
 	0x03, // ascr_Cr 000000  ascr_Rr 11
 	0xff, // ascr_Rr 111111  ascr_Cg 11
@@ -1694,13 +1694,13 @@
 	0xfa, // bth 11111010
 	0x5a, // bin_size_ratio 0101101  dth 0
 	0xe5, // dth 11  min_ref_offset 100101
-	0x8b, // min_ref_offset 10  gamma 0  cs 0 sharpen 1 nr 0 mask_th 11
+	0x9b, // min_ref_offset 10  gamma 0  cs 1 sharpen 1 nr 0 mask_th 11
 	0xfc, // mask_th 111111  sharpen_weight 00
 	0x10, // sharpen_weight 00010000
 	0x08, // max_plus 00001000
 	0x01, // max_plus 000  max_minus 00001
 	0x01, // max_minus 000000  cs_gain 01
-	0x00, // cs_gain 00000000
+	0x20, // cs_gain 00100000
 	0x00, // curve_1_b
 	0x20, // curve_1_a
 	0x00, // curve_2_b
@@ -1783,28 +1783,28 @@
 	0xff, // ascr_skin_Wg 111111  ascr_skin_Wb 11
 	0xfc, // ascr_skin_Wb 111111  ascr_Cr 00
 	0x03, // ascr_Cr 000000  ascr_Rr 11
-	0xff, // ascr_Rr 111111  ascr_Cg 11
-	0xfc, // ascr_Cg 111111  ascr_Rg 00
-	0x5b, // ascr_Rg 010110  ascr_Cb 11
-	0x94, // ascr_Cb 100101  ascr_Rb 00
-	0x3b, // ascr_Rb 001110  ascr_Mr 11
+	0xf3, // ascr_Rr 111100  ascr_Cg 11
+	0xe8, // ascr_Cg 111010  ascr_Rg 00
+	0x4b, // ascr_Rg 010010  ascr_Cb 11
+	0xd4, // ascr_Cb 110101  ascr_Rb 00
+	0x7b, // ascr_Rb 011110  ascr_Mr 11
 	0xfc, // ascr_Mr 111111  ascr_Gr 00
 	0x00, // ascr_Gr 000000  ascr_Mg 00
-	0x53, // ascr_Mg 010100  ascr_Gg 11
-	0xff, // ascr_Gg 111111  ascr_Mb 11
-	0x64, // ascr_Mb 011001  ascr_Gb 00
-	0x13, // ascr_Gb 000100  ascr_Yr 11
+	0xa3, // ascr_Mg 101000  ascr_Gg 11
+	0xe3, // ascr_Gg 111000  ascr_Mb 11
+	0x98, // ascr_Mb 100110  ascr_Gb 00
+	0x03, // ascr_Gb 000000  ascr_Yr 11
 	0xf0, // ascr_Yr 111100  ascr_Br 00
-	0x9b, // ascr_Br 100110  ascr_Yg 11
-	0xfc, // ascr_Yg 111111  ascr_Bg 00
-	0x6c, // ascr_Bg 011011  ascr_Yb 00
-	0x8f, // ascr_Yb 100011  ascr_Bb 11
-	0xff, // ascr_Bb 111111  ascr_Wr 11
+	0xb7, // ascr_Br 101101  ascr_Yg 11
+	0xdc, // ascr_Yg 110111  ascr_Bg 00
+	0x70, // ascr_Bg 011100  ascr_Yb 01
+	0xf3, // ascr_Yb 111100  ascr_Bb 11
+	0xe3, // ascr_Bb 111000  ascr_Wr 11
 	0xfc, // ascr_Wr 111111  ascr_Kr 00
 	0x03, // ascr_Kr 000000  ascr_Wg 11
 	0xe0, // ascr_Wg 111000  ascr_Kg 00
 	0x03, // ascr_Kg 000000  ascr_Wb 11
-	0xbc, // ascr_Wb 101111  ascr_Kb 00
+	0xb8, // ascr_Wb 101110  ascr_Kb 00
 	0x00, // ascr_Kb 000000  reserved 00
 	0x0f, // reserved 0000  vsync_mask 1111
 	/* end */
@@ -1927,30 +1927,30 @@
 	0xff, // ascr_skin_Mb 111111  ascr_skin_Wr 11
 	0xff, // ascr_skin_Wr 111111  ascr_skin_Wg 11
 	0xff, // ascr_skin_Wg 111111  ascr_skin_Wb 11
-	0xfd, // ascr_skin_Wb 111111  ascr_Cr 10
-	0x53, // ascr_Cr 010100  ascr_Rr 11
-	0xff, // ascr_Rr 111111  ascr_Cg 11
+	0xfe, // ascr_skin_Wb 111111  ascr_Cr 10
+	0x2b, // ascr_Cr 001010  ascr_Rr 11
+	0xa3, // ascr_Rr 101000  ascr_Cg 11
 	0xfc, // ascr_Cg 111111  ascr_Rg 00
-	0xcb, // ascr_Rg 110010  ascr_Cb 11
+	0x7b, // ascr_Rg 011110  ascr_Cb 11
 	0xc8, // ascr_Cb 110010  ascr_Rb 00
-	0xcf, // ascr_Rb 110011  ascr_Mr 11
-	0xe9, // ascr_Mr 111010  ascr_Gr 01
-	0xcc, // ascr_Gr 110011  ascr_Mg 00
-	0xf3, // ascr_Mg 111100  ascr_Gg 11
-	0xff, // ascr_Gg 111111  ascr_Mb 11
-	0xfc, // ascr_Mb 111111  ascr_Gb 00
-	0xf7, // ascr_Gb 111101  ascr_Yr 11
-	0xf0, // ascr_Yr 111100  ascr_Br 00
-	0xf7, // ascr_Br 111101  ascr_Yg 11
-	0xfc, // ascr_Yg 111111  ascr_Bg 00
-	0xad, // ascr_Bg 101011  ascr_Yb 01
-	0x5f, // ascr_Yb 010111  ascr_Bb 11
-	0xff, // ascr_Bb 111111  ascr_Wr 11
+	0x9b, // ascr_Rb 100110  ascr_Mr 11
+	0xcd, // ascr_Mr 110011  ascr_Gr 01
+	0xec, // ascr_Gr 111011  ascr_Mg 00
+	0xbb, // ascr_Mg 101110  ascr_Gg 11
+	0xf3, // ascr_Gg 111100  ascr_Mb 11
+	0xd0, // ascr_Mb 110100  ascr_Gb 00
+	0xeb, // ascr_Gb 111101  ascr_Yr 11
+	0xe8, // ascr_Yr 111010  ascr_Br 00
+	0xb7, // ascr_Br 101101  ascr_Yg 11
+	0xd4, // ascr_Yg 110101  ascr_Bg 00
+	0x65, // ascr_Bg 011001  ascr_Yb 01
+	0x1b, // ascr_Yb 000110  ascr_Bb 11
+	0xc7, // ascr_Bb 110001  ascr_Wr 11
 	0xfc, // ascr_Wr 111111  ascr_Kr 00
 	0x03, // ascr_Kr 000000  ascr_Wg 11
 	0xe0, // ascr_Wg 111000  ascr_Kg 00
 	0x03, // ascr_Kg 000000  ascr_Wb 11
-	0xbc, // ascr_Wb 101111  ascr_Kb 00
+	0xb8, // ascr_Wb 101110  ascr_Kb 00
 	0x00, // ascr_Kb 000000  reserved 00
 	0x0f, // reserved 0000  vsync_mask 1111
 	/* end */
@@ -2063,8 +2063,8 @@
 	0x73, // left_divided_distance 01110011
 	0x63, // left_divided_distance 011000  ascr_skin_Rr 11
 	0xfd, // ascr_skin_Rr 111111  ascr_skin_Rg 01
-	0x41, // ascr_skin_Rg 010000  ascr_skin_Rb 01
-	0x83, // ascr_skin_Rb 100000  ascr_skin_Yr 11
+	0xd1, // ascr_skin_Rg 110100  ascr_skin_Rb 01
+	0xe3, // ascr_skin_Rb 111000  ascr_skin_Yr 11
 	0xff, // ascr_skin_Yr 111111  ascr_skin_Yg 11
 	0xfc, // ascr_skin_Yg 111111  ascr_skin_Yb 00
 	0x03, // ascr_skin_Yb 000000  ascr_skin_Mr 11
@@ -2072,7 +2072,7 @@
 	0x03, // ascr_skin_Mg 000000  ascr_skin_Mb 11
 	0xff, // ascr_skin_Mb 111111  ascr_skin_Wr 11
 	0xff, // ascr_skin_Wr 111111  ascr_skin_Wg 11
-	0xff, // ascr_skin_Wg 111111  ascr_skin_Wb 11
+	0xd3, // ascr_skin_Wg 110100  ascr_skin_Wb 11
 	0xfc, // ascr_skin_Wb 111111  ascr_Cr 00
 	0x03, // ascr_Cr 000000  ascr_Rr 11
 	0xff, // ascr_Rr 111111  ascr_Cg 11
@@ -2355,8 +2355,8 @@
 	0x73, // left_divided_distance 01110011
 	0x63, // left_divided_distance 011000  ascr_skin_Rr 11
 	0xfd, // ascr_skin_Rr 111111  ascr_skin_Rg 01
-	0x41, // ascr_skin_Rg 010000  ascr_skin_Rb 01
-	0x83, // ascr_skin_Rb 100000  ascr_skin_Yr 11
+	0xd1, // ascr_skin_Rg 110100  ascr_skin_Rb 01
+	0xe3, // ascr_skin_Rb 111000  ascr_skin_Yr 11
 	0xff, // ascr_skin_Yr 111111  ascr_skin_Yg 11
 	0xfc, // ascr_skin_Yg 111111  ascr_skin_Yb 00
 	0x03, // ascr_skin_Yb 000000  ascr_skin_Mr 11
@@ -2364,7 +2364,7 @@
 	0x03, // ascr_skin_Mg 000000  ascr_skin_Mb 11
 	0xff, // ascr_skin_Mb 111111  ascr_skin_Wr 11
 	0xff, // ascr_skin_Wr 111111  ascr_skin_Wg 11
-	0xff, // ascr_skin_Wg 111111  ascr_skin_Wb 11
+	0xd3, // ascr_skin_Wg 110100  ascr_skin_Wb 11
 	0xfc, // ascr_skin_Wb 111111  ascr_Cr 00
 	0x03, // ascr_Cr 000000  ascr_Rr 11
 	0xff, // ascr_Rr 111111  ascr_Cg 11
@@ -2425,13 +2425,13 @@
 	0xfa, // bth 11111010
 	0x5a, // bin_size_ratio 0101101  dth 0
 	0xe5, // dth 11  min_ref_offset 100101
-	0x8b, // min_ref_offset 10  gamma 0  cs 0 sharpen 1 nr 0 mask_th 11
+	0x9b, // min_ref_offset 10  gamma 0  cs 1 sharpen 1 nr 0 mask_th 11
 	0xfc, // mask_th 111111  sharpen_weight 00
 	0x10, // sharpen_weight 00010000
 	0x14, // max_plus 00010100
 	0x02, // max_plus 000  max_minus 00010
 	0x81, // max_minus 100000  cs_gain 01
-	0x00, // cs_gain 00000000
+	0x20, // cs_gain 00100000
 	0x00, // curve_1_b
 	0x20, // curve_1_a
 	0x00, // curve_2_b
@@ -2514,28 +2514,28 @@
 	0xff, // ascr_skin_Wg 111111  ascr_skin_Wb 11
 	0xfc, // ascr_skin_Wb 111111  ascr_Cr 00
 	0x03, // ascr_Cr 000000  ascr_Rr 11
-	0xff, // ascr_Rr 111111  ascr_Cg 11
-	0xfc, // ascr_Cg 111111  ascr_Rg 00
-	0x5b, // ascr_Rg 010110  ascr_Cb 11
-	0x94, // ascr_Cb 100101  ascr_Rb 00
-	0x3b, // ascr_Rb 001110  ascr_Mr 11
+	0xf3, // ascr_Rr 111100  ascr_Cg 11
+	0xe8, // ascr_Cg 111010  ascr_Rg 00
+	0x4b, // ascr_Rg 010010  ascr_Cb 11
+	0xd4, // ascr_Cb 110101  ascr_Rb 00
+	0x7b, // ascr_Rb 011110  ascr_Mr 11
 	0xfc, // ascr_Mr 111111  ascr_Gr 00
 	0x00, // ascr_Gr 000000  ascr_Mg 00
-	0x53, // ascr_Mg 010100  ascr_Gg 11
-	0xff, // ascr_Gg 111111  ascr_Mb 11
-	0x64, // ascr_Mb 011001  ascr_Gb 00
-	0x13, // ascr_Gb 000100  ascr_Yr 11
+	0xa3, // ascr_Mg 101000  ascr_Gg 11
+	0xe3, // ascr_Gg 111000  ascr_Mb 11
+	0x98, // ascr_Mb 100110  ascr_Gb 00
+	0x03, // ascr_Gb 000000  ascr_Yr 11
 	0xf0, // ascr_Yr 111100  ascr_Br 00
-	0x9b, // ascr_Br 100110  ascr_Yg 11
-	0xfc, // ascr_Yg 111111  ascr_Bg 00
-	0x6c, // ascr_Bg 011011  ascr_Yb 00
-	0x8f, // ascr_Yb 100011  ascr_Bb 11
-	0xff, // ascr_Bb 111111  ascr_Wr 11
+	0xb7, // ascr_Br 101101  ascr_Yg 11
+	0xdc, // ascr_Yg 110111  ascr_Bg 00
+	0x70, // ascr_Bg 011100  ascr_Yb 01
+	0xf3, // ascr_Yb 111100  ascr_Bb 11
+	0xe3, // ascr_Bb 111000  ascr_Wr 11
 	0xfc, // ascr_Wr 111111  ascr_Kr 00
 	0x03, // ascr_Kr 000000  ascr_Wg 11
 	0xe0, // ascr_Wg 111000  ascr_Kg 00
 	0x03, // ascr_Kg 000000  ascr_Wb 11
-	0xbc, // ascr_Wb 101111  ascr_Kb 00
+	0xb8, // ascr_Wb 101110  ascr_Kb 00
 	0x00, // ascr_Kb 000000  reserved 00
 	0x0f, // reserved 0000  vsync_mask 1111
 	/* end */
@@ -2658,30 +2658,30 @@
 	0xff, // ascr_skin_Mb 111111  ascr_skin_Wr 11
 	0xff, // ascr_skin_Wr 111111  ascr_skin_Wg 11
 	0xff, // ascr_skin_Wg 111111  ascr_skin_Wb 11
-	0xfd, // ascr_skin_Wb 111111  ascr_Cr 10
-	0x53, // ascr_Cr 010100  ascr_Rr 11
-	0xff, // ascr_Rr 111111  ascr_Cg 11
+	0xfe, // ascr_skin_Wb 111111  ascr_Cr 10
+	0x2b, // ascr_Cr 001010  ascr_Rr 11
+	0xa3, // ascr_Rr 101000  ascr_Cg 11
 	0xfc, // ascr_Cg 111111  ascr_Rg 00
-	0xcb, // ascr_Rg 110010  ascr_Cb 11
+	0x7b, // ascr_Rg 011110  ascr_Cb 11
 	0xc8, // ascr_Cb 110010  ascr_Rb 00
-	0xcf, // ascr_Rb 110011  ascr_Mr 11
-	0xe9, // ascr_Mr 111010  ascr_Gr 01
-	0xcc, // ascr_Gr 110011  ascr_Mg 00
-	0xf3, // ascr_Mg 111100  ascr_Gg 11
-	0xff, // ascr_Gg 111111  ascr_Mb 11
-	0xfc, // ascr_Mb 111111  ascr_Gb 00
-	0xf7, // ascr_Gb 111101  ascr_Yr 11
-	0xf0, // ascr_Yr 111100  ascr_Br 00
-	0xf7, // ascr_Br 111101  ascr_Yg 11
-	0xfc, // ascr_Yg 111111  ascr_Bg 00
-	0xad, // ascr_Bg 101011  ascr_Yb 01
-	0x5f, // ascr_Yb 010111  ascr_Bb 11
-	0xff, // ascr_Bb 111111  ascr_Wr 11
+	0x9b, // ascr_Rb 100110  ascr_Mr 11
+	0xcd, // ascr_Mr 110011  ascr_Gr 01
+	0xec, // ascr_Gr 111011  ascr_Mg 00
+	0xbb, // ascr_Mg 101110  ascr_Gg 11
+	0xf3, // ascr_Gg 111100  ascr_Mb 11
+	0xd0, // ascr_Mb 110100  ascr_Gb 00
+	0xeb, // ascr_Gb 111101  ascr_Yr 11
+	0xe8, // ascr_Yr 111010  ascr_Br 00
+	0xb7, // ascr_Br 101101  ascr_Yg 11
+	0xd4, // ascr_Yg 110101  ascr_Bg 00
+	0x65, // ascr_Bg 011001  ascr_Yb 01
+	0x1b, // ascr_Yb 000110  ascr_Bb 11
+	0xc7, // ascr_Bb 110001  ascr_Wr 11
 	0xfc, // ascr_Wr 111111  ascr_Kr 00
 	0x03, // ascr_Kr 000000  ascr_Wg 11
 	0xe0, // ascr_Wg 111000  ascr_Kg 00
 	0x03, // ascr_Kg 000000  ascr_Wb 11
-	0xbc, // ascr_Wb 101111  ascr_Kb 00
+	0xb8, // ascr_Wb 101110  ascr_Kb 00
 	0x00, // ascr_Kb 000000  reserved 00
 	0x0f, // reserved 0000  vsync_mask 1111
 	/* end */
@@ -3098,8 +3098,8 @@
 	0xff, // ascr_skin_Wg 111111  ascr_skin_Wb 11
 	0xfc, // ascr_skin_Wb 111111  ascr_Cr 00
 	0x03, // ascr_Cr 000000  ascr_Rr 11
+	0xff, // ascr_Rr 111111  ascr_Cg 11
 	0xe4, // ascr_Cg 111001  ascr_Rg 00
-	0xfc, // ascr_Cg 111111  ascr_Rg 00
 	0x03, // ascr_Rg 000000  ascr_Cb 11
 	0xfc, // ascr_Cb 111111  ascr_Rb 00
 	0x03, // ascr_Rb 000000  ascr_Mr 11
@@ -3379,8 +3379,8 @@
 	0xd2, // left_divided_distance 11010010
 	0x0f, // left_divided_distance 000011  ascr_skin_Rr 11
 	0xfd, // ascr_skin_Rr 111111  ascr_skin_Rg 01
-	0x41, // ascr_skin_Rg 010000  ascr_skin_Rb 01
-	0x83, // ascr_skin_Rb 100000  ascr_skin_Yr 11
+	0xa1, // ascr_skin_Rg 101000  ascr_skin_Rb 01
+	0xc3, // ascr_skin_Rb 110000  ascr_skin_Yr 11
 	0xff, // ascr_skin_Yr 111111  ascr_skin_Yg 11
 	0xfc, // ascr_skin_Yg 111111  ascr_skin_Yb 00
 	0x03, // ascr_skin_Yb 000000  ascr_skin_Mr 11
@@ -3388,7 +3388,7 @@
 	0x03, // ascr_skin_Mg 000000  ascr_skin_Mb 11
 	0xff, // ascr_skin_Mb 111111  ascr_skin_Wr 11
 	0xff, // ascr_skin_Wr 111111  ascr_skin_Wg 11
-	0xff, // ascr_skin_Wg 111111  ascr_skin_Wb 11
+	0xe3, // ascr_skin_Wg 111000  ascr_skin_Wb 11
 	0xfc, // ascr_skin_Wb 111111  ascr_Cr 00
 	0x03, // ascr_Cr 000000  ascr_Rr 11
 	0xff, // ascr_Rr 111111  ascr_Cg 11
@@ -3741,13 +3741,13 @@
 	0xfa, // bth 11111010
 	0x5a, // bin_size_ratio 0101101  dth 0
 	0xe5, // dth 11  min_ref_offset 100101
-	0x83, // min_ref_offset 10  gamma 0  cs 0 sharpen 0 nr 0 mask_th 11
+	0x93, // min_ref_offset 10  gamma 0  cs 1 sharpen 0 nr 0 mask_th 11
 	0xfc, // mask_th 111111  sharpen_weight 00
 	0x10, // sharpen_weight 00010000
 	0x14, // max_plus 00010100
 	0x02, // max_plus 000  max_minus 00010
 	0x81, // max_minus 100000  cs_gain 01
-	0x00, // cs_gain 00000000
+	0x20, // cs_gain 00100000
 	0x00, // curve_1_b
 	0x20, // curve_1_a
 	0x00, // curve_2_b
@@ -3830,28 +3830,28 @@
 	0xff, // ascr_skin_Wg 111111  ascr_skin_Wb 11
 	0xfc, // ascr_skin_Wb 111111  ascr_Cr 00
 	0x03, // ascr_Cr 000000  ascr_Rr 11
-	0xff, // ascr_Rr 111111  ascr_Cg 11
-	0xfc, // ascr_Cg 111111  ascr_Rg 00
-	0x5b, // ascr_Rg 010110  ascr_Cb 11
-	0x94, // ascr_Cb 100101  ascr_Rb 00
-	0x3b, // ascr_Rb 001110  ascr_Mr 11
+	0xf3, // ascr_Rr 111100  ascr_Cg 11
+	0xe8, // ascr_Cg 111010  ascr_Rg 00
+	0x4b, // ascr_Rg 010010  ascr_Cb 11
+	0xd4, // ascr_Cb 110101  ascr_Rb 00
+	0x7b, // ascr_Rb 011110  ascr_Mr 11
 	0xfc, // ascr_Mr 111111  ascr_Gr 00
 	0x00, // ascr_Gr 000000  ascr_Mg 00
-	0x53, // ascr_Mg 010100  ascr_Gg 11
-	0xff, // ascr_Gg 111111  ascr_Mb 11
-	0x64, // ascr_Mb 011001  ascr_Gb 00
-	0x13, // ascr_Gb 000100  ascr_Yr 11
+	0xa3, // ascr_Mg 101000  ascr_Gg 11
+	0xe3, // ascr_Gg 111000  ascr_Mb 11
+	0x98, // ascr_Mb 100110  ascr_Gb 00
+	0x03, // ascr_Gb 000000  ascr_Yr 11
 	0xf0, // ascr_Yr 111100  ascr_Br 00
-	0x9b, // ascr_Br 100110  ascr_Yg 11
-	0xfc, // ascr_Yg 111111  ascr_Bg 00
-	0x6c, // ascr_Bg 011011  ascr_Yb 00
-	0x8f, // ascr_Yb 100011  ascr_Bb 11
-	0xff, // ascr_Bb 111111  ascr_Wr 11
+	0xb7, // ascr_Br 101101  ascr_Yg 11
+	0xdc, // ascr_Yg 110111  ascr_Bg 00
+	0x70, // ascr_Bg 011100  ascr_Yb 01
+	0xf3, // ascr_Yb 111100  ascr_Bb 11
+	0xe3, // ascr_Bb 111000  ascr_Wr 11
 	0xfc, // ascr_Wr 111111  ascr_Kr 00
 	0x03, // ascr_Kr 000000  ascr_Wg 11
 	0xe0, // ascr_Wg 111000  ascr_Kg 00
 	0x03, // ascr_Kg 000000  ascr_Wb 11
-	0xbc, // ascr_Wb 101111  ascr_Kb 00
+	0xb8, // ascr_Wb 101110  ascr_Kb 00
 	0x00, // ascr_Kb 000000  reserved 00
 	0x0f, // reserved 0000  vsync_mask 1111
 	/* end */
@@ -3974,30 +3974,30 @@
 	0xff, // ascr_skin_Mb 111111  ascr_skin_Wr 11
 	0xff, // ascr_skin_Wr 111111  ascr_skin_Wg 11
 	0xff, // ascr_skin_Wg 111111  ascr_skin_Wb 11
-	0xfd, // ascr_skin_Wb 111111  ascr_Cr 10
-	0x53, // ascr_Cr 010100  ascr_Rr 11
-	0xff, // ascr_Rr 111111  ascr_Cg 11
+	0xfe, // ascr_skin_Wb 111111  ascr_Cr 10
+	0x2b, // ascr_Cr 001010  ascr_Rr 11
+	0xa3, // ascr_Rr 101000  ascr_Cg 11
 	0xfc, // ascr_Cg 111111  ascr_Rg 00
-	0xcb, // ascr_Rg 110010  ascr_Cb 11
+	0x7b, // ascr_Rg 011110  ascr_Cb 11
 	0xc8, // ascr_Cb 110010  ascr_Rb 00
-	0xcf, // ascr_Rb 110011  ascr_Mr 11
-	0xe9, // ascr_Mr 111010  ascr_Gr 01
-	0xcc, // ascr_Gr 110011  ascr_Mg 00
-	0xf3, // ascr_Mg 111100  ascr_Gg 11
-	0xff, // ascr_Gg 111111  ascr_Mb 11
-	0xfc, // ascr_Mb 111111  ascr_Gb 00
-	0xf7, // ascr_Gb 111101  ascr_Yr 11
-	0xf0, // ascr_Yr 111100  ascr_Br 00
-	0xf7, // ascr_Br 111101  ascr_Yg 11
-	0xfc, // ascr_Yg 111111  ascr_Bg 00
-	0xad, // ascr_Bg 101011  ascr_Yb 01
-	0x5f, // ascr_Yb 010111  ascr_Bb 11
-	0xff, // ascr_Bb 111111  ascr_Wr 11
+	0x9b, // ascr_Rb 100110  ascr_Mr 11
+	0xcd, // ascr_Mr 110011  ascr_Gr 01
+	0xec, // ascr_Gr 111011  ascr_Mg 00
+	0xbb, // ascr_Mg 101110  ascr_Gg 11
+	0xf3, // ascr_Gg 111100  ascr_Mb 11
+	0xd0, // ascr_Mb 110100  ascr_Gb 00
+	0xeb, // ascr_Gb 111101  ascr_Yr 11
+	0xe8, // ascr_Yr 111010  ascr_Br 00
+	0xb7, // ascr_Br 101101  ascr_Yg 11
+	0xd4, // ascr_Yg 110101  ascr_Bg 00
+	0x65, // ascr_Bg 011001  ascr_Yb 01
+	0x1b, // ascr_Yb 000110  ascr_Bb 11
+	0xc7, // ascr_Bb 110001  ascr_Wr 11
 	0xfc, // ascr_Wr 111111  ascr_Kr 00
 	0x03, // ascr_Kr 000000  ascr_Wg 11
 	0xe0, // ascr_Wg 111000  ascr_Kg 00
 	0x03, // ascr_Kg 000000  ascr_Wb 11
-	0xbc, // ascr_Wb 101111  ascr_Kb 00
+	0xb8, // ascr_Wb 101110  ascr_Kb 00
 	0x00, // ascr_Kb 000000  reserved 00
 	0x0f, // reserved 0000  vsync_mask 1111
 	/* end */
@@ -4402,8 +4402,8 @@
 	0xd2, // left_divided_distance 11010010
 	0x0f, // left_divided_distance 000011  ascr_skin_Rr 11
 	0xfd, // ascr_skin_Rr 111111  ascr_skin_Rg 01
-	0x41, // ascr_skin_Rg 010000  ascr_skin_Rb 01
-	0x83, // ascr_skin_Rb 100000  ascr_skin_Yr 11
+	0xa1, // ascr_skin_Rg 101000  ascr_skin_Rb 01
+	0xc3, // ascr_skin_Rb 110000  ascr_skin_Yr 11
 	0xff, // ascr_skin_Yr 111111  ascr_skin_Yg 11
 	0xfc, // ascr_skin_Yg 111111  ascr_skin_Yb 00
 	0x03, // ascr_skin_Yb 000000  ascr_skin_Mr 11
@@ -4411,7 +4411,7 @@
 	0x03, // ascr_skin_Mg 000000  ascr_skin_Mb 11
 	0xff, // ascr_skin_Mb 111111  ascr_skin_Wr 11
 	0xff, // ascr_skin_Wr 111111  ascr_skin_Wg 11
-	0xff, // ascr_skin_Wg 111111  ascr_skin_Wb 11
+	0xe3, // ascr_skin_Wg 111000  ascr_skin_Wb 11
 	0xfc, // ascr_skin_Wb 111111  ascr_Cr 00
 	0x03, // ascr_Cr 000000  ascr_Rr 11
 	0xff, // ascr_Rr 111111  ascr_Cg 11
@@ -4580,9 +4580,9 @@
 	0xff, // ascr_Bb 111111  ascr_Wr 11
 	0xfc, // ascr_Wr 111111  ascr_Kr 00
 	0x03, // ascr_Kr 000000  ascr_Wg 11
-	0xdc, // ascr_Wg 110111  ascr_Kg 00
+	0xd8, // ascr_Wg 110110  ascr_Kg 00
 	0x03, // ascr_Kg 000000  ascr_Wb 11
-	0x98, // ascr_Wb 100110  ascr_Kb 00
+	0xa0, // ascr_Wb 101000  ascr_Kb 00
 	0x00, // ascr_Kb 000000  reserved 00
 	0x0f, // reserved 0000  vsync_mask 1111
 	/* end */
@@ -4726,9 +4726,9 @@
 	0xff, // ascr_Bb 111111  ascr_Wr 11
 	0xfc, // ascr_Wr 111111  ascr_Kr 00
 	0x03, // ascr_Kr 000000  ascr_Wg 11
-	0xdc, // ascr_Wg 110111  ascr_Kg 00
+	0xd8, // ascr_Wg 110110  ascr_Kg 00
 	0x03, // ascr_Kg 000000  ascr_Wb 11
-	0x98, // ascr_Wb 100110  ascr_Kb 00
+	0xa0, // ascr_Wb 101000  ascr_Kb 00
 	0x00, // ascr_Kb 000000  reserved 00
 	0x0f, // reserved 0000  vsync_mask 1111
 	/* end */
@@ -4872,9 +4872,9 @@
 	0xff, // ascr_Bb 111111  ascr_Wr 11
 	0xfc, // ascr_Wr 111111  ascr_Kr 00
 	0x03, // ascr_Kr 000000  ascr_Wg 11
-	0xdc, // ascr_Wg 110111  ascr_Kg 00
+	0xd8, // ascr_Wg 110110  ascr_Kg 00
 	0x03, // ascr_Kg 000000  ascr_Wb 11
-	0x98, // ascr_Wb 100110  ascr_Kb 00
+	0xa0, // ascr_Wb 101000  ascr_Kb 00
 	0x00, // ascr_Kb 000000  reserved 00
 	0x0f, // reserved 0000  vsync_mask 1111
 	/* end */
@@ -5018,9 +5018,9 @@
 	0xff, // ascr_Bb 111111  ascr_Wr 11
 	0xfc, // ascr_Wr 111111  ascr_Kr 00
 	0x03, // ascr_Kr 000000  ascr_Wg 11
-	0xdc, // ascr_Wg 110111  ascr_Kg 00
+	0xd8, // ascr_Wg 110110  ascr_Kg 00
 	0x03, // ascr_Kg 000000  ascr_Wb 11
-	0x98, // ascr_Wb 100110  ascr_Kb 00
+	0xa0, // ascr_Wb 101000  ascr_Kb 00
 	0x00, // ascr_Kb 000000  reserved 00
 	0x0f, // reserved 0000  vsync_mask 1111
 	/* end */
@@ -5164,9 +5164,9 @@
 	0xff, // ascr_Bb 111111  ascr_Wr 11
 	0xfc, // ascr_Wr 111111  ascr_Kr 00
 	0x03, // ascr_Kr 000000  ascr_Wg 11
-	0xdc, // ascr_Wg 110111  ascr_Kg 00
+	0xd8, // ascr_Wg 110110  ascr_Kg 00
 	0x03, // ascr_Kg 000000  ascr_Wb 11
-	0x98, // ascr_Wb 100110  ascr_Kb 00
+	0xa0, // ascr_Wb 101000  ascr_Kb 00
 	0x00, // ascr_Kb 000000  reserved 00
 	0x0f, // reserved 0000  vsync_mask 1111
 	/* end */
@@ -5356,51 +5356,51 @@
 	0x81, // max_minus 100000  cs_gain 01
 	0x40, // cs_gain 01000000
 	0x00, // curve_1_b
-	0x00, // curve_1_a
-	0x00, // curve_2_b
-	0x00, // curve_2_a
-	0x0f, // curve_3_b
-	0xc0, // curve_3_a
-	0x0f, // curve_4_b
-	0xc0, // curve_4_a
-	0x00, // curve_5_b
-	0x20, // curve_5_a
-	0x00, // curve_6_b
-	0x20, // curve_6_a
-	0x00, // curve_7_b
-	0x20, // curve_7_a
-	0x00, // curve_8_b
-	0x20, // curve_8_a
-	0x00, // curve_9_b
-	0x20, // curve_9_a
-	0x1e, // curve_10_b
-	0xbb, // curve_10_a
-	0x1e, // curve_11_b
-	0xbb, // curve_11_a
-	0x1e, // curve_12_b
-	0xbb, // curve_12_a
-	0x1e, // curve_13_b
-	0xbb, // curve_13_a
-	0x1e, // curve_14_b
-	0xbb, // curve_14_a
-	0x1e, // curve_15_b
-	0xbb, // curve_15_a
-	0x1a, // curve_16_b
-	0xb9, // curve_16_a
-	0x1a, // curve_17_b
-	0xb9, // curve_17_a
-	0x1a, // curve_18_b
-	0xb9, // curve_18_a
-	0x1a, // curve_19_b
-	0xb9, // curve_19_a
-	0x82, // curve_20_b
-	0x11, // curve_20_a
-	0x92, // curve_21_b
-	0x0e, // curve_21_a
-	0x98, // curve_22_b
-	0x0d, // curve_22_a
-	0x9f, // curve_23_b
-	0x0c, // curve_23_a
+	0x6b, // curve_1_a
+	0x03, // curve_2_b
+	0x48, // curve_2_a
+	0x08, // curve_3_b
+	0x32, // curve_3_a
+	0x08, // curve_4_b
+	0x32, // curve_4_a
+	0x08, // curve_5_b
+	0x32, // curve_5_a
+	0x08, // curve_6_b
+	0x32, // curve_6_a
+	0x08, // curve_7_b
+	0x32, // curve_7_a
+	0x10, // curve_8_b
+	0x28, // curve_8_a
+	0x10, // curve_9_b
+	0x28, // curve_9_a
+	0x10, // curve_10_b
+	0x28, // curve_10_a
+	0x10, // curve_11_b
+	0x28, // curve_11_a
+	0x10, // curve_12_b
+	0x28, // curve_12_a
+	0x19, // curve_13_b
+	0x22, // curve_13_a
+	0x49, // curve_14_b
+	0xdf, // curve_14_a
+	0x49, // curve_15_b
+	0xdf, // curve_15_a
+	0x49, // curve_16_b
+	0xdf, // curve_16_a
+	0x49, // curve_17_b
+	0xdf, // curve_17_a
+	0x50, // curve_18_b
+	0x1c, // curve_18_a
+	0x5b, // curve_19_b
+	0x18, // curve_19_a
+	0x6a, // curve_20_b
+	0x14, // curve_20_a
+	0x7a, // curve_21_b
+	0x11, // curve_21_a
+	0x87, // curve_22_b
+	0x0f, // curve_22_a
+	0x87, // curve_23_b
+	0x0f, // curve_23_a
 	0x00, // curve_24_b
 	0xff, // curve_24_a
 };
@@ -5456,7 +5456,153 @@
 	0xff, // ascr_Bb 111111  ascr_Wr 11
 	0xfc, // ascr_Wr 111111  ascr_Kr 00
 	0x03, // ascr_Kr 000000  ascr_Wg 11
-	0xdc, // ascr_Wg 111111  ascr_Kg 00
+	0xe0, // ascr_Wg 111000  ascr_Kg 00
+	0x03, // ascr_Kg 000000  ascr_Wb 11
+	0xfc, // ascr_Wb 111111  ascr_Kb 00
+	0x00, // ascr_Kb 000000  reserved 00
+	0x0f, // reserved 0000  vsync_mask 1111
+	/* end */
+};
+
+static unsigned char LOCAL_CE_TEXT_1[] = {
+	/* start */
+	0xBA, // Start offset 0x0982, base B1h
+	0x33, // data_width 00  lce_module 1  lcd_bypass 1  lcd_roi 00  algo_module 1  algo_bypass 1
+	0x30, // algo_roi 00  ascr_module 1  ascr_bypass 1  ascr_roi 00  roi_type 00
+	0x00, // roi0_x_start 00000000
+	0x00, // roi0_x_start 0000  roi0_x_end 0000
+	0x00, // roi0_x_end 00000000
+	0x00, // roi0_y_start 00000000
+	0x00, // roi0_y_start 0000  roi0_y_end 0000
+	0x00, // roi0_y_end 00000000
+	0x00, // roi1_x_start 00000000
+	0x00, // roi1_x_start 0000  roi1_x_end 0000
+	0x00, // roi1_x_end 00000000
+	0x00, // roi1_y_start 00000000
+	0x00, // roi1_y_start 0000  roi1_y_end 0000
+	0x00, // roi1_y_end 00000000
+	0xa0, // hsize 10100000
+	0x06, // hsize 0000  vsize 0110
+	0x40, // vsize 01000000
+	0x17, // gain 000101 cgain 11
+	0x00, // cgain 0000  scene_on 0  scene_tran 000
+	0x14, // scene_tran 0  min_diff 0010100
+	0x90, // illum_gain 10010000
+	0xdf, // ref_offset 11011111
+	0xac, // ref_offset 1  ref_gain 0101100
+	0x3f, // ref_gain 00  hbsize 111  vbsize 111
+	0xfa, // bth 11111010
+	0xfe, // bin_size_ratio 1111111  dth 0
+	0x10, // dth 00  min_ref_offset 010000
+	0x1b, // min_ref_offset 00  gamma 0  cs 1 sharpen 1 nr 0 mask_th 11
+	0xfc, // mask_th 111111  sharpen_weight 00
+	0x40, // sharpen_weight 01000000
+	0x14, // max_plus 00010100
+	0x02, // max_plus 000  max_minus 00010
+	0x81, // max_minus 100000  cs_gain 01
+	0x40, // cs_gain 00000000
+	0x00, // curve_1_b
+	0x6b, // curve_1_a
+	0x03, // curve_2_b
+	0x48, // curve_2_a
+	0x08, // curve_3_b
+	0x32, // curve_3_a
+	0x08, // curve_4_b
+	0x32, // curve_4_a
+	0x08, // curve_5_b
+	0x32, // curve_5_a
+	0x08, // curve_6_b
+	0x32, // curve_6_a
+	0x08, // curve_7_b
+	0x32, // curve_7_a
+	0x10, // curve_8_b
+	0x28, // curve_8_a
+	0x10, // curve_9_b
+	0x28, // curve_9_a
+	0x10, // curve_10_b
+	0x28, // curve_10_a
+	0x10, // curve_11_b
+	0x28, // curve_11_a
+	0x10, // curve_12_b
+	0x28, // curve_12_a
+	0x19, // curve_13_b
+	0x22, // curve_13_a
+	0x49, // curve_14_b
+	0xdf, // curve_14_a
+	0x49, // curve_15_b
+	0xdf, // curve_15_a
+	0x49, // curve_16_b
+	0xdf, // curve_16_a
+	0x49, // curve_17_b
+	0xdf, // curve_17_a
+	0x50, // curve_18_b
+	0x1c, // curve_18_a
+	0x5b, // curve_19_b
+	0x18, // curve_19_a
+	0x6a, // curve_20_b
+	0x14, // curve_20_a
+	0x7a, // curve_21_b
+	0x11, // curve_21_a
+	0x87, // curve_22_b
+	0x0f, // curve_22_a
+	0x87, // curve_23_b
+	0x0f, // curve_23_a
+	0x00, // curve_24_b
+	0xff, // curve_24_a
+};
+
+static unsigned char LOCAL_CE_TEXT_2[] = {
+	0xBA, // Start offset 0x09D4, base B1h
+	0x85, // ascr_strength 10000  ascr_on 1  skin_cb 01
+	0x9e, // skin_cb 100111  skin_cr 10
+	0xa5, // skin_cr 101001  up_distance 01
+	0x58, // up_distance 010110  down_distance 00
+	0xa4, // down_distance 101001  right_distance 00
+	0x65, // right_distance 011001  left_distance 01
+	0x9c, // left_distance 100111  up_divided_distance 00
+	0x05, // up_divided_distance 00000101
+	0xf4, // up_divided_distance 11110100
+	0x00, // up_divided_distance 00 down_divided_distance 000000
+	0xc7, // down_divided_distance 11000111
+	0xd0, // down_divided_distance 110100 right_divided_distance 00
+	0x14, // right_divided_distance 00010100
+	0x7b, // right_divided_distance 01111011
+	0x00, // right_divided_distance 00  left_divided_distance 000000
+	0x4f, // left_divided_distance 01001111
+	0x8b, // left_divided_distance 100010  ascr_skin_Rr 11
+	0xfe, // ascr_skin_Rr 111111  ascr_skin_Rg 10
+	0x82, // ascr_skin_Rg 100000  ascr_skin_Rb 10
+	0x83, // ascr_skin_Rb 100000  ascr_skin_Yr 11
+	0xfe, // ascr_skin_Yr 111111  ascr_skin_Yg 10
+	0x40, // ascr_skin_Yg 010000  ascr_skin_Yb 00
+	0x03, // ascr_skin_Yb 000000  ascr_skin_Mr 11
+	0xfc, // ascr_skin_Mr 111111  ascr_skin_Mg 00
+	0x03, // ascr_skin_Mg 000000  ascr_skin_Mb 11
+	0xff, // ascr_skin_Mb 111111  ascr_skin_Wr 11
+	0xff, // ascr_skin_Wr 111111  ascr_skin_Wg 11
+	0xff, // ascr_skin_Wg 111111  ascr_skin_Wb 11
+	0xfc, // ascr_skin_Wb 111111  ascr_Cr 00
+	0x03, // ascr_Cr 000000  ascr_Rr 11
+	0xff, // ascr_Rr 111111  ascr_Cg 11
+	0xfc, // ascr_Cg 111111  ascr_Rg 00
+	0x03, // ascr_Rg 000000  ascr_Cb 11
+	0xfc, // ascr_Cb 111111  ascr_Rb 00
+	0x03, // ascr_Rb 000000  ascr_Mr 11
+	0xfc, // ascr_Mr 111111  ascr_Gr 00
+	0x00, // ascr_Gr 000000  ascr_Mg 00
+	0x03, // ascr_Mg 000000  ascr_Gg 11
+	0xff, // ascr_Gg 111111  ascr_Mb 11
+	0xfc, // ascr_Mb 111111  ascr_Gb 00
+	0x03, // ascr_Gb 000000  ascr_Yr 11
+	0xfc, // ascr_Yr 111111  ascr_Br 00
+	0x03, // ascr_Br 000000  ascr_Yg 11
+	0xfc, // ascr_Yg 111111  ascr_Bg 00
+	0x00, // ascr_Bg 000000  ascr_Yb 00
+	0x03, // ascr_Yb 000000  ascr_Bb 11
+	0xff, // ascr_Bb 111111  ascr_Wr 11
+	0xfc, // ascr_Wr 111111  ascr_Kr 00
+	0x03, // ascr_Kr 000000  ascr_Wg 11
+	0xe0, // ascr_Wg 111000  ascr_Kg 00
 	0x03, // ascr_Kg 000000  ascr_Wb 11
 	0xfc, // ascr_Wb 111111  ascr_Kb 00
 	0x00, // ascr_Kb 000000  reserved 00
diff -Nur a/drivers/video/msm/mdss/mdnie_lite_tuning_data.h b/drivers/video/msm/mdss/mdnie_lite_tuning_data.h
--- a/drivers/video/msm/mdss/mdnie_lite_tuning_data.h	2016-01-10 16:25:37.418141000 -0500
+++ b/drivers/video/msm/mdss/mdnie_lite_tuning_data.h	2015-12-01 05:57:12.000000000 -0500
@@ -21,6 +21,127 @@
 
 ////////////////// UI /// /////////////////////
 
+static char SCREEN_CURTAIN_1[] = {
+	//start
+	0xEB,
+	0x01, //mdnie_en
+	0x00, //data_width mask 00 000
+	0x32, //scr_roi 1 scr algo_roi 1 algo 00 1 0 00 1 0
+	0x00, //sharpen cc gamma 00 0 0
+};
+
+static char SCREEN_CURTAIN_2[] = {
+	0xEC,
+	0x00, //roi ctrl
+	0x00, //roi0 x start
+	0x00,
+	0x00, //roi0 x end
+	0x00,
+	0x00, //roi0 y start
+	0x00,
+	0x00, //roi0 y end
+	0x00,
+	0x00, //roi1 x strat
+	0x00,
+	0x00, //roi1 x end
+	0x00,
+	0x00, //roi1 y start
+	0x00,
+	0x00, //roi1 y end
+	0x00,
+	0x00, //scr Cr Yb
+	0x00, //scr Rr Bb
+	0x00, //scr Cg Yg
+	0x00, //scr Rg Bg
+	0x00, //scr Cb Yr
+	0x00, //scr Rb Br
+	0x00, //scr Mr Mb
+	0x00, //scr Gr Gb
+	0x00, //scr Mg Mg
+	0x00, //scr Gg Gg
+	0x00, //scr Mb Mr
+	0x00, //scr Gb Gr
+	0x00, //scr Yr Cb
+	0x00, //scr Br Rb
+	0x00, //scr Yg Cg
+	0x00, //scr Bg Rg
+	0x00, //scr Yb Cr
+	0x00, //scr Bb Rr
+	0x00, //scr Wr Wb
+	0x00, //scr Kr Kb
+	0x00, //scr Wg Wg
+	0x00, //scr Kg Kg
+	0x00, //scr Wb Wr
+	0x00, //scr Kb Kr
+	0x00, //curve 1 b
+	0x20, //curve 1 a
+	0x00, //curve 2 b
+	0x20, //curve 2 a
+	0x00, //curve 3 b
+	0x20, //curve 3 a
+	0x00, //curve 4 b
+	0x20, //curve 4 a
+	0x02, //curve 5 b
+	0x1b, //curve 5 a
+	0x02, //curve 6 b
+	0x1b, //curve 6 a
+	0x02, //curve 7 b
+	0x1b, //curve 7 a
+	0x02, //curve 8 b
+	0x1b, //curve 8 a
+	0x09, //curve 9 b
+	0xa6, //curve 9 a
+	0x09, //curve10 b
+	0xa6, //curve10 a
+	0x09, //curve11 b
+	0xa6, //curve11 a
+	0x09, //curve12 b
+	0xa6, //curve12 a
+	0x00, //curve13 b
+	0x20, //curve13 a
+	0x00, //curve14 b
+	0x20, //curve14 a
+	0x00, //curve15 b
+	0x20, //curve15 a
+	0x00, //curve16 b
+	0x20, //curve16 a
+	0x00, //curve17 b
+	0x20, //curve17 a
+	0x00, //curve18 b
+	0x20, //curve18 a
+	0x00, //curve19 b
+	0x20, //curve19 a
+	0x00, //curve20 b
+	0x20, //curve20 a
+	0x00, //curve21 b
+	0x20, //curve21 a
+	0x00, //curve22 b
+	0x20, //curve22 a
+	0x00, //curve23 b
+	0x20, //curve23 a
+	0x00, //curve24 b
+	0xFF, //curve24 a
+	0x04, //cc r1
+	0x00,
+	0x00, //cc r2
+	0x00,
+	0x00, //cc r3
+	0x00,
+	0x00, //cc g1
+	0x00,
+	0x04, //cc g2
+	0x00,
+	0x00, //cc g3
+	0x00,
+	0x00, //cc b1
+	0x00,
+	0x00, //cc b2
+	0x00,
+	0x04, //cc b3
+	0x00,
+	//end
+};
+
 static char STANDARD_UI_1[] = {
 	0xEB,
 	0x01, //mdnie_en
@@ -4491,6 +4612,7 @@
 		{NULL, NULL},
 		{NEGATIVE_1, NEGATIVE_2},
 		{COLOR_BLIND_1, COLOR_BLIND_2},
+		{SCREEN_CURTAIN_1, SCREEN_CURTAIN_2},
 };
 
 char *mdnie_tune_value[MAX_mDNIe_MODE][MAX_BACKGROUND_MODE][MAX_OUTDOOR_MODE][2] = {
diff -Nur a/drivers/video/msm/mdss/mdnie_lite_tuning_data_hlte.h b/drivers/video/msm/mdss/mdnie_lite_tuning_data_hlte.h
--- a/drivers/video/msm/mdss/mdnie_lite_tuning_data_hlte.h	2016-01-10 16:25:37.419141000 -0500
+++ b/drivers/video/msm/mdss/mdnie_lite_tuning_data_hlte.h	2015-12-01 05:57:13.000000000 -0500
@@ -19,6 +19,244 @@
 #ifndef _MDNIE_LITE_TUNING_DATA_H_
 #define _MDNIE_LITE_TUNING_DATA_H_
 
+char GRAYSCALE_1[] = {
+	0xEB,
+	0x01, //mdnie_en
+	0x00, //data_width mask 00 000
+	0x33, //scr_roi 1 scr algo_roi 1 algo 00 1 0 00 1 0
+	0x01, //sharpen cc gamma 00 0 0
+};
+
+char GRAYSCALE_2[] = {
+	0xEC,
+	0x00, //roi ctrl
+	0x00, //roi0 x start
+	0x00,
+	0x00, //roi0 x end
+	0x00,
+	0x00, //roi0 y start
+	0x00,
+	0x00, //roi0 y end
+	0x00,
+	0x00, //roi1 x strat
+	0x00,
+	0x00, //roi1 x end
+	0x00,
+	0x00, //roi1 y start
+	0x00,
+	0x00, //roi1 y end
+	0x00,
+	0xb3, //scr Cr Yb
+	0x4c, //scr Rr Bb
+	0xb3, //scr Cg Yg
+	0x4c, //scr Rg Bg
+	0xb3, //scr Cb Yr
+	0x4c, //scr Rb Br
+	0x69, //scr Mr Mb
+	0x96, //scr Gr Gb
+	0x69, //scr Mg Mg
+	0x96, //scr Gg Gg
+	0x69, //scr Mb Mr
+	0x96, //scr Gb Gr
+	0xe2, //scr Yr Cb
+	0x1d, //scr Br Rb
+	0xe2, //scr Yg Cg
+	0x1d, //scr Bg Rg
+	0xe2, //scr Yb Cr
+	0x1d, //scr Bb Rr
+	0xff, //scr Wr Wb
+	0x00, //scr Kr Kb
+	0xff, //scr Wg Wg
+	0x00, //scr Kg Kg
+	0xff, //scr Wb Wr
+	0x00, //scr Kb Kr
+	0x00, //curve 1 b
+	0x20, //curve 1 a
+	0x00, //curve 2 b
+	0x20, //curve 2 a
+	0x00, //curve 3 b
+	0x20, //curve 3 a
+	0x00, //curve 4 b
+	0x20, //curve 4 a
+	0x02, //curve 5 b
+	0x1b, //curve 5 a
+	0x02, //curve 6 b
+	0x1b, //curve 6 a
+	0x02, //curve 7 b
+	0x1b, //curve 7 a
+	0x01, //curve 8 b
+	0x1b, //curve 8 a
+	0x09, //curve 9 b
+	0xa6, //curve 9 a
+	0x09, //curve10 b
+	0xa6, //curve10 a
+	0x09, //curve11 b
+	0xa6, //curve11 a
+	0x09, //curve12 b
+	0xa6, //curve12 a
+	0x00, //curve13 b
+	0x20, //curve13 a
+	0x00, //curve14 b
+	0x20, //curve14 a
+	0x00, //curve15 b
+	0x20, //curve15 a
+	0x00, //curve16 b
+	0x20, //curve16 a
+	0x00, //curve17 b
+	0x20, //curve17 a
+	0x00, //curve18 b
+	0x20, //curve18 a
+	0x00, //curve19 b
+	0x20, //curve19 a
+	0x00, //curve20 b
+	0x20, //curve20 a
+	0x00, //curve21 b
+	0x20, //curve21 a
+	0x00, //curve22 b
+	0x20, //curve22 a
+	0x00, //curve23 b
+	0x20, //curve23 a
+	0x00, //curve24 b
+	0xFF, //curve24 a
+	0x04, //cc r1 0.06x
+	0x2b,
+	0x1f, //cc r2
+	0xdc,
+	0x1f, //cc r3
+	0xf9,
+	0x1f, //cc g1
+	0xee,
+	0x04, //cc g2
+	0x19,
+	0x1f, //cc g3
+	0xf9,
+	0x1f, //cc b1
+	0xee,
+	0x1f, //cc b2
+	0xdc,
+	0x04, //cc b3
+	0x36,
+};
+
+char GRAYSCALE_NEGATIVE_1[] = {
+	0xEB,
+	0x01, //mdnie_en
+	0x00, //data_width mask 00 000
+	0x33, //scr_roi 1 scr algo_roi 1 algo 00 1 0 00 1 0
+	0x01, //sharpen cc gamma 00 0 0
+};
+
+char GRAYSCALE_NEGATIVE_2[] = {
+	0xEC,
+	0x00, //roi ctrl
+	0x00, //roi0 x start
+	0x00,
+	0x00, //roi0 x end
+	0x00,
+	0x00, //roi0 y start
+	0x00,
+	0x00, //roi0 y end
+	0x00,
+	0x00, //roi1 x strat
+	0x00,
+	0x00, //roi1 x end
+	0x00,
+	0x00, //roi1 y start
+	0x00,
+	0x00, //roi1 y end
+	0x00,
+	0x4c, //scr Cr Yb
+	0xb3, //scr Rr Bb
+	0x4c, //scr Cg Yg
+	0xb3, //scr Rg Bg
+	0x4c, //scr Cb Yr
+	0xb3, //scr Rb Br
+	0x96, //scr Mr Mb
+	0x69, //scr Gr Gb
+	0x96, //scr Mg Mg
+	0x69, //scr Gg Gg
+	0x96, //scr Mb Mr
+	0x69, //scr Gb Gr
+	0x1d, //scr Yr Cb
+	0xe2, //scr Br Rb
+	0x1d, //scr Yg Cg
+	0xe2, //scr Bg Rg
+	0x1d, //scr Yb Cr
+	0xe2, //scr Bb Rr
+	0x00, //scr Wr Wb
+	0xff, //scr Kr Kb
+	0x00, //scr Wg Wg
+	0xff, //scr Kg Kg
+	0x00, //scr Wb Wr
+	0xff, //scr Kb Kr
+	0x00, //curve 1 b
+	0x20, //curve 1 a
+	0x00, //curve 2 b
+	0x20, //curve 2 a
+	0x00, //curve 3 b
+	0x20, //curve 3 a
+	0x00, //curve 4 b
+	0x20, //curve 4 a
+	0x02, //curve 5 b
+	0x1b, //curve 5 a
+	0x02, //curve 6 b
+	0x1b, //curve 6 a
+	0x02, //curve 7 b
+	0x1b, //curve 7 a
+	0x01, //curve 8 b
+	0x1b, //curve 8 a
+	0x09, //curve 9 b
+	0xa6, //curve 9 a
+	0x09, //curve10 b
+	0xa6, //curve10 a
+	0x09, //curve11 b
+	0xa6, //curve11 a
+	0x09, //curve12 b
+	0xa6, //curve12 a
+	0x00, //curve13 b
+	0x20, //curve13 a
+	0x00, //curve14 b
+	0x20, //curve14 a
+	0x00, //curve15 b
+	0x20, //curve15 a
+	0x00, //curve16 b
+	0x20, //curve16 a
+	0x00, //curve17 b
+	0x20, //curve17 a
+	0x00, //curve18 b
+	0x20, //curve18 a
+	0x00, //curve19 b
+	0x20, //curve19 a
+	0x00, //curve20 b
+	0x20, //curve20 a
+	0x00, //curve21 b
+	0x20, //curve21 a
+	0x00, //curve22 b
+	0x20, //curve22 a
+	0x00, //curve23 b
+	0x20, //curve23 a
+	0x00, //curve24 b
+	0xFF, //curve24 a
+	0x04, //cc r1 0.06x
+	0x2b,
+	0x1f, //cc r2
+	0xdc,
+	0x1f, //cc r3
+	0xf9,
+	0x1f, //cc g1
+	0xee,
+	0x04, //cc g2
+	0x19,
+	0x1f, //cc g3
+	0xf9,
+	0x1f, //cc b1
+	0xee,
+	0x1f, //cc b2
+	0xdc,
+	0x04, //cc b3
+	0x36,
+};
+
 ////////////////// UI /// /////////////////////
 
 static char SCREEN_CURTAIN_1[] = {
@@ -4605,6 +4843,8 @@
 		{NEGATIVE_1, NEGATIVE_2},
 		{COLOR_BLIND_1, COLOR_BLIND_2},
 		{SCREEN_CURTAIN_1, SCREEN_CURTAIN_2},
+		{GRAYSCALE_1, GRAYSCALE_2},
+		{GRAYSCALE_NEGATIVE_1, GRAYSCALE_NEGATIVE_2}
 };
 
 char *mdnie_tune_value[MAX_mDNIe_MODE][MAX_BACKGROUND_MODE][MAX_OUTDOOR_MODE][2] = {
diff -Nur a/drivers/video/msm/mdss/mdnie_lite_tuning_data_jactiveltexx.h b/drivers/video/msm/mdss/mdnie_lite_tuning_data_jactiveltexx.h
--- a/drivers/video/msm/mdss/mdnie_lite_tuning_data_jactiveltexx.h	2016-01-10 16:25:37.419141000 -0500
+++ b/drivers/video/msm/mdss/mdnie_lite_tuning_data_jactiveltexx.h	2015-12-01 05:57:13.000000000 -0500
@@ -3331,9 +3331,9 @@
 	0xff, //scr Bb Rr
 	0xff, //scr Wr Wb
 	0x00, //scr Kr Kb
-	0xff, //scr Wg Wg
+	0xf8, //scr Wg Wg
 	0x00, //scr Kg Kg
-	0xff, //scr Wb Wr
+	0xec, //scr Wb Wr
 	0x00, //scr Kb Kr
 	0x00, //curve 1 b
 	0x1b, //curve 1 a
@@ -3450,76 +3450,76 @@
 	0xff, //scr Bb Rr
 	0xff, //scr Wr Wb
 	0x00, //scr Kr Kb
-	0xff, //scr Wg Wg
+	0xf8, //scr Wg Wg
 	0x00, //scr Kg Kg
-	0xff, //scr Wb Wr
+	0xec, //scr Wb Wr
 	0x00, //scr Kb Kr
 	0x00, //curve 1 b
-	0x18, //curve 1 a
+	0x1b, //curve 1 a
 	0x00, //curve 2 b
-	0x18, //curve 2 a
+	0x1b, //curve 2 a
 	0x00, //curve 3 b
-	0x18, //curve 3 a
+	0x1b, //curve 3 a
 	0x00, //curve 4 b
-	0x18, //curve 4 a
+	0x1b, //curve 4 a
 	0x00, //curve 5 b
-	0x18, //curve 5 a
+	0x1b, //curve 5 a
 	0x00, //curve 6 b
-	0x18, //curve 6 a
+	0x1b, //curve 6 a
 	0x00, //curve 7 b
-	0x18, //curve 7 a
+	0x1b, //curve 7 a
 	0x00, //curve 8 b
-	0x18, //curve 8 a
+	0x1b, //curve 8 a
 	0x00, //curve 9 b
-	0x18, //curve 9 a
+	0x1b, //curve 9 a
 	0x00, //curve10 b
-	0x18, //curve10 a
-	0x00, //curve11 b
-	0x18, //curve11 a
-	0x00, //curve12 b
-	0x18, //curve12 a
-	0x00, //curve13 b
-	0x18, //curve13 a
-	0x14, //curve14 b
-	0xa4, //curve14 a
-	0x14, //curve15 b
-	0xa4, //curve15 a
-	0x14, //curve16 b
-	0xa4, //curve16 a
-	0x14, //curve17 b
-	0xa4, //curve17 a
-	0x14, //curve18 b
-	0xa4, //curve18 a
-	0x14, //curve19 b
-	0xa4, //curve19 a
-	0x14, //curve20 b
-	0xa4, //curve20 a
-	0x14, //curve21 b
-	0xa4, //curve21 a
-	0x05, //curve22 b
-	0x20, //curve22 a
-	0x38, //curve23 b
-	0x19, //curve23 a
+	0x1b, //curve10 a
+	0x05, //curve11 b
+	0x9f, //curve11 a
+	0x05, //curve12 b
+	0x9f, //curve12 a
+	0x05, //curve13 b
+	0x9f, //curve13 a
+	0x05, //curve14 b
+	0x9f, //curve14 a
+	0x05, //curve15 b
+	0x9f, //curve15 a
+	0x05, //curve16 b
+	0x9f, //curve16 a
+	0x05, //curve17 b
+	0x9f, //curve17 a
+	0x05, //curve18 b
+	0x9f, //curve18 a
+	0x08, //curve19 b
+	0xa0, //curve19 a
+	0x10, //curve20 b
+	0xa2, //curve20 a
+	0x10, //curve21 b
+	0xa2, //curve21 a
+	0x10, //curve22 b
+	0xa2, //curve22 a
+	0x10, //curve23 b
+	0xa2, //curve23 a
 	0x00, //curve24 b
 	0xFF, //curve24 a
-	0x04, //cc r1 0.18
-	0x81,
+	0x04, //cc r1 0.1
+	0x48,
 	0x1f, //cc r2
-	0x94,
+	0xc4,
 	0x1f, //cc r3
-	0xeb,
+	0xf4,
 	0x1f, //cc g1
-	0xc9,
+	0xe1,
 	0x04, //cc g2
-	0x4c,
+	0x2b,
 	0x1f, //cc g3
-	0xeb,
+	0xf4,
 	0x1f, //cc b1
-	0xc9,
+	0xe1,
 	0x1f, //cc b2
-	0x94,
+	0xc4,
 	0x04, //cc b3
-	0xa3,
+	0x5b,
 };
 
 char MOVIE_EBOOK_1[] = {
@@ -3527,7 +3527,7 @@
 	0x01, //mdnie_en
 	0x00, //data_width mask 00 000
 	0x33, //scr_roi 1 scr algo_roi 1 algo 00 1 0 00 1 0
-	0x01, //sharpen cc gamma 00 0 0
+	0x03, //sharpen cc gamma 00 0 0
 };
 
 char MOVIE_EBOOK_2[] = {
@@ -3621,24 +3621,24 @@
 	0xa2, //curve23 a
 	0x00, //curve24 b
 	0xFF, //curve24 a
-	0x04, //cc r1 0.06
-	0x2b,
+	0x04, //cc r1 0.1
+	0x48,
 	0x1f, //cc r2
-	0xdc,
+	0xc4,
 	0x1f, //cc r3
-	0xf9,
+	0xf4,
 	0x1f, //cc g1
-	0xee,
+	0xe1,
 	0x04, //cc g2
-	0x19,
+	0x2b,
 	0x1f, //cc g3
-	0xf9,
+	0xf4,
 	0x1f, //cc b1
-	0xee,
+	0xe1,
 	0x1f, //cc b2
-	0xdc,
+	0xc4,
 	0x04, //cc b3
-	0x36,
+	0x5b,
 };
 
 char *blind_tune_value[ACCESSIBILITY_MAX][2] = {
diff -Nur a/drivers/video/msm/mdss/mdnie_lite_tuning_data_klimt.h b/drivers/video/msm/mdss/mdnie_lite_tuning_data_klimt.h
--- a/drivers/video/msm/mdss/mdnie_lite_tuning_data_klimt.h	2016-01-10 16:25:37.419141000 -0500
+++ b/drivers/video/msm/mdss/mdnie_lite_tuning_data_klimt.h	2015-12-01 05:57:13.000000000 -0500
@@ -23,6 +23,322 @@
 #define ADDRESS_SCR_WHITE_GREEN 0x7C
 #define ADDRESS_SCR_WHITE_BLUE  0x7E
 
+char GRAYSCALE_1[] = {
+	/* start */
+	0xEB,
+	0x01, /* mdnie_en */
+	0x00, /* data_width mask 00 0000 */
+	0x03, /* ascr_roi 1 ascr 00 1 0 */
+	0x02, /* algo_roi 1 algo lce_roi 1 lce 00 1 0 00 1 0 */
+	0x00, /* roi_ctrl 00 */
+	0x00, /* roi0_x_start 12 */
+	0x00,
+	0x00, /* roi0_x_end */
+	0x00,
+	0x00, /* roi0_y_start */
+	0x00,
+	0x00, /* roi0_y_end */
+	0x00,
+	0x00, /* roi1_x_strat */
+	0x00,
+	0x00, /* roi1_x_end */
+	0x00,
+	0x00, /* roi1_y_start */
+	0x00,
+	0x00, /* roi1_y_end */
+	0x00,
+};
+
+char GRAYSCALE_2[] = {
+	0xEC,
+	0x18, /* lce_on 0 lce_gain 0 0 00 0000 */
+	0x24, /* lce_color_gain 00 0000 */
+	0x10, /* lce_scene_change_on scene_trans 0 0000 */
+	0x14, /* lce_min_diff */
+	0xb3, /* lce_illum_gain */
+	0x01, /* lce_ref_offset 9 */
+	0x0e,
+	0x01, /* lce_ref_gain 9 */
+	0x00,
+	0x66, /* lce_block_size h v 0000 0000 */
+	0xfa, /* lce_bright_th */
+	0x2d, /* lce_bin_size_ratio */
+	0x03, /* lce_dark_th 000 */
+	0x96, /* lce_min_ref_offset */
+	0x00, /* nr sharp cs gamma 0000 */
+	0xff, /* nr_mask_th */
+	0x00, /* sharpen_weight 10 */
+	0x15,
+	0x00, /* sharpen_maxplus 11 */
+	0xa0,
+	0x00, /* sharpen_maxminus 11 */
+	0xa0,
+	0x01, /* cs_gain 10 */
+	0x00,
+	0x00, /* curve_1_b */
+	0x20, /* curve_1_a */
+	0x00, /* curve_2_b */
+	0x20, /* curve_2_a */
+	0x00, /* curve_3_b */
+	0x20, /* curve_3_a */
+	0x00, /* curve_4_b */
+	0x20, /* curve_4_a */
+	0x00, /* curve_5_b */
+	0x20, /* curve_5_a */
+	0x00, /* curve_6_b */
+	0x20, /* curve_6_a */
+	0x00, /* curve_7_b */
+	0x20, /* curve_7_a */
+	0x00, /* curve_8_b */
+	0x20, /* curve_8_a */
+	0x00, /* curve_9_b */
+	0x20, /* curve_9_a */
+	0x00, /* curve10_b */
+	0x20, /* curve10_a */
+	0x00, /* curve11_b */
+	0x20, /* curve11_a */
+	0x00, /* curve12_b */
+	0x20, /* curve12_a */
+	0x00, /* curve13_b */
+	0x20, /* curve13_a */
+	0x00, /* curve14_b */
+	0x20, /* curve14_a */
+	0x00, /* curve15_b */
+	0x20, /* curve15_a */
+	0x00, /* curve16_b */
+	0x20, /* curve16_a */
+	0x00, /* curve17_b */
+	0x20, /* curve17_a */
+	0x00, /* curve18_b */
+	0x20, /* curve18_a */
+	0x00, /* curve19_b */
+	0x20, /* curve19_a */
+	0x00, /* curve20_b */
+	0x20, /* curve20_a */
+	0x00, /* curve21_b */
+	0x20, /* curve21_a */
+	0x00, /* curve22_b */
+	0x20, /* curve22_a */
+	0x00, /* curve23_b */
+	0x20, /* curve23_a */
+	0x00, /* curve24_b */
+	0xff, /* curve24_a */
+	0x20, /* ascr_skin_on strength 0 00000 */
+	0x67, /* ascr_skin_cb */
+	0xa9, /* ascr_skin_cr */
+	0x17, /* ascr_dist_up */
+	0x29, /* ascr_dist_down */
+	0x19, /* ascr_dist_right */
+	0x27, /* ascr_dist_left */
+	0x00, /* ascr_div_up 20 */
+	0x59,
+	0x0b,
+	0x00, /* ascr_div_down */
+	0x31,
+	0xf4,
+	0x00, /* ascr_div_right */
+	0x51,
+	0xec,
+	0x00, /* ascr_div_left */
+	0x34,
+	0x83,
+	0xff, /* ascr_skin_Rr */
+	0x00, /* ascr_skin_Rg */
+	0x00, /* ascr_skin_Rb */
+	0xff, /* ascr_skin_Yr */
+	0xff, /* ascr_skin_Yg */
+	0x00, /* ascr_skin_Yb */
+	0xff, /* ascr_skin_Mr */
+	0x00, /* ascr_skin_Mg */
+	0xff, /* ascr_skin_Mb */
+	0xff, /* ascr_skin_Wr */
+	0xff, /* ascr_skin_Wg */
+	0xff, /* ascr_skin_Wb */
+	0xb3, /* ascr_Cr */
+	0x4c, /* ascr_Rr */
+	0xb3, /* ascr_Cg */
+	0x4c, /* ascr_Rg */
+	0xb3, /* ascr_Cb */
+	0x4c, /* ascr_Rb */
+	0x69, /* ascr_Mr */
+	0x96, /* ascr_Gr */
+	0x69, /* ascr_Mg */
+	0x96, /* ascr_Gg */
+	0x69, /* ascr_Mb */
+	0x96, /* ascr_Gb */
+	0xe2, /* ascr_Yr */
+	0x1d, /* ascr_Br */
+	0xe2, /* ascr_Yg */
+	0x1d, /* ascr_Bg */
+	0xe2, /* ascr_Yb */
+	0x1d, /* ascr_Bb */
+	0xff, /* ascr_Wr */
+	0x00, /* ascr_Kr */
+	0xff, /* ascr_Wg */
+	0x00, /* ascr_Kg */
+	0xff, /* ascr_Wb */
+	0x00, /* ascr_Kb */
+	/* end */
+};
+
+char GRAYSCALE_NEGATIVE_1[] = {
+	/* start */
+	0xEB,
+	0x01, /* mdnie_en */
+	0x00, /* data_width mask 00 0000 */
+	0x03, /* ascr_roi 1 ascr 00 1 0 */
+	0x02, /* algo_roi 1 algo lce_roi 1 lce 00 1 0 00 1 0 */
+	0x00, /* roi_ctrl 00 */
+	0x00, /* roi0_x_start 12 */
+	0x00,
+	0x00, /* roi0_x_end */
+	0x00,
+	0x00, /* roi0_y_start */
+	0x00,
+	0x00, /* roi0_y_end */
+	0x00,
+	0x00, /* roi1_x_strat */
+	0x00,
+	0x00, /* roi1_x_end */
+	0x00,
+	0x00, /* roi1_y_start */
+	0x00,
+	0x00, /* roi1_y_end */
+	0x00,
+};
+
+char GRAYSCALE_NEGATIVE_2[] = {
+	0xEC,
+	0x18, /* lce_on 0 lce_gain 0 0 00 0000 */
+	0x24, /* lce_color_gain 00 0000 */
+	0x10, /* lce_scene_change_on scene_trans 0 0000 */
+	0x14, /* lce_min_diff */
+	0xb3, /* lce_illum_gain */
+	0x01, /* lce_ref_offset 9 */
+	0x0e,
+	0x01, /* lce_ref_gain 9 */
+	0x00,
+	0x66, /* lce_block_size h v 0000 0000 */
+	0xfa, /* lce_bright_th */
+	0x2d, /* lce_bin_size_ratio */
+	0x03, /* lce_dark_th 000 */
+	0x96, /* lce_min_ref_offset */
+	0x00, /* nr sharp cs gamma 0000 */
+	0xff, /* nr_mask_th */
+	0x00, /* sharpen_weight 10 */
+	0x15,
+	0x00, /* sharpen_maxplus 11 */
+	0xa0,
+	0x00, /* sharpen_maxminus 11 */
+	0xa0,
+	0x01, /* cs_gain 10 */
+	0x00,
+	0x00, /* curve_1_b */
+	0x20, /* curve_1_a */
+	0x00, /* curve_2_b */
+	0x20, /* curve_2_a */
+	0x00, /* curve_3_b */
+	0x20, /* curve_3_a */
+	0x00, /* curve_4_b */
+	0x20, /* curve_4_a */
+	0x00, /* curve_5_b */
+	0x20, /* curve_5_a */
+	0x00, /* curve_6_b */
+	0x20, /* curve_6_a */
+	0x00, /* curve_7_b */
+	0x20, /* curve_7_a */
+	0x00, /* curve_8_b */
+	0x20, /* curve_8_a */
+	0x00, /* curve_9_b */
+	0x20, /* curve_9_a */
+	0x00, /* curve10_b */
+	0x20, /* curve10_a */
+	0x00, /* curve11_b */
+	0x20, /* curve11_a */
+	0x00, /* curve12_b */
+	0x20, /* curve12_a */
+	0x00, /* curve13_b */
+	0x20, /* curve13_a */
+	0x00, /* curve14_b */
+	0x20, /* curve14_a */
+	0x00, /* curve15_b */
+	0x20, /* curve15_a */
+	0x00, /* curve16_b */
+	0x20, /* curve16_a */
+	0x00, /* curve17_b */
+	0x20, /* curve17_a */
+	0x00, /* curve18_b */
+	0x20, /* curve18_a */
+	0x00, /* curve19_b */
+	0x20, /* curve19_a */
+	0x00, /* curve20_b */
+	0x20, /* curve20_a */
+	0x00, /* curve21_b */
+	0x20, /* curve21_a */
+	0x00, /* curve22_b */
+	0x20, /* curve22_a */
+	0x00, /* curve23_b */
+	0x20, /* curve23_a */
+	0x00, /* curve24_b */
+	0xff, /* curve24_a */
+	0x20, /* ascr_skin_on strength 0 00000 */
+	0x67, /* ascr_skin_cb */
+	0xa9, /* ascr_skin_cr */
+	0x17, /* ascr_dist_up */
+	0x29, /* ascr_dist_down */
+	0x19, /* ascr_dist_right */
+	0x27, /* ascr_dist_left */
+	0x00, /* ascr_div_up 20 */
+	0x59,
+	0x0b,
+	0x00, /* ascr_div_down */
+	0x31,
+	0xf4,
+	0x00, /* ascr_div_right */
+	0x51,
+	0xec,
+	0x00, /* ascr_div_left */
+	0x34,
+	0x83,
+	0xff, /* ascr_skin_Rr */
+	0x00, /* ascr_skin_Rg */
+	0x00, /* ascr_skin_Rb */
+	0xff, /* ascr_skin_Yr */
+	0xff, /* ascr_skin_Yg */
+	0x00, /* ascr_skin_Yb */
+	0xff, /* ascr_skin_Mr */
+	0x00, /* ascr_skin_Mg */
+	0xff, /* ascr_skin_Mb */
+	0xff, /* ascr_skin_Wr */
+	0xff, /* ascr_skin_Wg */
+	0xff, /* ascr_skin_Wb */
+	0x4c, /* ascr_Cr */
+	0xb3, /* ascr_Rr */
+	0x4c, /* ascr_Cg */
+	0xb3, /* ascr_Rg */
+	0x4c, /* ascr_Cb */
+	0xb3, /* ascr_Rb */
+	0x96, /* ascr_Mr */
+	0x69, /* ascr_Gr */
+	0x96, /* ascr_Mg */
+	0x69, /* ascr_Gg */
+	0x96, /* ascr_Mb */
+	0x69, /* ascr_Gb */
+	0x1d, /* ascr_Yr */
+	0xe2, /* ascr_Br */
+	0x1d, /* ascr_Yg */
+	0xe2, /* ascr_Bg */
+	0x1d, /* ascr_Yb */
+	0xe2, /* ascr_Bb */
+	0x00, /* ascr_Wr */
+	0xff, /* ascr_Kr */
+	0x00, /* ascr_Wg */
+	0xff, /* ascr_Kg */
+	0x00, /* ascr_Wb */
+	0xff, /* ascr_Kb */
+	/* end */
+};
+
 ////////////////// UI /// /////////////////////
 static char SCREEN_CURTAIN_1[] = {
 	/* start */
@@ -856,7 +1172,7 @@
 	0x2d, /* lce_bin_size_ratio */
 	0x03, /* lce_dark_th 000 */
 	0x96, /* lce_min_ref_offset */
-	0x03, /* nr sharp cs gamma 0000 */
+	0x00, /* nr sharp cs gamma 0000 */
 	0xff, /* nr_mask_th */
 	0x00, /* sharpen_weight 10 */
 	0x15,
@@ -865,65 +1181,65 @@
 	0x00, /* sharpen_maxminus 11 */
 	0xa0,
 	0x01, /* cs_gain 10 */
-	0x20,
+	0x00,
 	0x00, /* curve_1_b */
-	0x14, /* curve_1_a */
+	0x20, /* curve_1_a */
 	0x00, /* curve_2_b */
-	0x14, /* curve_2_a */
+	0x20, /* curve_2_a */
 	0x00, /* curve_3_b */
-	0x14, /* curve_3_a */
+	0x20, /* curve_3_a */
 	0x00, /* curve_4_b */
-	0x14, /* curve_4_a */
-	0x03, /* curve_5_b */
-	0x9a, /* curve_5_a */
-	0x03, /* curve_6_b */
-	0x9a, /* curve_6_a */
-	0x03, /* curve_7_b */
-	0x9a, /* curve_7_a */
-	0x03, /* curve_8_b */
-	0x9a, /* curve_8_a */
-	0x07, /* curve_9_b */
-	0x9e, /* curve_9_a */
-	0x07, /* curve10_b */
-	0x9e, /* curve10_a */
-	0x07, /* curve11_b */
-	0x9e, /* curve11_a */
-	0x07, /* curve12_b */
-	0x9e, /* curve12_a */
-	0x0a, /* curve13_b */
-	0xa0, /* curve13_a */
-	0x0a, /* curve14_b */
-	0xa0, /* curve14_a */
-	0x0a, /* curve15_b */
-	0xa0, /* curve15_a */
-	0x0a, /* curve16_b */
-	0xa0, /* curve16_a */
-	0x16, /* curve17_b */
-	0xa6, /* curve17_a */
-	0x16, /* curve18_b */
-	0xa6, /* curve18_a */
-	0x16, /* curve19_b */
-	0xa6, /* curve19_a */
-	0x16, /* curve20_b */
-	0xa6, /* curve20_a */
-	0x05, /* curve21_b */
-	0x21, /* curve21_a */
-	0x0b, /* curve22_b */
+	0x20, /* curve_4_a */
+	0x00, /* curve_5_b */
+	0x20, /* curve_5_a */
+	0x00, /* curve_6_b */
+	0x20, /* curve_6_a */
+	0x00, /* curve_7_b */
+	0x20, /* curve_7_a */
+	0x00, /* curve_8_b */
+	0x20, /* curve_8_a */
+	0x00, /* curve_9_b */
+	0x20, /* curve_9_a */
+	0x00, /* curve10_b */
+	0x20, /* curve10_a */
+	0x00, /* curve11_b */
+	0x20, /* curve11_a */
+	0x00, /* curve12_b */
+	0x20, /* curve12_a */
+	0x00, /* curve13_b */
+	0x20, /* curve13_a */
+	0x00, /* curve14_b */
+	0x20, /* curve14_a */
+	0x00, /* curve15_b */
+	0x20, /* curve15_a */
+	0x00, /* curve16_b */
+	0x20, /* curve16_a */
+	0x00, /* curve17_b */
+	0x20, /* curve17_a */
+	0x00, /* curve18_b */
+	0x20, /* curve18_a */
+	0x00, /* curve19_b */
+	0x20, /* curve19_a */
+	0x00, /* curve20_b */
+	0x20, /* curve20_a */
+	0x00, /* curve21_b */
+	0x20, /* curve21_a */
+	0x00, /* curve22_b */
 	0x20, /* curve22_a */
-	0x87, /* curve23_b */
-	0x0f, /* curve23_a */
+	0x00, /* curve23_b */
+	0x20, /* curve23_a */
 	0x00, /* curve24_b */
-	0xFF, /* curve24_a */
-	0x30, /* ascr_skin_on strength 0 00000 */
+	0xff, /* curve24_a */
+	0x20, /* ascr_skin_on strength 0 00000 */
 	0x67, /* ascr_skin_cb */
 	0xa9, /* ascr_skin_cr */
-	0x37, /* ascr_dist_up */
+	0x17, /* ascr_dist_up */
 	0x29, /* ascr_dist_down */
 	0x19, /* ascr_dist_right */
-	0x47, /* ascr_dist_left */
+	0x27, /* ascr_dist_left */
 	0x00, /* ascr_div_up 20 */
-	0x25,
-	0x3d,
+	0x59,
+	0x0b,
 	0x00, /* ascr_div_down */
 	0x31,
 	0xf4,
@@ -931,11 +1247,11 @@
 	0x51,
 	0xec,
 	0x00, /* ascr_div_left */
-	0x1c,
-	0xd8,
+	0x34,
+	0x83,
 	0xff, /* ascr_skin_Rr */
-	0x7c, /* ascr_skin_Rg */
-	0x88, /* ascr_skin_Rb */
+	0x00, /* ascr_skin_Rg */
+	0x00, /* ascr_skin_Rb */
 	0xff, /* ascr_skin_Yr */
 	0xff, /* ascr_skin_Yg */
 	0x00, /* ascr_skin_Yb */
@@ -943,7 +1259,7 @@
 	0x00, /* ascr_skin_Mg */
 	0xff, /* ascr_skin_Mb */
 	0xff, /* ascr_skin_Wr */
-	0xf4, /* ascr_skin_Wg */
+	0xff, /* ascr_skin_Wg */
 	0xff, /* ascr_skin_Wb */
 	0x00, /* ascr_Cr */
 	0xff, /* ascr_Rr */
@@ -7464,6 +7780,8 @@
 		{NEGATIVE_1, NEGATIVE_2},
 		{COLOR_BLIND_1, COLOR_BLIND_2},
 		{SCREEN_CURTAIN_1, SCREEN_CURTAIN_2},
+		{GRAYSCALE_1, GRAYSCALE_2},
+		{GRAYSCALE_NEGATIVE_1, GRAYSCALE_NEGATIVE_2}
 };
 
 char *mdnie_tune_value[MAX_mDNIe_MODE][MAX_BACKGROUND_MODE][MAX_OUTDOOR_MODE][2] = {
diff -Nur a/drivers/video/msm/mdss/mdnie_lite_tuning_data_klte_fhd_s6e3fa2.h b/drivers/video/msm/mdss/mdnie_lite_tuning_data_klte_fhd_s6e3fa2.h
--- a/drivers/video/msm/mdss/mdnie_lite_tuning_data_klte_fhd_s6e3fa2.h	2016-01-10 16:25:37.419141000 -0500
+++ b/drivers/video/msm/mdss/mdnie_lite_tuning_data_klte_fhd_s6e3fa2.h	2015-12-01 05:57:13.000000000 -0500
@@ -23,6 +23,326 @@
 #define ADDRESS_SCR_WHITE_GREEN 0x7C
 #define ADDRESS_SCR_WHITE_BLUE  0x7E
 
+char GRAYSCALE_1[] = {
+	//start
+	0xEB,
+	0x01, //mdnie_en
+	0x00, //data_width mask 00 0000
+	0x03, //ascr_roi 1 ascr 00 1 0
+	0x02, //algo_roi 1 algo lce_roi 1 lce 00 1 0 00 1 0
+	0x00, //roi_ctrl 00
+	0x00, //roi0_x_start 12
+	0x00,
+	0x00, //roi0_x_end
+	0x00,
+	0x00, //roi0_y_start
+	0x00,
+	0x00, //roi0_y_end
+	0x00,
+	0x00, //roi1_x_strat
+	0x00,
+	0x00, //roi1_x_end
+	0x00,
+	0x00, //roi1_y_start
+	0x00,
+	0x00, //roi1_y_end
+	0x00,
+
+};
+
+char GRAYSCALE_2[] = {
+	0xEC,
+	0x18, //lce_gain 00 0000
+	0x24, //lce_color_gain 00 0000
+	0x10, //lce_scene_change_on scene_trans 0 0000
+	0x14, //lce_min_diff
+	0xb3, //lce_illum_gain
+	0x01, //lce_ref_offset 9
+	0x0e,
+	0x01, //lce_ref_gain 9
+	0x00,
+	0x66, //lce_block_size h v 0000 0000
+	0xfa, //lce_bright_th
+	0x2d, //lce_bin_size_ratio
+	0x03, //lce_dark_th 000
+	0x96, //lce_min_ref_offset
+	0x00, //nr sharp cs gamma 0000
+	0xff, //nr_mask_th
+	0x00, //sharpen_weight 10
+	0x40,
+	0x00, //sharpen_maxplus 11
+	0xa0,
+	0x00, //sharpen_maxminus 11
+	0xa0,
+	0x01, //cs_gain 10
+	0x00,
+	0x00, //curve_1_b
+	0x20, //curve_1_a
+	0x00, //curve_2_b
+	0x20, //curve_2_a
+	0x00, //curve_3_b
+	0x20, //curve_3_a
+	0x00, //curve_4_b
+	0x20, //curve_4_a
+	0x02, //curve_5_b
+	0x1b, //curve_5_a
+	0x02, //curve_6_b
+	0x1b, //curve_6_a
+	0x02, //curve_7_b
+	0x1b, //curve_7_a
+	0x02, //curve_8_b
+	0x1b, //curve_8_a
+	0x09, //curve_9_b
+	0xa6, //curve_9_a
+	0x09, //curve10_b
+	0xa6, //curve10_a
+	0x09, //curve11_b
+	0xa6, //curve11_a
+	0x09, //curve12_b
+	0xa6, //curve12_a
+	0x00, //curve13_b
+	0x20, //curve13_a
+	0x00, //curve14_b
+	0x20, //curve14_a
+	0x00, //curve15_b
+	0x20, //curve15_a
+	0x00, //curve16_b
+	0x20, //curve16_a
+	0x00, //curve17_b
+	0x20, //curve17_a
+	0x00, //curve18_b
+	0x20, //curve18_a
+	0x00, //curve19_b
+	0x20, //curve19_a
+	0x00, //curve20_b
+	0x20, //curve20_a
+	0x00, //curve21_b
+	0x20, //curve21_a
+	0x00, //curve22_b
+	0x20, //curve22_a
+	0x00, //curve23_b
+	0x20, //curve23_a
+	0x00, //curve24_b
+	0xFF, //curve24_a
+	0x20, //ascr_skin_on strength 0 00000
+	0x67, //ascr_skin_cb
+	0xa9, //ascr_skin_cr
+	0x17, //ascr_dist_up
+	0x29, //ascr_dist_down
+	0x19, //ascr_dist_right
+	0x27, //ascr_dist_left
+	0x00, //ascr_div_up 20
+	0x59,
+	0x0b,
+	0x00, //ascr_div_down
+	0x31,
+	0xf4,
+	0x00, //ascr_div_right
+	0x51,
+	0xec,
+	0x00, //ascr_div_left
+	0x34,
+	0x83,
+	0xff, //ascr_skin_Rr
+	0x00, //ascr_skin_Rg
+	0x00, //ascr_skin_Rb
+	0xff, //ascr_skin_Yr
+	0xff, //ascr_skin_Yg
+	0x00, //ascr_skin_Yb
+	0xff, //ascr_skin_Mr
+	0x00, //ascr_skin_Mg
+	0xff, //ascr_skin_Mb
+	0xff, //ascr_skin_Wr
+	0xff, //ascr_skin_Wg
+	0xff, //ascr_skin_Wb
+	0xb3, //ascr_Cr
+	0x4c, //ascr_Rr
+	0xb3, //ascr_Cg
+	0x4c, //ascr_Rg
+	0xb3, //ascr_Cb
+	0x4c, //ascr_Rb
+	0x69, //ascr_Mr
+	0x96, //ascr_Gr
+	0x69, //ascr_Mg
+	0x96, //ascr_Gg
+	0x69, //ascr_Mb
+	0x96, //ascr_Gb
+	0xe2, //ascr_Yr
+	0x1d, //ascr_Br
+	0xe2, //ascr_Yg
+	0x1d, //ascr_Bg
+	0xe2, //ascr_Yb
+	0x1d, //ascr_Bb
+	0xff, //ascr_Wr
+	0x00, //ascr_Kr
+	0xff, //ascr_Wg
+	0x00, //ascr_Kg
+	0xff, //ascr_Wb
+	0x00, //ascr_Kb
+	//end
+
+};
+
+char GRAYSCALE_NEGATIVE_1[] = {
+	//start
+	0xEB,
+	0x01, //mdnie_en
+	0x00, //data_width mask 00 0000
+	0x03, //ascr_roi 1 ascr 00 1 0
+	0x02, //algo_roi 1 algo lce_roi 1 lce 00 1 0 00 1 0
+	0x00, //roi_ctrl 00
+	0x00, //roi0_x_start 12
+	0x00,
+	0x00, //roi0_x_end
+	0x00,
+	0x00, //roi0_y_start
+	0x00,
+	0x00, //roi0_y_end
+	0x00,
+	0x00, //roi1_x_strat
+	0x00,
+	0x00, //roi1_x_end
+	0x00,
+	0x00, //roi1_y_start
+	0x00,
+	0x00, //roi1_y_end
+	0x00,
+
+};
+
+char GRAYSCALE_NEGATIVE_2[] = {
+	0xEC,
+	0x18, //lce_gain 00 0000
+	0x24, //lce_color_gain 00 0000
+	0x10, //lce_scene_change_on scene_trans 0 0000
+	0x14, //lce_min_diff
+	0xb3, //lce_illum_gain
+	0x01, //lce_ref_offset 9
+	0x0e,
+	0x01, //lce_ref_gain 9
+	0x00,
+	0x66, //lce_block_size h v 0000 0000
+	0xfa, //lce_bright_th
+	0x2d, //lce_bin_size_ratio
+	0x03, //lce_dark_th 000
+	0x96, //lce_min_ref_offset
+	0x00, //nr sharp cs gamma 0000
+	0xff, //nr_mask_th
+	0x00, //sharpen_weight 10
+	0x40,
+	0x00, //sharpen_maxplus 11
+	0xa0,
+	0x00, //sharpen_maxminus 11
+	0xa0,
+	0x01, //cs_gain 10
+	0x00,
+	0x00, //curve_1_b
+	0x20, //curve_1_a
+	0x00, //curve_2_b
+	0x20, //curve_2_a
+	0x00, //curve_3_b
+	0x20, //curve_3_a
+	0x00, //curve_4_b
+	0x20, //curve_4_a
+	0x02, //curve_5_b
+	0x1b, //curve_5_a
+	0x02, //curve_6_b
+	0x1b, //curve_6_a
+	0x02, //curve_7_b
+	0x1b, //curve_7_a
+	0x02, //curve_8_b
+	0x1b, //curve_8_a
+	0x09, //curve_9_b
+	0xa6, //curve_9_a
+	0x09, //curve10_b
+	0xa6, //curve10_a
+	0x09, //curve11_b
+	0xa6, //curve11_a
+	0x09, //curve12_b
+	0xa6, //curve12_a
+	0x00, //curve13_b
+	0x20, //curve13_a
+	0x00, //curve14_b
+	0x20, //curve14_a
+	0x00, //curve15_b
+	0x20, //curve15_a
+	0x00, //curve16_b
+	0x20, //curve16_a
+	0x00, //curve17_b
+	0x20, //curve17_a
+	0x00, //curve18_b
+	0x20, //curve18_a
+	0x00, //curve19_b
+	0x20, //curve19_a
+	0x00, //curve20_b
+	0x20, //curve20_a
+	0x00, //curve21_b
+	0x20, //curve21_a
+	0x00, //curve22_b
+	0x20, //curve22_a
+	0x00, //curve23_b
+	0x20, //curve23_a
+	0x00, //curve24_b
+	0xFF, //curve24_a
+	0x20, //ascr_skin_on strength 0 00000
+	0x67, //ascr_skin_cb
+	0xa9, //ascr_skin_cr
+	0x17, //ascr_dist_up
+	0x29, //ascr_dist_down
+	0x19, //ascr_dist_right
+	0x27, //ascr_dist_left
+	0x00, //ascr_div_up 20
+	0x59,
+	0x0b,
+	0x00, //ascr_div_down
+	0x31,
+	0xf4,
+	0x00, //ascr_div_right
+	0x51,
+	0xec,
+	0x00, //ascr_div_left
+	0x34,
+	0x83,
+	0xff, //ascr_skin_Rr
+	0x00, //ascr_skin_Rg
+	0x00, //ascr_skin_Rb
+	0xff, //ascr_skin_Yr
+	0xff, //ascr_skin_Yg
+	0x00, //ascr_skin_Yb
+	0xff, //ascr_skin_Mr
+	0x00, //ascr_skin_Mg
+	0xff, //ascr_skin_Mb
+	0xff, //ascr_skin_Wr
+	0xff, //ascr_skin_Wg
+	0xff, //ascr_skin_Wb
+	0x4c, //ascr_Cr
+	0xb3, //ascr_Rr
+	0x4c, //ascr_Cg
+	0xb3, //ascr_Rg
+	0x4c, //ascr_Cb
+	0xb3, //ascr_Rb
+	0x96, //ascr_Mr
+	0x69, //ascr_Gr
+	0x96, //ascr_Mg
+	0x69, //ascr_Gg
+	0x96, //ascr_Mb
+	0x69, //ascr_Gb
+	0x1d, //ascr_Yr
+	0xe2, //ascr_Br
+	0x1d, //ascr_Yg
+	0xe2, //ascr_Bg
+	0x1d, //ascr_Yb
+	0xe2, //ascr_Bb
+	0x00, //ascr_Wr
+	0xff, //ascr_Kr
+	0x00, //ascr_Wg
+	0xff, //ascr_Kg
+	0x00, //ascr_Wb
+	0xff, //ascr_Kb
+	//end
+
+};
+
 ////////////////// UI /// /////////////////////
 static char SCREEN_CURTAIN_1[] = {
 	//start
@@ -7520,6 +7840,8 @@
 		{NEGATIVE_1, NEGATIVE_2},
 		{COLOR_BLIND_1, COLOR_BLIND_2},
 		{SCREEN_CURTAIN_1, SCREEN_CURTAIN_2},
+		{GRAYSCALE_1, GRAYSCALE_2},
+		{GRAYSCALE_NEGATIVE_1, GRAYSCALE_NEGATIVE_2}
 };
 
 char *mdnie_tune_value[MAX_mDNIe_MODE][MAX_BACKGROUND_MODE][MAX_OUTDOOR_MODE][2] = {
diff -Nur a/drivers/video/msm/mdss/mdnie_lite_tuning_data_klte_fhd_s6e3fa2_newux.h b/drivers/video/msm/mdss/mdnie_lite_tuning_data_klte_fhd_s6e3fa2_newux.h
--- a/drivers/video/msm/mdss/mdnie_lite_tuning_data_klte_fhd_s6e3fa2_newux.h	1969-12-31 19:00:00.000000000 -0500
+++ b/drivers/video/msm/mdss/mdnie_lite_tuning_data_klte_fhd_s6e3fa2_newux.h	2015-12-01 05:57:13.000000000 -0500
@@ -0,0 +1,7948 @@
+/* Copyright (c) 2009-2011, Code Aurora Forum. All rights reserved.
+ *
+ * This program is free software; you can redistribute it and/or modify
+ * it under the terms of the GNU General Public License version 2 and
+ * only version 2 as published by the Free Software Foundation.
+ *
+ * This program is distributed in the hope that it will be useful,
+ * but WITHOUT ANY WARRANTY; without even the implied warranty of
+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
+ * GNU General Public License for more details.
+ *
+ * You should have received a copy of the GNU General Public License
+ * along with this program; if not, write to the Free Software
+ * Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA
+ * 02110-1301, USA.
+ *
+ */
+
+#ifndef _MDNIE_LITE_TUNING_DATA_K_FHD_
+#define _MDNIE_LITE_TUNING_DATA_K_FHD_
+
+#define ADDRESS_SCR_WHITE_RED   0x7A
+#define ADDRESS_SCR_WHITE_GREEN 0x7C
+#define ADDRESS_SCR_WHITE_BLUE  0x7E
+
+char GRAYSCALE_1[] = {
+	//start
+	0xEB,
+	0x01, //mdnie_en
+	0x00, //data_width mask 00 0000
+	0x03, //ascr_roi 1 ascr 00 1 0
+	0x02, //algo_roi 1 algo lce_roi 1 lce 00 1 0 00 1 0
+	0x00, //roi_ctrl 00
+	0x00, //roi0_x_start 12
+	0x00,
+	0x00, //roi0_x_end
+	0x00,
+	0x00, //roi0_y_start
+	0x00,
+	0x00, //roi0_y_end
+	0x00,
+	0x00, //roi1_x_strat
+	0x00,
+	0x00, //roi1_x_end
+	0x00,
+	0x00, //roi1_y_start
+	0x00,
+	0x00, //roi1_y_end
+	0x00,
+
+};
+
+char GRAYSCALE_2[] = {
+	0xEC,
+	0x18, //lce_gain 00 0000
+	0x24, //lce_color_gain 00 0000
+	0x10, //lce_scene_change_on scene_trans 0 0000
+	0x14, //lce_min_diff
+	0xb3, //lce_illum_gain
+	0x01, //lce_ref_offset 9
+	0x0e,
+	0x01, //lce_ref_gain 9
+	0x00,
+	0x66, //lce_block_size h v 0000 0000
+	0xfa, //lce_bright_th
+	0x2d, //lce_bin_size_ratio
+	0x03, //lce_dark_th 000
+	0x96, //lce_min_ref_offset
+	0x00, //nr sharp cs gamma 0000
+	0xff, //nr_mask_th
+	0x00, //sharpen_weight 10
+	0x40,
+	0x00, //sharpen_maxplus 11
+	0xa0,
+	0x00, //sharpen_maxminus 11
+	0xa0,
+	0x01, //cs_gain 10
+	0x00,
+	0x00, //curve_1_b
+	0x20, //curve_1_a
+	0x00, //curve_2_b
+	0x20, //curve_2_a
+	0x00, //curve_3_b
+	0x20, //curve_3_a
+	0x00, //curve_4_b
+	0x20, //curve_4_a
+	0x02, //curve_5_b
+	0x1b, //curve_5_a
+	0x02, //curve_6_b
+	0x1b, //curve_6_a
+	0x02, //curve_7_b
+	0x1b, //curve_7_a
+	0x02, //curve_8_b
+	0x1b, //curve_8_a
+	0x09, //curve_9_b
+	0xa6, //curve_9_a
+	0x09, //curve10_b
+	0xa6, //curve10_a
+	0x09, //curve11_b
+	0xa6, //curve11_a
+	0x09, //curve12_b
+	0xa6, //curve12_a
+	0x00, //curve13_b
+	0x20, //curve13_a
+	0x00, //curve14_b
+	0x20, //curve14_a
+	0x00, //curve15_b
+	0x20, //curve15_a
+	0x00, //curve16_b
+	0x20, //curve16_a
+	0x00, //curve17_b
+	0x20, //curve17_a
+	0x00, //curve18_b
+	0x20, //curve18_a
+	0x00, //curve19_b
+	0x20, //curve19_a
+	0x00, //curve20_b
+	0x20, //curve20_a
+	0x00, //curve21_b
+	0x20, //curve21_a
+	0x00, //curve22_b
+	0x20, //curve22_a
+	0x00, //curve23_b
+	0x20, //curve23_a
+	0x00, //curve24_b
+	0xFF, //curve24_a
+	0x20, //ascr_skin_on strength 0 00000
+	0x67, //ascr_skin_cb
+	0xa9, //ascr_skin_cr
+	0x17, //ascr_dist_up
+	0x29, //ascr_dist_down
+	0x19, //ascr_dist_right
+	0x27, //ascr_dist_left
+	0x00, //ascr_div_up 20
+	0x59,
+	0x0b,
+	0x00, //ascr_div_down
+	0x31,
+	0xf4,
+	0x00, //ascr_div_right
+	0x51,
+	0xec,
+	0x00, //ascr_div_left
+	0x34,
+	0x83,
+	0xff, //ascr_skin_Rr
+	0x00, //ascr_skin_Rg
+	0x00, //ascr_skin_Rb
+	0xff, //ascr_skin_Yr
+	0xff, //ascr_skin_Yg
+	0x00, //ascr_skin_Yb
+	0xff, //ascr_skin_Mr
+	0x00, //ascr_skin_Mg
+	0xff, //ascr_skin_Mb
+	0xff, //ascr_skin_Wr
+	0xff, //ascr_skin_Wg
+	0xff, //ascr_skin_Wb
+	0xb3, //ascr_Cr
+	0x4c, //ascr_Rr
+	0xb3, //ascr_Cg
+	0x4c, //ascr_Rg
+	0xb3, //ascr_Cb
+	0x4c, //ascr_Rb
+	0x69, //ascr_Mr
+	0x96, //ascr_Gr
+	0x69, //ascr_Mg
+	0x96, //ascr_Gg
+	0x69, //ascr_Mb
+	0x96, //ascr_Gb
+	0xe2, //ascr_Yr
+	0x1d, //ascr_Br
+	0xe2, //ascr_Yg
+	0x1d, //ascr_Bg
+	0xe2, //ascr_Yb
+	0x1d, //ascr_Bb
+	0xff, //ascr_Wr
+	0x00, //ascr_Kr
+	0xff, //ascr_Wg
+	0x00, //ascr_Kg
+	0xff, //ascr_Wb
+	0x00, //ascr_Kb
+	//end
+
+};
+
+char GRAYSCALE_NEGATIVE_1[] = {
+	//start
+	0xEB,
+	0x01, //mdnie_en
+	0x00, //data_width mask 00 0000
+	0x03, //ascr_roi 1 ascr 00 1 0
+	0x02, //algo_roi 1 algo lce_roi 1 lce 00 1 0 00 1 0
+	0x00, //roi_ctrl 00
+	0x00, //roi0_x_start 12
+	0x00,
+	0x00, //roi0_x_end
+	0x00,
+	0x00, //roi0_y_start
+	0x00,
+	0x00, //roi0_y_end
+	0x00,
+	0x00, //roi1_x_strat
+	0x00,
+	0x00, //roi1_x_end
+	0x00,
+	0x00, //roi1_y_start
+	0x00,
+	0x00, //roi1_y_end
+	0x00,
+
+};
+
+char GRAYSCALE_NEGATIVE_2[] = {
+	0xEC,
+	0x18, //lce_gain 00 0000
+	0x24, //lce_color_gain 00 0000
+	0x10, //lce_scene_change_on scene_trans 0 0000
+	0x14, //lce_min_diff
+	0xb3, //lce_illum_gain
+	0x01, //lce_ref_offset 9
+	0x0e,
+	0x01, //lce_ref_gain 9
+	0x00,
+	0x66, //lce_block_size h v 0000 0000
+	0xfa, //lce_bright_th
+	0x2d, //lce_bin_size_ratio
+	0x03, //lce_dark_th 000
+	0x96, //lce_min_ref_offset
+	0x00, //nr sharp cs gamma 0000
+	0xff, //nr_mask_th
+	0x00, //sharpen_weight 10
+	0x40,
+	0x00, //sharpen_maxplus 11
+	0xa0,
+	0x00, //sharpen_maxminus 11
+	0xa0,
+	0x01, //cs_gain 10
+	0x00,
+	0x00, //curve_1_b
+	0x20, //curve_1_a
+	0x00, //curve_2_b
+	0x20, //curve_2_a
+	0x00, //curve_3_b
+	0x20, //curve_3_a
+	0x00, //curve_4_b
+	0x20, //curve_4_a
+	0x02, //curve_5_b
+	0x1b, //curve_5_a
+	0x02, //curve_6_b
+	0x1b, //curve_6_a
+	0x02, //curve_7_b
+	0x1b, //curve_7_a
+	0x02, //curve_8_b
+	0x1b, //curve_8_a
+	0x09, //curve_9_b
+	0xa6, //curve_9_a
+	0x09, //curve10_b
+	0xa6, //curve10_a
+	0x09, //curve11_b
+	0xa6, //curve11_a
+	0x09, //curve12_b
+	0xa6, //curve12_a
+	0x00, //curve13_b
+	0x20, //curve13_a
+	0x00, //curve14_b
+	0x20, //curve14_a
+	0x00, //curve15_b
+	0x20, //curve15_a
+	0x00, //curve16_b
+	0x20, //curve16_a
+	0x00, //curve17_b
+	0x20, //curve17_a
+	0x00, //curve18_b
+	0x20, //curve18_a
+	0x00, //curve19_b
+	0x20, //curve19_a
+	0x00, //curve20_b
+	0x20, //curve20_a
+	0x00, //curve21_b
+	0x20, //curve21_a
+	0x00, //curve22_b
+	0x20, //curve22_a
+	0x00, //curve23_b
+	0x20, //curve23_a
+	0x00, //curve24_b
+	0xFF, //curve24_a
+	0x20, //ascr_skin_on strength 0 00000
+	0x67, //ascr_skin_cb
+	0xa9, //ascr_skin_cr
+	0x17, //ascr_dist_up
+	0x29, //ascr_dist_down
+	0x19, //ascr_dist_right
+	0x27, //ascr_dist_left
+	0x00, //ascr_div_up 20
+	0x59,
+	0x0b,
+	0x00, //ascr_div_down
+	0x31,
+	0xf4,
+	0x00, //ascr_div_right
+	0x51,
+	0xec,
+	0x00, //ascr_div_left
+	0x34,
+	0x83,
+	0xff, //ascr_skin_Rr
+	0x00, //ascr_skin_Rg
+	0x00, //ascr_skin_Rb
+	0xff, //ascr_skin_Yr
+	0xff, //ascr_skin_Yg
+	0x00, //ascr_skin_Yb
+	0xff, //ascr_skin_Mr
+	0x00, //ascr_skin_Mg
+	0xff, //ascr_skin_Mb
+	0xff, //ascr_skin_Wr
+	0xff, //ascr_skin_Wg
+	0xff, //ascr_skin_Wb
+	0x4c, //ascr_Cr
+	0xb3, //ascr_Rr
+	0x4c, //ascr_Cg
+	0xb3, //ascr_Rg
+	0x4c, //ascr_Cb
+	0xb3, //ascr_Rb
+	0x96, //ascr_Mr
+	0x69, //ascr_Gr
+	0x96, //ascr_Mg
+	0x69, //ascr_Gg
+	0x96, //ascr_Mb
+	0x69, //ascr_Gb
+	0x1d, //ascr_Yr
+	0xe2, //ascr_Br
+	0x1d, //ascr_Yg
+	0xe2, //ascr_Bg
+	0x1d, //ascr_Yb
+	0xe2, //ascr_Bb
+	0x00, //ascr_Wr
+	0xff, //ascr_Kr
+	0x00, //ascr_Wg
+	0xff, //ascr_Kg
+	0x00, //ascr_Wb
+	0xff, //ascr_Kb
+	//end
+
+};
+
+////////////////// UI /// /////////////////////
+static char SCREEN_CURTAIN_1[] = {
+	//start
+	0xEB,
+	0x01, //mdnie_en
+	0x00, //data_width mask 00 0000
+	0x03, //ascr_roi 1 ascr 00 1 0
+	0x02, //algo_roi 1 algo lce_roi 1 lce 00 1 0 00 1 0
+	0x00, //roi_ctrl 00
+	0x00, //roi0_x_start 12
+	0x00,
+	0x00, //roi0_x_end
+	0x00,
+	0x00, //roi0_y_start
+	0x00,
+	0x00, //roi0_y_end
+	0x00,
+	0x00, //roi1_x_strat
+	0x00,
+	0x00, //roi1_x_end
+	0x00,
+	0x00, //roi1_y_start
+	0x00,
+	0x00, //roi1_y_end
+	0x00,
+};
+
+static char SCREEN_CURTAIN_2[] = {
+	0xEC,
+	0x18, //lce_gain 00 0000
+	0x24, //lce_color_gain 00 0000
+	0x10, //lce_scene_change_on scene_trans 0 0000
+	0x14, //lce_min_diff
+	0xb3, //lce_illum_gain
+	0x01, //lce_ref_offset 9
+	0x0e,
+	0x01, //lce_ref_gain 9
+	0x00,
+	0x66, //lce_block_size h v 0000 0000
+	0xfa, //lce_bright_th
+	0x2d, //lce_bin_size_ratio
+	0x03, //lce_dark_th 000
+	0x96, //lce_min_ref_offset
+	0x00, //nr sharp cs gamma 0000
+	0xff, //nr_mask_th
+	0x00, //sharpen_weight 10
+	0x00,
+	0x07, //sharpen_maxplus 11
+	0xff,
+	0x07, //sharpen_maxminus 11
+	0xff,
+	0x01, //cs_gain 10
+	0x00,
+	0x00, //curve_1_b
+	0x20, //curve_1_a
+	0x00, //curve_2_b
+	0x20, //curve_2_a
+	0x00, //curve_3_b
+	0x20, //curve_3_a
+	0x00, //curve_4_b
+	0x20, //curve_4_a
+	0x02, //curve_5_b
+	0x1b, //curve_5_a
+	0x02, //curve_6_b
+	0x1b, //curve_6_a
+	0x02, //curve_7_b
+	0x1b, //curve_7_a
+	0x02, //curve_8_b
+	0x1b, //curve_8_a
+	0x09, //curve_9_b
+	0xa6, //curve_9_a
+	0x09, //curve10_b
+	0xa6, //curve10_a
+	0x09, //curve11_b
+	0xa6, //curve11_a
+	0x09, //curve12_b
+	0xa6, //curve12_a
+	0x00, //curve13_b
+	0x20, //curve13_a
+	0x00, //curve14_b
+	0x20, //curve14_a
+	0x00, //curve15_b
+	0x20, //curve15_a
+	0x00, //curve16_b
+	0x20, //curve16_a
+	0x00, //curve17_b
+	0x20, //curve17_a
+	0x00, //curve18_b
+	0x20, //curve18_a
+	0x00, //curve19_b
+	0x20, //curve19_a
+	0x00, //curve20_b
+	0x20, //curve20_a
+	0x00, //curve21_b
+	0x20, //curve21_a
+	0x00, //curve22_b
+	0x20, //curve22_a
+	0x00, //curve23_b
+	0x20, //curve23_a
+	0x00, //curve24_b
+	0xFF, //curve24_a
+	0x20, //ascr_skin_on strength 0 00000
+	0x67, //ascr_skin_cb
+	0xa9, //ascr_skin_cr
+	0x0c, //ascr_dist_up
+	0x0c, //ascr_dist_down
+	0x0c, //ascr_dist_right
+	0x0c, //ascr_dist_left
+	0x00, //ascr_div_up 20
+	0xaa,
+	0xab,
+	0x00, //ascr_div_down
+	0xaa,
+	0xab,
+	0x00, //ascr_div_right
+	0xaa,
+	0xab,
+	0x00, //ascr_div_left
+	0xaa,
+	0xab,
+	0xff, //ascr_skin_Rr
+	0x00, //ascr_skin_Rg
+	0x00, //ascr_skin_Rb
+	0xff, //ascr_skin_Yr
+	0xff, //ascr_skin_Yg
+	0x00, //ascr_skin_Yb
+	0xff, //ascr_skin_Mr
+	0x00, //ascr_skin_Mg
+	0xff, //ascr_skin_Mb
+	0xff, //ascr_skin_Wr
+	0xff, //ascr_skin_Wg
+	0xff, //ascr_skin_Wb
+	0x00, //ascr_Cr
+	0x00, //ascr_Rr
+	0x00, //ascr_Cg
+	0x00, //ascr_Rg
+	0x00, //ascr_Cb
+	0x00, //ascr_Rb
+	0x00, //ascr_Mr
+	0x00, //ascr_Gr
+	0x00, //ascr_Mg
+	0x00, //ascr_Gg
+	0x00, //ascr_Mb
+	0x00, //ascr_Gb
+	0x00, //ascr_Yr
+	0x00, //ascr_Br
+	0x00, //ascr_Yg
+	0x00, //ascr_Bg
+	0x00, //ascr_Yb
+	0x00, //ascr_Bb
+	0x00, //ascr_Wr
+	0x00, //ascr_Kr
+	0x00, //ascr_Wg
+	0x00, //ascr_Kg
+	0x00, //ascr_Wb
+	0x00, //ascr_Kb
+	//end
+};
+
+static char STANDARD_UI_1[] = {
+	//start
+	0xEB,
+	0x01, //mdnie_en
+	0x00, //data_width mask 00 0000
+	0x03, //ascr_roi 1 ascr 00 1 0
+	0x32, //algo_roi 1 algo lce_roi 1 lce 00 1 0 00 1 0
+	0x00, //roi_ctrl 00
+	0x00, //roi0_x_start 12
+	0x00,
+	0x00, //roi0_x_end
+	0x00,
+	0x00, //roi0_y_start
+	0x00,
+	0x00, //roi0_y_end
+	0x00,
+	0x00, //roi1_x_strat
+	0x00,
+	0x00, //roi1_x_end
+	0x00,
+	0x00, //roi1_y_start
+	0x00,
+	0x00, //roi1_y_end
+	0x00,
+};
+
+static char STANDARD_UI_2[] = {
+	0xEC,
+	0x18, //lce_gain 00 0000
+	0x24, //lce_color_gain 00 0000
+	0x10, //lce_scene_change_on scene_trans 0 0000
+	0x14, //lce_min_diff
+	0xb3, //lce_illum_gain
+	0x01, //lce_ref_offset 9
+	0x0e,
+	0x01, //lce_ref_gain 9
+	0x00,
+	0x66, //lce_block_size h v 0000 0000
+	0xfa, //lce_bright_th
+	0x2d, //lce_bin_size_ratio
+	0x03, //lce_dark_th 000
+	0x96, //lce_min_ref_offset
+	0x01, //nr sharp cs gamma 0000
+	0xff, //nr_mask_th
+	0x00, //sharpen_weight 10
+	0x40,
+	0x00, //sharpen_maxplus 11
+	0xa0,
+	0x00, //sharpen_maxminus 11
+	0xa0,
+	0x01, //cs_gain 10
+	0x00,
+	0x00, //curve_1_b
+	0x20, //curve_1_a
+	0x00, //curve_2_b
+	0x20, //curve_2_a
+	0x00, //curve_3_b
+	0x20, //curve_3_a
+	0x00, //curve_4_b
+	0x20, //curve_4_a
+	0x02, //curve_5_b
+	0x1b, //curve_5_a
+	0x02, //curve_6_b
+	0x1b, //curve_6_a
+	0x02, //curve_7_b
+	0x1b, //curve_7_a
+	0x02, //curve_8_b
+	0x1b, //curve_8_a
+	0x09, //curve_9_b
+	0xa6, //curve_9_a
+	0x09, //curve10_b
+	0xa6, //curve10_a
+	0x09, //curve11_b
+	0xa6, //curve11_a
+	0x09, //curve12_b
+	0xa6, //curve12_a
+	0x00, //curve13_b
+	0x20, //curve13_a
+	0x00, //curve14_b
+	0x20, //curve14_a
+	0x00, //curve15_b
+	0x20, //curve15_a
+	0x00, //curve16_b
+	0x20, //curve16_a
+	0x00, //curve17_b
+	0x20, //curve17_a
+	0x00, //curve18_b
+	0x20, //curve18_a
+	0x00, //curve19_b
+	0x20, //curve19_a
+	0x00, //curve20_b
+	0x20, //curve20_a
+	0x00, //curve21_b
+	0x20, //curve21_a
+	0x00, //curve22_b
+	0x20, //curve22_a
+	0x00, //curve23_b
+	0x20, //curve23_a
+	0x00, //curve24_b
+	0xFF, //curve24_a
+	0x20, //ascr_skin_on strength 0 00000
+	0x67, //ascr_skin_cb
+	0xa9, //ascr_skin_cr
+	0x17, //ascr_dist_up
+	0x29, //ascr_dist_down
+	0x19, //ascr_dist_right
+	0x27, //ascr_dist_left
+	0x00, //ascr_div_up 20
+	0x59,
+	0x0b,
+	0x00, //ascr_div_down
+	0x31,
+	0xf4,
+	0x00, //ascr_div_right
+	0x51,
+	0xec,
+	0x00, //ascr_div_left
+	0x34,
+	0x83,
+	0xff, //ascr_skin_Rr
+	0x00, //ascr_skin_Rg
+	0x00, //ascr_skin_Rb
+	0xff, //ascr_skin_Yr
+	0xff, //ascr_skin_Yg
+	0x00, //ascr_skin_Yb
+	0xff, //ascr_skin_Mr
+	0x00, //ascr_skin_Mg
+	0xff, //ascr_skin_Mb
+	0xff, //ascr_skin_Wr
+	0xff, //ascr_skin_Wg
+	0xff, //ascr_skin_Wb
+	0x00, //ascr_Cr
+	0xff, //ascr_Rr
+	0xff, //ascr_Cg
+	0x16, //ascr_Rg
+	0xe5, //ascr_Cb
+	0x0e, //ascr_Rb
+	0xff, //ascr_Mr
+	0x00, //ascr_Gr
+	0x14, //ascr_Mg
+	0xff, //ascr_Gg
+	0xd9, //ascr_Mb
+	0x04, //ascr_Gb
+	0xfc, //ascr_Yr
+	0x26, //ascr_Br
+	0xff, //ascr_Yg
+	0x1b, //ascr_Bg
+	0x23, //ascr_Yb
+	0xff, //ascr_Bb
+	0xff, //ascr_Wr
+	0x00, //ascr_Kr
+	0xf8, //ascr_Wg
+	0x00, //ascr_Kg
+	0xef, //ascr_Wb
+	0x00, //ascr_Kb
+	//end
+};
+
+static char NATURAL_UI_1[] = {
+	//start
+	0xEB,
+	0x01, //mdnie_en
+	0x00, //data_width mask 00 0000
+	0x03, //ascr_roi 1 ascr 00 1 0
+	0x32, //algo_roi 1 algo lce_roi 1 lce 00 1 0 00 1 0
+	0x00, //roi_ctrl 00
+	0x00, //roi0_x_start 12
+	0x00,
+	0x00, //roi0_x_end
+	0x00,
+	0x00, //roi0_y_start
+	0x00,
+	0x00, //roi0_y_end
+	0x00,
+	0x00, //roi1_x_strat
+	0x00,
+	0x00, //roi1_x_end
+	0x00,
+	0x00, //roi1_y_start
+	0x00,
+	0x00, //roi1_y_end
+	0x00,
+};
+
+static char NATURAL_UI_2[] = {
+	0xEC,
+	0x18, //lce_gain 00 0000
+	0x24, //lce_color_gain 00 0000
+	0x10, //lce_scene_change_on scene_trans 0 0000
+	0x14, //lce_min_diff
+	0xb3, //lce_illum_gain
+	0x01, //lce_ref_offset 9
+	0x0e,
+	0x01, //lce_ref_gain 9
+	0x00,
+	0x66, //lce_block_size h v 0000 0000
+	0xfa, //lce_bright_th
+	0x2d, //lce_bin_size_ratio
+	0x03, //lce_dark_th 000
+	0x96, //lce_min_ref_offset
+	0x03, //nr sharp cs gamma 0000
+	0xff, //nr_mask_th
+	0x00, //sharpen_weight 10
+	0x40,
+	0x00, //sharpen_maxplus 11
+	0xa0,
+	0x00, //sharpen_maxminus 11
+	0xa0,
+	0x01, //cs_gain 10
+	0x20,
+	0x00, //curve_1_b
+	0x20, //curve_1_a
+	0x00, //curve_2_b
+	0x20, //curve_2_a
+	0x00, //curve_3_b
+	0x20, //curve_3_a
+	0x00, //curve_4_b
+	0x20, //curve_4_a
+	0x02, //curve_5_b
+	0x1b, //curve_5_a
+	0x02, //curve_6_b
+	0x1b, //curve_6_a
+	0x02, //curve_7_b
+	0x1b, //curve_7_a
+	0x02, //curve_8_b
+	0x1b, //curve_8_a
+	0x09, //curve_9_b
+	0xa6, //curve_9_a
+	0x09, //curve10_b
+	0xa6, //curve10_a
+	0x09, //curve11_b
+	0xa6, //curve11_a
+	0x09, //curve12_b
+	0xa6, //curve12_a
+	0x00, //curve13_b
+	0x20, //curve13_a
+	0x00, //curve14_b
+	0x20, //curve14_a
+	0x00, //curve15_b
+	0x20, //curve15_a
+	0x00, //curve16_b
+	0x20, //curve16_a
+	0x00, //curve17_b
+	0x20, //curve17_a
+	0x00, //curve18_b
+	0x20, //curve18_a
+	0x00, //curve19_b
+	0x20, //curve19_a
+	0x00, //curve20_b
+	0x20, //curve20_a
+	0x00, //curve21_b
+	0x20, //curve21_a
+	0x00, //curve22_b
+	0x20, //curve22_a
+	0x00, //curve23_b
+	0x20, //curve23_a
+	0x00, //curve24_b
+	0xFF, //curve24_a
+	0x20, //ascr_skin_on strength 0 00000
+	0x67, //ascr_skin_cb
+	0xa9, //ascr_skin_cr
+	0x17, //ascr_dist_up
+	0x29, //ascr_dist_down
+	0x19, //ascr_dist_right
+	0x27, //ascr_dist_left
+	0x00, //ascr_div_up 20
+	0x59,
+	0x0b,
+	0x00, //ascr_div_down
+	0x31,
+	0xf4,
+	0x00, //ascr_div_right
+	0x51,
+	0xec,
+	0x00, //ascr_div_left
+	0x34,
+	0x83,
+	0xff, //ascr_skin_Rr
+	0x00, //ascr_skin_Rg
+	0x00, //ascr_skin_Rb
+	0xff, //ascr_skin_Yr
+	0xff, //ascr_skin_Yg
+	0x00, //ascr_skin_Yb
+	0xff, //ascr_skin_Mr
+	0x00, //ascr_skin_Mg
+	0xff, //ascr_skin_Mb
+	0xff, //ascr_skin_Wr
+	0xff, //ascr_skin_Wg
+	0xff, //ascr_skin_Wb
+	0x7a, //ascr_Cr
+	0xff, //ascr_Rr
+	0xff, //ascr_Cg
+	0x2b, //ascr_Rg
+	0xf1, //ascr_Cb
+	0x2d, //ascr_Rb
+	0xff, //ascr_Mr
+	0x68, //ascr_Gr
+	0x15, //ascr_Mg
+	0xff, //ascr_Gg
+	0xfa, //ascr_Mb
+	0x31, //ascr_Gb
+	0xf8, //ascr_Yr
+	0x34, //ascr_Br
+	0xff, //ascr_Yg
+	0x20, //ascr_Bg
+	0x4b, //ascr_Yb
+	0xff, //ascr_Bb
+	0xff, //ascr_Wr
+	0x00, //ascr_Kr
+	0xf8, //ascr_Wg
+	0x00, //ascr_Kg
+	0xef, //ascr_Wb
+	0x00, //ascr_Kb
+	//end
+};
+
+static char DYNAMIC_UI_1[] = {
+	//start
+	0xEB,
+	0x01, //mdnie_en
+	0x00, //data_width mask 00 0000
+	0x03, //ascr_roi 1 ascr 00 1 0
+	0x32, //algo_roi 1 algo lce_roi 1 lce 00 1 0 00 1 0
+	0x00, //roi_ctrl 00
+	0x00, //roi0_x_start 12
+	0x00,
+	0x00, //roi0_x_end
+	0x00,
+	0x00, //roi0_y_start
+	0x00,
+	0x00, //roi0_y_end
+	0x00,
+	0x00, //roi1_x_strat
+	0x00,
+	0x00, //roi1_x_end
+	0x00,
+	0x00, //roi1_y_start
+	0x00,
+	0x00, //roi1_y_end
+	0x00,
+};
+
+static char DYNAMIC_UI_2[] = {
+	0xEC,
+	0x18, //lce_gain 00 0000
+	0x24, //lce_color_gain 00 0000
+	0x10, //lce_scene_change_on scene_trans 0 0000
+	0x14, //lce_min_diff
+	0xb3, //lce_illum_gain
+	0x01, //lce_ref_offset 9
+	0x0e,
+	0x01, //lce_ref_gain 9
+	0x00,
+	0x66, //lce_block_size h v 0000 0000
+	0xfa, //lce_bright_th
+	0x2d, //lce_bin_size_ratio
+	0x03, //lce_dark_th 000
+	0x96, //lce_min_ref_offset
+	0x03, //nr sharp cs gamma 0000
+	0xff, //nr_mask_th
+	0x00, //sharpen_weight 10
+	0x50,
+	0x00, //sharpen_maxplus 11
+	0xa0,
+	0x00, //sharpen_maxminus 11
+	0xa0,
+	0x01, //cs_gain 10
+	0x20,
+	0x00, //curve_1_b
+	0x0f, //curve_1_a
+	0x00, //curve_2_b
+	0x0f, //curve_2_a
+	0x00, //curve_3_b
+	0x0f, //curve_3_a
+	0x00, //curve_4_b
+	0x0f, //curve_4_a
+	0x09, //curve_5_b
+	0xa2, //curve_5_a
+	0x09, //curve_6_b
+	0xa2, //curve_6_a
+	0x09, //curve_7_b
+	0xa2, //curve_7_a
+	0x09, //curve_8_b
+	0xa2, //curve_8_a
+	0x09, //curve_9_b
+	0xa2, //curve_9_a
+	0x09, //curve10_b
+	0xa2, //curve10_a
+	0x0a, //curve11_b
+	0xa2, //curve11_a
+	0x0a, //curve12_b
+	0xa2, //curve12_a
+	0x0a, //curve13_b
+	0xa2, //curve13_a
+	0x0a, //curve14_b
+	0xa2, //curve14_a
+	0x0a, //curve15_b
+	0xa2, //curve15_a
+	0x0a, //curve16_b
+	0xa2, //curve16_a
+	0x0a, //curve17_b
+	0xa2, //curve17_a
+	0x0a, //curve18_b
+	0xa2, //curve18_a
+	0x0f, //curve19_b
+	0xa4, //curve19_a
+	0x0f, //curve20_b
+	0xa4, //curve20_a
+	0x0f, //curve21_b
+	0xa4, //curve21_a
+	0x23, //curve22_b
+	0x1c, //curve22_a
+	0x48, //curve23_b
+	0x17, //curve23_a
+	0x00, //curve24_b
+	0xFF, //curve24_a
+	0x20, //ascr_skin_on strength 0 00000
+	0x67, //ascr_skin_cb
+	0xa9, //ascr_skin_cr
+	0x17, //ascr_dist_up
+	0x29, //ascr_dist_down
+	0x19, //ascr_dist_right
+	0x27, //ascr_dist_left
+	0x00, //ascr_div_up 20
+	0x59,
+	0x0b,
+	0x00, //ascr_div_down
+	0x31,
+	0xf4,
+	0x00, //ascr_div_right
+	0x51,
+	0xec,
+	0x00, //ascr_div_left
+	0x34,
+	0x83,
+	0xff, //ascr_skin_Rr
+	0x00, //ascr_skin_Rg
+	0x00, //ascr_skin_Rb
+	0xff, //ascr_skin_Yr
+	0xff, //ascr_skin_Yg
+	0x00, //ascr_skin_Yb
+	0xff, //ascr_skin_Mr
+	0x00, //ascr_skin_Mg
+	0xff, //ascr_skin_Mb
+	0xff, //ascr_skin_Wr
+	0xff, //ascr_skin_Wg
+	0xff, //ascr_skin_Wb
+	0x00, //ascr_Cr
+	0xff, //ascr_Rr
+	0xff, //ascr_Cg
+	0x00, //ascr_Rg
+	0xff, //ascr_Cb
+	0x00, //ascr_Rb
+	0xff, //ascr_Mr
+	0x00, //ascr_Gr
+	0x00, //ascr_Mg
+	0xff, //ascr_Gg
+	0xff, //ascr_Mb
+	0x00, //ascr_Gb
+	0xff, //ascr_Yr
+	0x00, //ascr_Br
+	0xff, //ascr_Yg
+	0x00, //ascr_Bg
+	0x00, //ascr_Yb
+	0xff, //ascr_Bb
+	0xff, //ascr_Wr
+	0x00, //ascr_Kr
+	0xff, //ascr_Wg
+	0x00, //ascr_Kg
+	0xff, //ascr_Wb
+	0x00, //ascr_Kb
+	//end
+
+};
+
+static char MOVIE_UI_1[] = {
+	//start
+	0xEB,
+	0x01, //mdnie_en
+	0x00, //data_width mask 00 0000
+	0x03, //ascr_roi 1 ascr 00 1 0
+	0x32, //algo_roi 1 algo lce_roi 1 lce 00 1 0 00 1 0
+	0x00, //roi_ctrl 00
+	0x00, //roi0_x_start 12
+	0x00,
+	0x00, //roi0_x_end
+	0x00,
+	0x00, //roi0_y_start
+	0x00,
+	0x00, //roi0_y_end
+	0x00,
+	0x00, //roi1_x_strat
+	0x00,
+	0x00, //roi1_x_end
+	0x00,
+	0x00, //roi1_y_start
+	0x00,
+	0x00, //roi1_y_end
+	0x00,
+};
+
+static char MOVIE_UI_2[] = {
+	0xEC,
+	0x18, //lce_gain 00 0000
+	0x24, //lce_color_gain 00 0000
+	0x10, //lce_scene_change_on scene_trans 0 0000
+	0x14, //lce_min_diff
+	0xb3, //lce_illum_gain
+	0x01, //lce_ref_offset 9
+	0x0e,
+	0x01, //lce_ref_gain 9
+	0x00,
+	0x66, //lce_block_size h v 0000 0000
+	0xfa, //lce_bright_th
+	0x2d, //lce_bin_size_ratio
+	0x03, //lce_dark_th 000
+	0x96, //lce_min_ref_offset
+	0x03, //nr sharp cs gamma 0000
+	0xff, //nr_mask_th
+	0x00, //sharpen_weight 10
+	0x40,
+	0x00, //sharpen_maxplus 11
+	0xa0,
+	0x00, //sharpen_maxminus 11
+	0xa0,
+	0x01, //cs_gain 10
+	0x20,
+	0x00, //curve_1_b
+	0x20, //curve_1_a
+	0x00, //curve_2_b
+	0x20, //curve_2_a
+	0x00, //curve_3_b
+	0x20, //curve_3_a
+	0x00, //curve_4_b
+	0x20, //curve_4_a
+	0x02, //curve_5_b
+	0x1b, //curve_5_a
+	0x02, //curve_6_b
+	0x1b, //curve_6_a
+	0x02, //curve_7_b
+	0x1b, //curve_7_a
+	0x02, //curve_8_b
+	0x1b, //curve_8_a
+	0x09, //curve_9_b
+	0xa6, //curve_9_a
+	0x09, //curve10_b
+	0xa6, //curve10_a
+	0x09, //curve11_b
+	0xa6, //curve11_a
+	0x09, //curve12_b
+	0xa6, //curve12_a
+	0x00, //curve13_b
+	0x20, //curve13_a
+	0x00, //curve14_b
+	0x20, //curve14_a
+	0x00, //curve15_b
+	0x20, //curve15_a
+	0x00, //curve16_b
+	0x20, //curve16_a
+	0x00, //curve17_b
+	0x20, //curve17_a
+	0x00, //curve18_b
+	0x20, //curve18_a
+	0x00, //curve19_b
+	0x20, //curve19_a
+	0x00, //curve20_b
+	0x20, //curve20_a
+	0x00, //curve21_b
+	0x20, //curve21_a
+	0x00, //curve22_b
+	0x20, //curve22_a
+	0x00, //curve23_b
+	0x20, //curve23_a
+	0x00, //curve24_b
+	0xFF, //curve24_a
+	0x20, //ascr_skin_on strength 0 00000
+	0x67, //ascr_skin_cb
+	0xa9, //ascr_skin_cr
+	0x17, //ascr_dist_up
+	0x29, //ascr_dist_down
+	0x19, //ascr_dist_right
+	0x27, //ascr_dist_left
+	0x00, //ascr_div_up 20
+	0x59,
+	0x0b,
+	0x00, //ascr_div_down
+	0x31,
+	0xf4,
+	0x00, //ascr_div_right
+	0x51,
+	0xec,
+	0x00, //ascr_div_left
+	0x34,
+	0x83,
+	0xff, //ascr_skin_Rr
+	0x00, //ascr_skin_Rg
+	0x00, //ascr_skin_Rb
+	0xff, //ascr_skin_Yr
+	0xff, //ascr_skin_Yg
+	0x00, //ascr_skin_Yb
+	0xff, //ascr_skin_Mr
+	0x00, //ascr_skin_Mg
+	0xff, //ascr_skin_Mb
+	0xff, //ascr_skin_Wr
+	0xff, //ascr_skin_Wg
+	0xff, //ascr_skin_Wb
+	0x7a, //ascr_Cr
+	0xff, //ascr_Rr
+	0xff, //ascr_Cg
+	0x2b, //ascr_Rg
+	0xf1, //ascr_Cb
+	0x2d, //ascr_Rb
+	0xff, //ascr_Mr
+	0x68, //ascr_Gr
+	0x15, //ascr_Mg
+	0xff, //ascr_Gg
+	0xfa, //ascr_Mb
+	0x31, //ascr_Gb
+	0xf8, //ascr_Yr
+	0x34, //ascr_Br
+	0xff, //ascr_Yg
+	0x20, //ascr_Bg
+	0x4b, //ascr_Yb
+	0xff, //ascr_Bb
+	0xff, //ascr_Wr
+	0x00, //ascr_Kr
+	0xf8, //ascr_Wg
+	0x00, //ascr_Kg
+	0xef, //ascr_Wb
+	0x00, //ascr_Kb
+	//end
+
+};
+
+char AUTO_UI_1[] = {
+	//start
+	0xEB,
+	0x01, //mdnie_en
+	0x00, //data_width mask 00 0000
+	0x03, //ascr_roi 1 ascr 00 1 0
+	0x32, //algo_roi 1 algo lce_roi 1 lce 00 1 0 00 1 0
+	0x00, //roi_ctrl 00
+	0x00, //roi0_x_start 12
+	0x00,
+	0x00, //roi0_x_end
+	0x00,
+	0x00, //roi0_y_start
+	0x00,
+	0x00, //roi0_y_end
+	0x00,
+	0x00, //roi1_x_strat
+	0x00,
+	0x00, //roi1_x_end
+	0x00,
+	0x00, //roi1_y_start
+	0x00,
+	0x00, //roi1_y_end
+	0x00,
+};
+
+char AUTO_UI_2[] = {
+	0xEC,
+	0x18, //lce_gain 00 0000
+	0x24, //lce_color_gain 00 0000
+	0x10, //lce_scene_change_on scene_trans 0 0000
+	0x14, //lce_min_diff
+	0xb3, //lce_illum_gain
+	0x01, //lce_ref_offset 9
+	0x0e,
+	0x01, //lce_ref_gain 9
+	0x00,
+	0x66, //lce_block_size h v 0000 0000
+	0xfa, //lce_bright_th
+	0x2d, //lce_bin_size_ratio
+	0x03, //lce_dark_th 000
+	0x96, //lce_min_ref_offset
+	0x01, //nr sharp cs gamma 0000
+	0xff, //nr_mask_th
+	0x00, //sharpen_weight 10
+	0x40,
+	0x00, //sharpen_maxplus 11
+	0xa0,
+	0x00, //sharpen_maxminus 11
+	0xa0,
+	0x01, //cs_gain 10
+	0x00,
+	0x00, //curve_1_b
+	0x20, //curve_1_a
+	0x00, //curve_2_b
+	0x20, //curve_2_a
+	0x00, //curve_3_b
+	0x20, //curve_3_a
+	0x00, //curve_4_b
+	0x20, //curve_4_a
+	0x02, //curve_5_b
+	0x1b, //curve_5_a
+	0x02, //curve_6_b
+	0x1b, //curve_6_a
+	0x02, //curve_7_b
+	0x1b, //curve_7_a
+	0x02, //curve_8_b
+	0x1b, //curve_8_a
+	0x09, //curve_9_b
+	0xa6, //curve_9_a
+	0x09, //curve10_b
+	0xa6, //curve10_a
+	0x09, //curve11_b
+	0xa6, //curve11_a
+	0x09, //curve12_b
+	0xa6, //curve12_a
+	0x00, //curve13_b
+	0x20, //curve13_a
+	0x00, //curve14_b
+	0x20, //curve14_a
+	0x00, //curve15_b
+	0x20, //curve15_a
+	0x00, //curve16_b
+	0x20, //curve16_a
+	0x00, //curve17_b
+	0x20, //curve17_a
+	0x00, //curve18_b
+	0x20, //curve18_a
+	0x00, //curve19_b
+	0x20, //curve19_a
+	0x00, //curve20_b
+	0x20, //curve20_a
+	0x00, //curve21_b
+	0x20, //curve21_a
+	0x00, //curve22_b
+	0x20, //curve22_a
+	0x00, //curve23_b
+	0x20, //curve23_a
+	0x00, //curve24_b
+	0xFF, //curve24_a
+	0x20, //ascr_skin_on strength 0 00000
+	0x67, //ascr_skin_cb
+	0xa9, //ascr_skin_cr
+	0x17, //ascr_dist_up
+	0x29, //ascr_dist_down
+	0x19, //ascr_dist_right
+	0x27, //ascr_dist_left
+	0x00, //ascr_div_up 20
+	0x59,
+	0x0b,
+	0x00, //ascr_div_down
+	0x31,
+	0xf4,
+	0x00, //ascr_div_right
+	0x51,
+	0xec,
+	0x00, //ascr_div_left
+	0x34,
+	0x83,
+	0xff, //ascr_skin_Rr
+	0x00, //ascr_skin_Rg
+	0x00, //ascr_skin_Rb
+	0xff, //ascr_skin_Yr
+	0xff, //ascr_skin_Yg
+	0x00, //ascr_skin_Yb
+	0xff, //ascr_skin_Mr
+	0x00, //ascr_skin_Mg
+	0xff, //ascr_skin_Mb
+	0xff, //ascr_skin_Wr
+	0xff, //ascr_skin_Wg
+	0xff, //ascr_skin_Wb
+	0x00, //ascr_Cr
+	0xff, //ascr_Rr
+	0xff, //ascr_Cg
+	0x00, //ascr_Rg
+	0xff, //ascr_Cb
+	0x00, //ascr_Rb
+	0xff, //ascr_Mr
+	0x00, //ascr_Gr
+	0x00, //ascr_Mg
+	0xff, //ascr_Gg
+	0xff, //ascr_Mb
+	0x00, //ascr_Gb
+	0xff, //ascr_Yr
+	0x00, //ascr_Br
+	0xff, //ascr_Yg
+	0x00, //ascr_Bg
+	0x00, //ascr_Yb
+	0xff, //ascr_Bb
+	0xff, //ascr_Wr
+	0x00, //ascr_Kr
+	0xff, //ascr_Wg
+	0x00, //ascr_Kg
+	0xff, //ascr_Wb
+	0x00, //ascr_Kb
+	//end
+
+};
+
+////////////////// GALLERY /////////////////////
+static char STANDARD_GALLERY_1[] = {
+	//start
+	0xEB,
+	0x01, //mdnie_en
+	0x00, //data_width mask 00 0000
+	0x03, //ascr_roi 1 ascr 00 1 0
+	0x32, //algo_roi 1 algo lce_roi 1 lce 00 1 0 00 1 0
+	0x00, //roi_ctrl 00
+	0x00, //roi0_x_start 12
+	0x00,
+	0x00, //roi0_x_end
+	0x00,
+	0x00, //roi0_y_start
+	0x00,
+	0x00, //roi0_y_end
+	0x00,
+	0x00, //roi1_x_strat
+	0x00,
+	0x00, //roi1_x_end
+	0x00,
+	0x00, //roi1_y_start
+	0x00,
+	0x00, //roi1_y_end
+	0x00,
+};
+
+static char STANDARD_GALLERY_2[] = {
+	0xEC,
+	0x18, //lce_gain 00 0000
+	0x24, //lce_color_gain 00 0000
+	0x10, //lce_scene_change_on scene_trans 0 0000
+	0x14, //lce_min_diff
+	0xb3, //lce_illum_gain
+	0x01, //lce_ref_offset 9
+	0x0e,
+	0x01, //lce_ref_gain 9
+	0x00,
+	0x66, //lce_block_size h v 0000 0000
+	0xfa, //lce_bright_th
+	0x2d, //lce_bin_size_ratio
+	0x03, //lce_dark_th 000
+	0x96, //lce_min_ref_offset
+	0x05, //nr sharp cs gamma 0000
+	0xff, //nr_mask_th
+	0x00, //sharpen_weight 10
+	0x10,
+	0x00, //sharpen_maxplus 11
+	0xa0,
+	0x00, //sharpen_maxminus 11
+	0xa0,
+	0x01, //cs_gain 10
+	0x00,
+	0x00, //curve_1_b
+	0x20, //curve_1_a
+	0x00, //curve_2_b
+	0x20, //curve_2_a
+	0x00, //curve_3_b
+	0x20, //curve_3_a
+	0x00, //curve_4_b
+	0x20, //curve_4_a
+	0x02, //curve_5_b
+	0x1b, //curve_5_a
+	0x02, //curve_6_b
+	0x1b, //curve_6_a
+	0x02, //curve_7_b
+	0x1b, //curve_7_a
+	0x02, //curve_8_b
+	0x1b, //curve_8_a
+	0x09, //curve_9_b
+	0xa6, //curve_9_a
+	0x09, //curve10_b
+	0xa6, //curve10_a
+	0x09, //curve11_b
+	0xa6, //curve11_a
+	0x09, //curve12_b
+	0xa6, //curve12_a
+	0x00, //curve13_b
+	0x20, //curve13_a
+	0x00, //curve14_b
+	0x20, //curve14_a
+	0x00, //curve15_b
+	0x20, //curve15_a
+	0x00, //curve16_b
+	0x20, //curve16_a
+	0x00, //curve17_b
+	0x20, //curve17_a
+	0x00, //curve18_b
+	0x20, //curve18_a
+	0x00, //curve19_b
+	0x20, //curve19_a
+	0x00, //curve20_b
+	0x20, //curve20_a
+	0x00, //curve21_b
+	0x20, //curve21_a
+	0x00, //curve22_b
+	0x20, //curve22_a
+	0x00, //curve23_b
+	0x20, //curve23_a
+	0x00, //curve24_b
+	0xFF, //curve24_a
+	0x20, //ascr_skin_on strength 0 00000
+	0x67, //ascr_skin_cb
+	0xa9, //ascr_skin_cr
+	0x17, //ascr_dist_up
+	0x29, //ascr_dist_down
+	0x19, //ascr_dist_right
+	0x27, //ascr_dist_left
+	0x00, //ascr_div_up 20
+	0x59,
+	0x0b,
+	0x00, //ascr_div_down
+	0x31,
+	0xf4,
+	0x00, //ascr_div_right
+	0x51,
+	0xec,
+	0x00, //ascr_div_left
+	0x34,
+	0x83,
+	0xff, //ascr_skin_Rr
+	0x00, //ascr_skin_Rg
+	0x00, //ascr_skin_Rb
+	0xff, //ascr_skin_Yr
+	0xff, //ascr_skin_Yg
+	0x00, //ascr_skin_Yb
+	0xff, //ascr_skin_Mr
+	0x00, //ascr_skin_Mg
+	0xff, //ascr_skin_Mb
+	0xff, //ascr_skin_Wr
+	0xff, //ascr_skin_Wg
+	0xff, //ascr_skin_Wb
+	0x00, //ascr_Cr
+	0xff, //ascr_Rr
+	0xff, //ascr_Cg
+	0x16, //ascr_Rg
+	0xe5, //ascr_Cb
+	0x0e, //ascr_Rb
+	0xff, //ascr_Mr
+	0x00, //ascr_Gr
+	0x14, //ascr_Mg
+	0xff, //ascr_Gg
+	0xd9, //ascr_Mb
+	0x04, //ascr_Gb
+	0xfc, //ascr_Yr
+	0x26, //ascr_Br
+	0xff, //ascr_Yg
+	0x1b, //ascr_Bg
+	0x23, //ascr_Yb
+	0xff, //ascr_Bb
+	0xff, //ascr_Wr
+	0x00, //ascr_Kr
+	0xf8, //ascr_Wg
+	0x00, //ascr_Kg
+	0xef, //ascr_Wb
+	0x00, //ascr_Kb
+	//end
+};
+
+static char NATURAL_GALLERY_1[] = {
+	//start
+	0xEB,
+	0x01, //mdnie_en
+	0x00, //data_width mask 00 0000
+	0x03, //ascr_roi 1 ascr 00 1 0
+	0x32, //algo_roi 1 algo lce_roi 1 lce 00 1 0 00 1 0
+	0x00, //roi_ctrl 00
+	0x00, //roi0_x_start 12
+	0x00,
+	0x00, //roi0_x_end
+	0x00,
+	0x00, //roi0_y_start
+	0x00,
+	0x00, //roi0_y_end
+	0x00,
+	0x00, //roi1_x_strat
+	0x00,
+	0x00, //roi1_x_end
+	0x00,
+	0x00, //roi1_y_start
+	0x00,
+	0x00, //roi1_y_end
+	0x00,
+};
+
+static char NATURAL_GALLERY_2[] = {
+	0xEC,
+	0x18, //lce_gain 00 0000
+	0x24, //lce_color_gain 00 0000
+	0x10, //lce_scene_change_on scene_trans 0 0000
+	0x14, //lce_min_diff
+	0xb3, //lce_illum_gain
+	0x01, //lce_ref_offset 9
+	0x0e,
+	0x01, //lce_ref_gain 9
+	0x00,
+	0x66, //lce_block_size h v 0000 0000
+	0xfa, //lce_bright_th
+	0x2d, //lce_bin_size_ratio
+	0x03, //lce_dark_th 000
+	0x96, //lce_min_ref_offset
+	0x07, //nr sharp cs gamma 0000
+	0xff, //nr_mask_th
+	0x00, //sharpen_weight 10
+	0x10,
+	0x00, //sharpen_maxplus 11
+	0xa0,
+	0x00, //sharpen_maxminus 11
+	0xa0,
+	0x01, //cs_gain 10
+	0x20,
+	0x00, //curve_1_b
+	0x20, //curve_1_a
+	0x00, //curve_2_b
+	0x20, //curve_2_a
+	0x00, //curve_3_b
+	0x20, //curve_3_a
+	0x00, //curve_4_b
+	0x20, //curve_4_a
+	0x02, //curve_5_b
+	0x1b, //curve_5_a
+	0x02, //curve_6_b
+	0x1b, //curve_6_a
+	0x02, //curve_7_b
+	0x1b, //curve_7_a
+	0x02, //curve_8_b
+	0x1b, //curve_8_a
+	0x09, //curve_9_b
+	0xa6, //curve_9_a
+	0x09, //curve10_b
+	0xa6, //curve10_a
+	0x09, //curve11_b
+	0xa6, //curve11_a
+	0x09, //curve12_b
+	0xa6, //curve12_a
+	0x00, //curve13_b
+	0x20, //curve13_a
+	0x00, //curve14_b
+	0x20, //curve14_a
+	0x00, //curve15_b
+	0x20, //curve15_a
+	0x00, //curve16_b
+	0x20, //curve16_a
+	0x00, //curve17_b
+	0x20, //curve17_a
+	0x00, //curve18_b
+	0x20, //curve18_a
+	0x00, //curve19_b
+	0x20, //curve19_a
+	0x00, //curve20_b
+	0x20, //curve20_a
+	0x00, //curve21_b
+	0x20, //curve21_a
+	0x00, //curve22_b
+	0x20, //curve22_a
+	0x00, //curve23_b
+	0x20, //curve23_a
+	0x00, //curve24_b
+	0xFF, //curve24_a
+	0x20, //ascr_skin_on strength 0 00000
+	0x67, //ascr_skin_cb
+	0xa9, //ascr_skin_cr
+	0x17, //ascr_dist_up
+	0x29, //ascr_dist_down
+	0x19, //ascr_dist_right
+	0x27, //ascr_dist_left
+	0x00, //ascr_div_up 20
+	0x59,
+	0x0b,
+	0x00, //ascr_div_down
+	0x31,
+	0xf4,
+	0x00, //ascr_div_right
+	0x51,
+	0xec,
+	0x00, //ascr_div_left
+	0x34,
+	0x83,
+	0xff, //ascr_skin_Rr
+	0x00, //ascr_skin_Rg
+	0x00, //ascr_skin_Rb
+	0xff, //ascr_skin_Yr
+	0xff, //ascr_skin_Yg
+	0x00, //ascr_skin_Yb
+	0xff, //ascr_skin_Mr
+	0x00, //ascr_skin_Mg
+	0xff, //ascr_skin_Mb
+	0xff, //ascr_skin_Wr
+	0xff, //ascr_skin_Wg
+	0xff, //ascr_skin_Wb
+	0x7a, //ascr_Cr
+	0xff, //ascr_Rr
+	0xff, //ascr_Cg
+	0x2b, //ascr_Rg
+	0xf1, //ascr_Cb
+	0x2d, //ascr_Rb
+	0xff, //ascr_Mr
+	0x68, //ascr_Gr
+	0x15, //ascr_Mg
+	0xff, //ascr_Gg
+	0xfa, //ascr_Mb
+	0x31, //ascr_Gb
+	0xf8, //ascr_Yr
+	0x34, //ascr_Br
+	0xff, //ascr_Yg
+	0x20, //ascr_Bg
+	0x4b, //ascr_Yb
+	0xff, //ascr_Bb
+	0xff, //ascr_Wr
+	0x00, //ascr_Kr
+	0xf8, //ascr_Wg
+	0x00, //ascr_Kg
+	0xef, //ascr_Wb
+	0x00, //ascr_Kb
+	//end
+};
+
+static char DYNAMIC_GALLERY_1[] = {
+	//start
+	0xEB,
+	0x01, //mdnie_en
+	0x00, //data_width mask 00 0000
+	0x03, //ascr_roi 1 ascr 00 1 0
+	0x32, //algo_roi 1 algo lce_roi 1 lce 00 1 0 00 1 0
+	0x00, //roi_ctrl 00
+	0x00, //roi0_x_start 12
+	0x00,
+	0x00, //roi0_x_end
+	0x00,
+	0x00, //roi0_y_start
+	0x00,
+	0x00, //roi0_y_end
+	0x00,
+	0x00, //roi1_x_strat
+	0x00,
+	0x00, //roi1_x_end
+	0x00,
+	0x00, //roi1_y_start
+	0x00,
+	0x00, //roi1_y_end
+	0x00,
+};
+
+static char DYNAMIC_GALLERY_2[] = {
+	0xEC,
+	0x18, //lce_gain 00 0000
+	0x24, //lce_color_gain 00 0000
+	0x10, //lce_scene_change_on scene_trans 0 0000
+	0x14, //lce_min_diff
+	0xb3, //lce_illum_gain
+	0x01, //lce_ref_offset 9
+	0x0e,
+	0x01, //lce_ref_gain 9
+	0x00,
+	0x66, //lce_block_size h v 0000 0000
+	0xfa, //lce_bright_th
+	0x2d, //lce_bin_size_ratio
+	0x03, //lce_dark_th 000
+	0x96, //lce_min_ref_offset
+	0x07, //nr sharp cs gamma 0000
+	0xff, //nr_mask_th
+	0x00, //sharpen_weight 10
+	0x40,
+	0x00, //sharpen_maxplus 11
+	0xa0,
+	0x00, //sharpen_maxminus 11
+	0xa0,
+	0x01, //cs_gain 10
+	0x20,
+	0x00, //curve_1_b
+	0x0f, //curve_1_a
+	0x00, //curve_2_b
+	0x0f, //curve_2_a
+	0x00, //curve_3_b
+	0x0f, //curve_3_a
+	0x00, //curve_4_b
+	0x0f, //curve_4_a
+	0x09, //curve_5_b
+	0xa2, //curve_5_a
+	0x09, //curve_6_b
+	0xa2, //curve_6_a
+	0x09, //curve_7_b
+	0xa2, //curve_7_a
+	0x09, //curve_8_b
+	0xa2, //curve_8_a
+	0x09, //curve_9_b
+	0xa2, //curve_9_a
+	0x09, //curve10_b
+	0xa2, //curve10_a
+	0x0a, //curve11_b
+	0xa2, //curve11_a
+	0x0a, //curve12_b
+	0xa2, //curve12_a
+	0x0a, //curve13_b
+	0xa2, //curve13_a
+	0x0a, //curve14_b
+	0xa2, //curve14_a
+	0x0a, //curve15_b
+	0xa2, //curve15_a
+	0x0a, //curve16_b
+	0xa2, //curve16_a
+	0x0a, //curve17_b
+	0xa2, //curve17_a
+	0x0a, //curve18_b
+	0xa2, //curve18_a
+	0x0f, //curve19_b
+	0xa4, //curve19_a
+	0x0f, //curve20_b
+	0xa4, //curve20_a
+	0x0f, //curve21_b
+	0xa4, //curve21_a
+	0x23, //curve22_b
+	0x1c, //curve22_a
+	0x48, //curve23_b
+	0x17, //curve23_a
+	0x00, //curve24_b
+	0xFF, //curve24_a
+	0x20, //ascr_skin_on strength 0 00000
+	0x67, //ascr_skin_cb
+	0xa9, //ascr_skin_cr
+	0x17, //ascr_dist_up
+	0x29, //ascr_dist_down
+	0x19, //ascr_dist_right
+	0x27, //ascr_dist_left
+	0x00, //ascr_div_up 20
+	0x59,
+	0x0b,
+	0x00, //ascr_div_down
+	0x31,
+	0xf4,
+	0x00, //ascr_div_right
+	0x51,
+	0xec,
+	0x00, //ascr_div_left
+	0x34,
+	0x83,
+	0xff, //ascr_skin_Rr
+	0x00, //ascr_skin_Rg
+	0x00, //ascr_skin_Rb
+	0xff, //ascr_skin_Yr
+	0xff, //ascr_skin_Yg
+	0x00, //ascr_skin_Yb
+	0xff, //ascr_skin_Mr
+	0x00, //ascr_skin_Mg
+	0xff, //ascr_skin_Mb
+	0xff, //ascr_skin_Wr
+	0xff, //ascr_skin_Wg
+	0xff, //ascr_skin_Wb
+	0x00, //ascr_Cr
+	0xff, //ascr_Rr
+	0xff, //ascr_Cg
+	0x00, //ascr_Rg
+	0xff, //ascr_Cb
+	0x00, //ascr_Rb
+	0xff, //ascr_Mr
+	0x00, //ascr_Gr
+	0x00, //ascr_Mg
+	0xff, //ascr_Gg
+	0xff, //ascr_Mb
+	0x00, //ascr_Gb
+	0xff, //ascr_Yr
+	0x00, //ascr_Br
+	0xff, //ascr_Yg
+	0x00, //ascr_Bg
+	0x00, //ascr_Yb
+	0xff, //ascr_Bb
+	0xff, //ascr_Wr
+	0x00, //ascr_Kr
+	0xff, //ascr_Wg
+	0x00, //ascr_Kg
+	0xff, //ascr_Wb
+	0x00, //ascr_Kb
+	//end
+
+};
+
+static char MOVIE_GALLERY_1[] = {
+	//start
+	0xEB,
+	0x01, //mdnie_en
+	0x00, //data_width mask 00 0000
+	0x03, //ascr_roi 1 ascr 00 1 0
+	0x32, //algo_roi 1 algo lce_roi 1 lce 00 1 0 00 1 0
+	0x00, //roi_ctrl 00
+	0x00, //roi0_x_start 12
+	0x00,
+	0x00, //roi0_x_end
+	0x00,
+	0x00, //roi0_y_start
+	0x00,
+	0x00, //roi0_y_end
+	0x00,
+	0x00, //roi1_x_strat
+	0x00,
+	0x00, //roi1_x_end
+	0x00,
+	0x00, //roi1_y_start
+	0x00,
+	0x00, //roi1_y_end
+	0x00,
+};
+
+static char MOVIE_GALLERY_2[] = {
+	0xEC,
+	0x18, //lce_gain 00 0000
+	0x24, //lce_color_gain 00 0000
+	0x10, //lce_scene_change_on scene_trans 0 0000
+	0x14, //lce_min_diff
+	0xb3, //lce_illum_gain
+	0x01, //lce_ref_offset 9
+	0x0e,
+	0x01, //lce_ref_gain 9
+	0x00,
+	0x66, //lce_block_size h v 0000 0000
+	0xfa, //lce_bright_th
+	0x2d, //lce_bin_size_ratio
+	0x03, //lce_dark_th 000
+	0x96, //lce_min_ref_offset
+	0x07, //nr sharp cs gamma 0000
+	0xff, //nr_mask_th
+	0x00, //sharpen_weight 10
+	0x10,
+	0x00, //sharpen_maxplus 11
+	0xa0,
+	0x00, //sharpen_maxminus 11
+	0xa0,
+	0x01, //cs_gain 10
+	0x20,
+	0x00, //curve_1_b
+	0x20, //curve_1_a
+	0x00, //curve_2_b
+	0x20, //curve_2_a
+	0x00, //curve_3_b
+	0x20, //curve_3_a
+	0x00, //curve_4_b
+	0x20, //curve_4_a
+	0x02, //curve_5_b
+	0x1b, //curve_5_a
+	0x02, //curve_6_b
+	0x1b, //curve_6_a
+	0x02, //curve_7_b
+	0x1b, //curve_7_a
+	0x02, //curve_8_b
+	0x1b, //curve_8_a
+	0x09, //curve_9_b
+	0xa6, //curve_9_a
+	0x09, //curve10_b
+	0xa6, //curve10_a
+	0x09, //curve11_b
+	0xa6, //curve11_a
+	0x09, //curve12_b
+	0xa6, //curve12_a
+	0x00, //curve13_b
+	0x20, //curve13_a
+	0x00, //curve14_b
+	0x20, //curve14_a
+	0x00, //curve15_b
+	0x20, //curve15_a
+	0x00, //curve16_b
+	0x20, //curve16_a
+	0x00, //curve17_b
+	0x20, //curve17_a
+	0x00, //curve18_b
+	0x20, //curve18_a
+	0x00, //curve19_b
+	0x20, //curve19_a
+	0x00, //curve20_b
+	0x20, //curve20_a
+	0x00, //curve21_b
+	0x20, //curve21_a
+	0x00, //curve22_b
+	0x20, //curve22_a
+	0x00, //curve23_b
+	0x20, //curve23_a
+	0x00, //curve24_b
+	0xFF, //curve24_a
+	0x20, //ascr_skin_on strength 0 00000
+	0x67, //ascr_skin_cb
+	0xa9, //ascr_skin_cr
+	0x17, //ascr_dist_up
+	0x29, //ascr_dist_down
+	0x19, //ascr_dist_right
+	0x27, //ascr_dist_left
+	0x00, //ascr_div_up 20
+	0x59,
+	0x0b,
+	0x00, //ascr_div_down
+	0x31,
+	0xf4,
+	0x00, //ascr_div_right
+	0x51,
+	0xec,
+	0x00, //ascr_div_left
+	0x34,
+	0x83,
+	0xff, //ascr_skin_Rr
+	0x00, //ascr_skin_Rg
+	0x00, //ascr_skin_Rb
+	0xff, //ascr_skin_Yr
+	0xff, //ascr_skin_Yg
+	0x00, //ascr_skin_Yb
+	0xff, //ascr_skin_Mr
+	0x00, //ascr_skin_Mg
+	0xff, //ascr_skin_Mb
+	0xff, //ascr_skin_Wr
+	0xff, //ascr_skin_Wg
+	0xff, //ascr_skin_Wb
+	0x7a, //ascr_Cr
+	0xff, //ascr_Rr
+	0xff, //ascr_Cg
+	0x2b, //ascr_Rg
+	0xf1, //ascr_Cb
+	0x2d, //ascr_Rb
+	0xff, //ascr_Mr
+	0x68, //ascr_Gr
+	0x15, //ascr_Mg
+	0xff, //ascr_Gg
+	0xfa, //ascr_Mb
+	0x31, //ascr_Gb
+	0xf8, //ascr_Yr
+	0x34, //ascr_Br
+	0xff, //ascr_Yg
+	0x20, //ascr_Bg
+	0x4b, //ascr_Yb
+	0xff, //ascr_Bb
+	0xff, //ascr_Wr
+	0x00, //ascr_Kr
+	0xf8, //ascr_Wg
+	0x00, //ascr_Kg
+	0xef, //ascr_Wb
+	0x00, //ascr_Kb
+	//end
+
+};
+
+char AUTO_GALLERY_1[] = {
+	//start
+	0xEB,
+	0x01, //mdnie_en
+	0x00, //data_width mask 00 0000
+	0x03, //ascr_roi 1 ascr 00 1 0
+	0x32, //algo_roi 1 algo lce_roi 1 lce 00 1 0 00 1 0
+	0x00, //roi_ctrl 00
+	0x00, //roi0_x_start 12
+	0x00,
+	0x00, //roi0_x_end
+	0x00,
+	0x00, //roi0_y_start
+	0x00,
+	0x00, //roi0_y_end
+	0x00,
+	0x00, //roi1_x_strat
+	0x00,
+	0x00, //roi1_x_end
+	0x00,
+	0x00, //roi1_y_start
+	0x00,
+	0x00, //roi1_y_end
+	0x00,
+
+};
+
+char AUTO_GALLERY_2[] = {
+	0xEC,
+	0x18, //lce_gain 00 0000
+	0x24, //lce_color_gain 00 0000
+	0x10, //lce_scene_change_on scene_trans 0 0000
+	0x14, //lce_min_diff
+	0xb3, //lce_illum_gain
+	0x01, //lce_ref_offset 9
+	0x0e,
+	0x01, //lce_ref_gain 9
+	0x00,
+	0x66, //lce_block_size h v 0000 0000
+	0xfa, //lce_bright_th
+	0x2d, //lce_bin_size_ratio
+	0x03, //lce_dark_th 000
+	0x96, //lce_min_ref_offset
+	0x05, //nr sharp cs gamma 0000
+	0xff, //nr_mask_th
+	0x00, //sharpen_weight 10
+	0x28,
+	0x00, //sharpen_maxplus 11
+	0xa0,
+	0x00, //sharpen_maxminus 11
+	0xa0,
+	0x01, //cs_gain 10
+	0x00,
+	0x00, //curve_1_b
+	0x20, //curve_1_a
+	0x00, //curve_2_b
+	0x20, //curve_2_a
+	0x00, //curve_3_b
+	0x20, //curve_3_a
+	0x00, //curve_4_b
+	0x20, //curve_4_a
+	0x02, //curve_5_b
+	0x1b, //curve_5_a
+	0x02, //curve_6_b
+	0x1b, //curve_6_a
+	0x02, //curve_7_b
+	0x1b, //curve_7_a
+	0x02, //curve_8_b
+	0x1b, //curve_8_a
+	0x09, //curve_9_b
+	0xa6, //curve_9_a
+	0x09, //curve10_b
+	0xa6, //curve10_a
+	0x09, //curve11_b
+	0xa6, //curve11_a
+	0x09, //curve12_b
+	0xa6, //curve12_a
+	0x00, //curve13_b
+	0x20, //curve13_a
+	0x00, //curve14_b
+	0x20, //curve14_a
+	0x00, //curve15_b
+	0x20, //curve15_a
+	0x00, //curve16_b
+	0x20, //curve16_a
+	0x00, //curve17_b
+	0x20, //curve17_a
+	0x00, //curve18_b
+	0x20, //curve18_a
+	0x00, //curve19_b
+	0x20, //curve19_a
+	0x00, //curve20_b
+	0x20, //curve20_a
+	0x00, //curve21_b
+	0x20, //curve21_a
+	0x00, //curve22_b
+	0x20, //curve22_a
+	0x00, //curve23_b
+	0x20, //curve23_a
+	0x00, //curve24_b
+	0xFF, //curve24_a
+	0x30, //ascr_skin_on strength 0 00000
+	0x67, //ascr_skin_cb
+	0xa9, //ascr_skin_cr
+	0x17, //ascr_dist_up
+	0x29, //ascr_dist_down
+	0x19, //ascr_dist_right
+	0x27, //ascr_dist_left
+	0x00, //ascr_div_up 20
+	0x59,
+	0x0b,
+	0x00, //ascr_div_down
+	0x31,
+	0xf4,
+	0x00, //ascr_div_right
+	0x51,
+	0xec,
+	0x00, //ascr_div_left
+	0x34,
+	0x83,
+	0xff, //ascr_skin_Rr
+	0x50, //ascr_skin_Rg
+	0x60, //ascr_skin_Rb
+	0xff, //ascr_skin_Yr
+	0xff, //ascr_skin_Yg
+	0x00, //ascr_skin_Yb
+	0xff, //ascr_skin_Mr
+	0x00, //ascr_skin_Mg
+	0xff, //ascr_skin_Mb
+	0xff, //ascr_skin_Wr
+	0xff, //ascr_skin_Wg
+	0xff, //ascr_skin_Wb
+	0x00, //ascr_Cr
+	0xff, //ascr_Rr
+	0xff, //ascr_Cg
+	0x00, //ascr_Rg
+	0xff, //ascr_Cb
+	0x00, //ascr_Rb
+	0xff, //ascr_Mr
+	0x00, //ascr_Gr
+	0x00, //ascr_Mg
+	0xff, //ascr_Gg
+	0xff, //ascr_Mb
+	0x00, //ascr_Gb
+	0xff, //ascr_Yr
+	0x00, //ascr_Br
+	0xff, //ascr_Yg
+	0x00, //ascr_Bg
+	0x00, //ascr_Yb
+	0xff, //ascr_Bb
+	0xff, //ascr_Wr
+	0x00, //ascr_Kr
+	0xff, //ascr_Wg
+	0x00, //ascr_Kg
+	0xff, //ascr_Wb
+	0x00, //ascr_Kb
+	//end
+
+};
+
+////////////////// VIDEO /////////////////////
+
+static char STANDARD_VIDEO_1[] = {
+	//start
+	0xEB,
+	0x01, //mdnie_en
+	0x00, //data_width mask 00 0000
+	0x03, //ascr_roi 1 ascr 00 1 0
+	0x32, //algo_roi 1 algo lce_roi 1 lce 00 1 0 00 1 0
+	0x00, //roi_ctrl 00
+	0x00, //roi0_x_start 12
+	0x00,
+	0x00, //roi0_x_end
+	0x00,
+	0x00, //roi0_y_start
+	0x00,
+	0x00, //roi0_y_end
+	0x00,
+	0x00, //roi1_x_strat
+	0x00,
+	0x00, //roi1_x_end
+	0x00,
+	0x00, //roi1_y_start
+	0x00,
+	0x00, //roi1_y_end
+	0x00,
+};
+
+static char STANDARD_VIDEO_2[] = {
+	0xEC,
+	0x18, //lce_gain 00 0000
+	0x24, //lce_color_gain 00 0000
+	0x10, //lce_scene_change_on scene_trans 0 0000
+	0x14, //lce_min_diff
+	0xb3, //lce_illum_gain
+	0x01, //lce_ref_offset 9
+	0x0e,
+	0x01, //lce_ref_gain 9
+	0x00,
+	0x66, //lce_block_size h v 0000 0000
+	0xfa, //lce_bright_th
+	0x2d, //lce_bin_size_ratio
+	0x03, //lce_dark_th 000
+	0x96, //lce_min_ref_offset
+	0x05, //nr sharp cs gamma 0000
+	0xff, //nr_mask_th
+	0x00, //sharpen_weight 10
+	0x10,
+	0x00, //sharpen_maxplus 11
+	0x40,
+	0x00, //sharpen_maxminus 11
+	0x40,
+	0x01, //cs_gain 10
+	0x00,
+	0x00, //curve_1_b
+	0x20, //curve_1_a
+	0x00, //curve_2_b
+	0x20, //curve_2_a
+	0x00, //curve_3_b
+	0x20, //curve_3_a
+	0x00, //curve_4_b
+	0x20, //curve_4_a
+	0x02, //curve_5_b
+	0x1b, //curve_5_a
+	0x02, //curve_6_b
+	0x1b, //curve_6_a
+	0x02, //curve_7_b
+	0x1b, //curve_7_a
+	0x02, //curve_8_b
+	0x1b, //curve_8_a
+	0x09, //curve_9_b
+	0xa6, //curve_9_a
+	0x09, //curve10_b
+	0xa6, //curve10_a
+	0x09, //curve11_b
+	0xa6, //curve11_a
+	0x09, //curve12_b
+	0xa6, //curve12_a
+	0x00, //curve13_b
+	0x20, //curve13_a
+	0x00, //curve14_b
+	0x20, //curve14_a
+	0x00, //curve15_b
+	0x20, //curve15_a
+	0x00, //curve16_b
+	0x20, //curve16_a
+	0x00, //curve17_b
+	0x20, //curve17_a
+	0x00, //curve18_b
+	0x20, //curve18_a
+	0x00, //curve19_b
+	0x20, //curve19_a
+	0x00, //curve20_b
+	0x20, //curve20_a
+	0x00, //curve21_b
+	0x20, //curve21_a
+	0x00, //curve22_b
+	0x20, //curve22_a
+	0x00, //curve23_b
+	0x20, //curve23_a
+	0x00, //curve24_b
+	0xFF, //curve24_a
+	0x20, //ascr_skin_on strength 0 00000
+	0x67, //ascr_skin_cb
+	0xa9, //ascr_skin_cr
+	0x17, //ascr_dist_up
+	0x29, //ascr_dist_down
+	0x19, //ascr_dist_right
+	0x27, //ascr_dist_left
+	0x00, //ascr_div_up 20
+	0x59,
+	0x0b,
+	0x00, //ascr_div_down
+	0x31,
+	0xf4,
+	0x00, //ascr_div_right
+	0x51,
+	0xec,
+	0x00, //ascr_div_left
+	0x34,
+	0x83,
+	0xff, //ascr_skin_Rr
+	0x00, //ascr_skin_Rg
+	0x00, //ascr_skin_Rb
+	0xff, //ascr_skin_Yr
+	0xff, //ascr_skin_Yg
+	0x00, //ascr_skin_Yb
+	0xff, //ascr_skin_Mr
+	0x00, //ascr_skin_Mg
+	0xff, //ascr_skin_Mb
+	0xff, //ascr_skin_Wr
+	0xff, //ascr_skin_Wg
+	0xff, //ascr_skin_Wb
+	0x00, //ascr_Cr
+	0xff, //ascr_Rr
+	0xff, //ascr_Cg
+	0x16, //ascr_Rg
+	0xe5, //ascr_Cb
+	0x0e, //ascr_Rb
+	0xff, //ascr_Mr
+	0x00, //ascr_Gr
+	0x14, //ascr_Mg
+	0xff, //ascr_Gg
+	0xd9, //ascr_Mb
+	0x04, //ascr_Gb
+	0xfc, //ascr_Yr
+	0x26, //ascr_Br
+	0xff, //ascr_Yg
+	0x1b, //ascr_Bg
+	0x23, //ascr_Yb
+	0xff, //ascr_Bb
+	0xff, //ascr_Wr
+	0x00, //ascr_Kr
+	0xf8, //ascr_Wg
+	0x00, //ascr_Kg
+	0xef, //ascr_Wb
+	0x00, //ascr_Kb
+	//end
+};
+
+static char NATURAL_VIDEO_1[] = {
+	//start
+	0xEB,
+	0x01, //mdnie_en
+	0x00, //data_width mask 00 0000
+	0x03, //ascr_roi 1 ascr 00 1 0
+	0x32, //algo_roi 1 algo lce_roi 1 lce 00 1 0 00 1 0
+	0x00, //roi_ctrl 00
+	0x00, //roi0_x_start 12
+	0x00,
+	0x00, //roi0_x_end
+	0x00,
+	0x00, //roi0_y_start
+	0x00,
+	0x00, //roi0_y_end
+	0x00,
+	0x00, //roi1_x_strat
+	0x00,
+	0x00, //roi1_x_end
+	0x00,
+	0x00, //roi1_y_start
+	0x00,
+	0x00, //roi1_y_end
+	0x00,
+};
+
+static char NATURAL_VIDEO_2[] = {
+	0xEC,
+	0x18, //lce_gain 00 0000
+	0x24, //lce_color_gain 00 0000
+	0x10, //lce_scene_change_on scene_trans 0 0000
+	0x14, //lce_min_diff
+	0xb3, //lce_illum_gain
+	0x01, //lce_ref_offset 9
+	0x0e,
+	0x01, //lce_ref_gain 9
+	0x00,
+	0x66, //lce_block_size h v 0000 0000
+	0xfa, //lce_bright_th
+	0x2d, //lce_bin_size_ratio
+	0x03, //lce_dark_th 000
+	0x96, //lce_min_ref_offset
+	0x07, //nr sharp cs gamma 0000
+	0xff, //nr_mask_th
+	0x00, //sharpen_weight 10
+	0x10,
+	0x00, //sharpen_maxplus 11
+	0x40,
+	0x00, //sharpen_maxminus 11
+	0x40,
+	0x01, //cs_gain 10
+	0x20,
+	0x00, //curve_1_b
+	0x20, //curve_1_a
+	0x00, //curve_2_b
+	0x20, //curve_2_a
+	0x00, //curve_3_b
+	0x20, //curve_3_a
+	0x00, //curve_4_b
+	0x20, //curve_4_a
+	0x02, //curve_5_b
+	0x1b, //curve_5_a
+	0x02, //curve_6_b
+	0x1b, //curve_6_a
+	0x02, //curve_7_b
+	0x1b, //curve_7_a
+	0x02, //curve_8_b
+	0x1b, //curve_8_a
+	0x09, //curve_9_b
+	0xa6, //curve_9_a
+	0x09, //curve10_b
+	0xa6, //curve10_a
+	0x09, //curve11_b
+	0xa6, //curve11_a
+	0x09, //curve12_b
+	0xa6, //curve12_a
+	0x00, //curve13_b
+	0x20, //curve13_a
+	0x00, //curve14_b
+	0x20, //curve14_a
+	0x00, //curve15_b
+	0x20, //curve15_a
+	0x00, //curve16_b
+	0x20, //curve16_a
+	0x00, //curve17_b
+	0x20, //curve17_a
+	0x00, //curve18_b
+	0x20, //curve18_a
+	0x00, //curve19_b
+	0x20, //curve19_a
+	0x00, //curve20_b
+	0x20, //curve20_a
+	0x00, //curve21_b
+	0x20, //curve21_a
+	0x00, //curve22_b
+	0x20, //curve22_a
+	0x00, //curve23_b
+	0x20, //curve23_a
+	0x00, //curve24_b
+	0xFF, //curve24_a
+	0x20, //ascr_skin_on strength 0 00000
+	0x67, //ascr_skin_cb
+	0xa9, //ascr_skin_cr
+	0x17, //ascr_dist_up
+	0x29, //ascr_dist_down
+	0x19, //ascr_dist_right
+	0x27, //ascr_dist_left
+	0x00, //ascr_div_up 20
+	0x59,
+	0x0b,
+	0x00, //ascr_div_down
+	0x31,
+	0xf4,
+	0x00, //ascr_div_right
+	0x51,
+	0xec,
+	0x00, //ascr_div_left
+	0x34,
+	0x83,
+	0xff, //ascr_skin_Rr
+	0x00, //ascr_skin_Rg
+	0x00, //ascr_skin_Rb
+	0xff, //ascr_skin_Yr
+	0xff, //ascr_skin_Yg
+	0x00, //ascr_skin_Yb
+	0xff, //ascr_skin_Mr
+	0x00, //ascr_skin_Mg
+	0xff, //ascr_skin_Mb
+	0xff, //ascr_skin_Wr
+	0xff, //ascr_skin_Wg
+	0xff, //ascr_skin_Wb
+	0x7a, //ascr_Cr
+	0xff, //ascr_Rr
+	0xff, //ascr_Cg
+	0x2b, //ascr_Rg
+	0xf1, //ascr_Cb
+	0x2d, //ascr_Rb
+	0xff, //ascr_Mr
+	0x68, //ascr_Gr
+	0x15, //ascr_Mg
+	0xff, //ascr_Gg
+	0xfa, //ascr_Mb
+	0x31, //ascr_Gb
+	0xf8, //ascr_Yr
+	0x34, //ascr_Br
+	0xff, //ascr_Yg
+	0x20, //ascr_Bg
+	0x4b, //ascr_Yb
+	0xff, //ascr_Bb
+	0xff, //ascr_Wr
+	0x00, //ascr_Kr
+	0xf8, //ascr_Wg
+	0x00, //ascr_Kg
+	0xef, //ascr_Wb
+	0x00, //ascr_Kb
+	//end
+};
+
+static char DYNAMIC_VIDEO_1[] = {
+	//start
+	0xEB,
+	0x01, //mdnie_en
+	0x00, //data_width mask 00 0000
+	0x03, //ascr_roi 1 ascr 00 1 0
+	0x32, //algo_roi 1 algo lce_roi 1 lce 00 1 0 00 1 0
+	0x00, //roi_ctrl 00
+	0x00, //roi0_x_start 12
+	0x00,
+	0x00, //roi0_x_end
+	0x00,
+	0x00, //roi0_y_start
+	0x00,
+	0x00, //roi0_y_end
+	0x00,
+	0x00, //roi1_x_strat
+	0x00,
+	0x00, //roi1_x_end
+	0x00,
+	0x00, //roi1_y_start
+	0x00,
+	0x00, //roi1_y_end
+	0x00,
+};
+
+static char DYNAMIC_VIDEO_2[] = {
+	0xEC,
+	0x18, //lce_gain 00 0000
+	0x24, //lce_color_gain 00 0000
+	0x10, //lce_scene_change_on scene_trans 0 0000
+	0x14, //lce_min_diff
+	0xb3, //lce_illum_gain
+	0x01, //lce_ref_offset 9
+	0x0e,
+	0x01, //lce_ref_gain 9
+	0x00,
+	0x66, //lce_block_size h v 0000 0000
+	0xfa, //lce_bright_th
+	0x2d, //lce_bin_size_ratio
+	0x03, //lce_dark_th 000
+	0x96, //lce_min_ref_offset
+	0x07, //nr sharp cs gamma 0000
+	0xff, //nr_mask_th
+	0x00, //sharpen_weight 10
+	0x40,
+	0x00, //sharpen_maxplus 11
+	0x40,
+	0x00, //sharpen_maxminus 11
+	0x40,
+	0x01, //cs_gain 10
+	0x20,
+	0x00, //curve_1_b
+	0x0f, //curve_1_a
+	0x00, //curve_2_b
+	0x0f, //curve_2_a
+	0x00, //curve_3_b
+	0x0f, //curve_3_a
+	0x00, //curve_4_b
+	0x0f, //curve_4_a
+	0x09, //curve_5_b
+	0xa2, //curve_5_a
+	0x09, //curve_6_b
+	0xa2, //curve_6_a
+	0x09, //curve_7_b
+	0xa2, //curve_7_a
+	0x09, //curve_8_b
+	0xa2, //curve_8_a
+	0x09, //curve_9_b
+	0xa2, //curve_9_a
+	0x09, //curve10_b
+	0xa2, //curve10_a
+	0x0a, //curve11_b
+	0xa2, //curve11_a
+	0x0a, //curve12_b
+	0xa2, //curve12_a
+	0x0a, //curve13_b
+	0xa2, //curve13_a
+	0x0a, //curve14_b
+	0xa2, //curve14_a
+	0x0a, //curve15_b
+	0xa2, //curve15_a
+	0x0a, //curve16_b
+	0xa2, //curve16_a
+	0x0a, //curve17_b
+	0xa2, //curve17_a
+	0x0a, //curve18_b
+	0xa2, //curve18_a
+	0x0f, //curve19_b
+	0xa4, //curve19_a
+	0x0f, //curve20_b
+	0xa4, //curve20_a
+	0x0f, //curve21_b
+	0xa4, //curve21_a
+	0x23, //curve22_b
+	0x1c, //curve22_a
+	0x48, //curve23_b
+	0x17, //curve23_a
+	0x00, //curve24_b
+	0xFF, //curve24_a
+	0x20, //ascr_skin_on strength 0 00000
+	0x67, //ascr_skin_cb
+	0xa9, //ascr_skin_cr
+	0x17, //ascr_dist_up
+	0x29, //ascr_dist_down
+	0x19, //ascr_dist_right
+	0x27, //ascr_dist_left
+	0x00, //ascr_div_up 20
+	0x59,
+	0x0b,
+	0x00, //ascr_div_down
+	0x31,
+	0xf4,
+	0x00, //ascr_div_right
+	0x51,
+	0xec,
+	0x00, //ascr_div_left
+	0x34,
+	0x83,
+	0xff, //ascr_skin_Rr
+	0x00, //ascr_skin_Rg
+	0x00, //ascr_skin_Rb
+	0xff, //ascr_skin_Yr
+	0xff, //ascr_skin_Yg
+	0x00, //ascr_skin_Yb
+	0xff, //ascr_skin_Mr
+	0x00, //ascr_skin_Mg
+	0xff, //ascr_skin_Mb
+	0xff, //ascr_skin_Wr
+	0xff, //ascr_skin_Wg
+	0xff, //ascr_skin_Wb
+	0x00, //ascr_Cr
+	0xff, //ascr_Rr
+	0xff, //ascr_Cg
+	0x00, //ascr_Rg
+	0xff, //ascr_Cb
+	0x00, //ascr_Rb
+	0xff, //ascr_Mr
+	0x00, //ascr_Gr
+	0x00, //ascr_Mg
+	0xff, //ascr_Gg
+	0xff, //ascr_Mb
+	0x00, //ascr_Gb
+	0xff, //ascr_Yr
+	0x00, //ascr_Br
+	0xff, //ascr_Yg
+	0x00, //ascr_Bg
+	0x00, //ascr_Yb
+	0xff, //ascr_Bb
+	0xff, //ascr_Wr
+	0x00, //ascr_Kr
+	0xff, //ascr_Wg
+	0x00, //ascr_Kg
+	0xff, //ascr_Wb
+	0x00, //ascr_Kb
+	//end
+
+};
+
+static char MOVIE_VIDEO_1[] = {
+	//start
+	0xEB,
+	0x01, //mdnie_en
+	0x00, //data_width mask 00 0000
+	0x03, //ascr_roi 1 ascr 00 1 0
+	0x32, //algo_roi 1 algo lce_roi 1 lce 00 1 0 00 1 0
+	0x00, //roi_ctrl 00
+	0x00, //roi0_x_start 12
+	0x00,
+	0x00, //roi0_x_end
+	0x00,
+	0x00, //roi0_y_start
+	0x00,
+	0x00, //roi0_y_end
+	0x00,
+	0x00, //roi1_x_strat
+	0x00,
+	0x00, //roi1_x_end
+	0x00,
+	0x00, //roi1_y_start
+	0x00,
+	0x00, //roi1_y_end
+	0x00,
+};
+
+static char MOVIE_VIDEO_2[] = {
+	0xEC,
+	0x18, //lce_gain 00 0000
+	0x24, //lce_color_gain 00 0000
+	0x10, //lce_scene_change_on scene_trans 0 0000
+	0x14, //lce_min_diff
+	0xb3, //lce_illum_gain
+	0x01, //lce_ref_offset 9
+	0x0e,
+	0x01, //lce_ref_gain 9
+	0x00,
+	0x66, //lce_block_size h v 0000 0000
+	0xfa, //lce_bright_th
+	0x2d, //lce_bin_size_ratio
+	0x03, //lce_dark_th 000
+	0x96, //lce_min_ref_offset
+	0x07, //nr sharp cs gamma 0000
+	0xff, //nr_mask_th
+	0x00, //sharpen_weight 10
+	0x10,
+	0x00, //sharpen_maxplus 11
+	0x40,
+	0x00, //sharpen_maxminus 11
+	0x40,
+	0x01, //cs_gain 10
+	0x20,
+	0x00, //curve_1_b
+	0x20, //curve_1_a
+	0x00, //curve_2_b
+	0x20, //curve_2_a
+	0x00, //curve_3_b
+	0x20, //curve_3_a
+	0x00, //curve_4_b
+	0x20, //curve_4_a
+	0x02, //curve_5_b
+	0x1b, //curve_5_a
+	0x02, //curve_6_b
+	0x1b, //curve_6_a
+	0x02, //curve_7_b
+	0x1b, //curve_7_a
+	0x02, //curve_8_b
+	0x1b, //curve_8_a
+	0x09, //curve_9_b
+	0xa6, //curve_9_a
+	0x09, //curve10_b
+	0xa6, //curve10_a
+	0x09, //curve11_b
+	0xa6, //curve11_a
+	0x09, //curve12_b
+	0xa6, //curve12_a
+	0x00, //curve13_b
+	0x20, //curve13_a
+	0x00, //curve14_b
+	0x20, //curve14_a
+	0x00, //curve15_b
+	0x20, //curve15_a
+	0x00, //curve16_b
+	0x20, //curve16_a
+	0x00, //curve17_b
+	0x20, //curve17_a
+	0x00, //curve18_b
+	0x20, //curve18_a
+	0x00, //curve19_b
+	0x20, //curve19_a
+	0x00, //curve20_b
+	0x20, //curve20_a
+	0x00, //curve21_b
+	0x20, //curve21_a
+	0x00, //curve22_b
+	0x20, //curve22_a
+	0x00, //curve23_b
+	0x20, //curve23_a
+	0x00, //curve24_b
+	0xFF, //curve24_a
+	0x20, //ascr_skin_on strength 0 00000
+	0x67, //ascr_skin_cb
+	0xa9, //ascr_skin_cr
+	0x17, //ascr_dist_up
+	0x29, //ascr_dist_down
+	0x19, //ascr_dist_right
+	0x27, //ascr_dist_left
+	0x00, //ascr_div_up 20
+	0x59,
+	0x0b,
+	0x00, //ascr_div_down
+	0x31,
+	0xf4,
+	0x00, //ascr_div_right
+	0x51,
+	0xec,
+	0x00, //ascr_div_left
+	0x34,
+	0x83,
+	0xff, //ascr_skin_Rr
+	0x00, //ascr_skin_Rg
+	0x00, //ascr_skin_Rb
+	0xff, //ascr_skin_Yr
+	0xff, //ascr_skin_Yg
+	0x00, //ascr_skin_Yb
+	0xff, //ascr_skin_Mr
+	0x00, //ascr_skin_Mg
+	0xff, //ascr_skin_Mb
+	0xff, //ascr_skin_Wr
+	0xff, //ascr_skin_Wg
+	0xff, //ascr_skin_Wb
+	0x7a, //ascr_Cr
+	0xff, //ascr_Rr
+	0xff, //ascr_Cg
+	0x2b, //ascr_Rg
+	0xf1, //ascr_Cb
+	0x2d, //ascr_Rb
+	0xff, //ascr_Mr
+	0x68, //ascr_Gr
+	0x15, //ascr_Mg
+	0xff, //ascr_Gg
+	0xfa, //ascr_Mb
+	0x31, //ascr_Gb
+	0xf8, //ascr_Yr
+	0x34, //ascr_Br
+	0xff, //ascr_Yg
+	0x20, //ascr_Bg
+	0x4b, //ascr_Yb
+	0xff, //ascr_Bb
+	0xff, //ascr_Wr
+	0x00, //ascr_Kr
+	0xf8, //ascr_Wg
+	0x00, //ascr_Kg
+	0xef, //ascr_Wb
+	0x00, //ascr_Kb
+	//end
+
+};
+
+char AUTO_VIDEO_1[] = {
+	//start
+	0xEB,
+	0x01, //mdnie_en
+	0x00, //data_width mask 00 0000
+	0x03, //ascr_roi 1 ascr 00 1 0
+	0x32, //algo_roi 1 algo lce_roi 1 lce 00 1 0 00 1 0
+	0x00, //roi_ctrl 00
+	0x00, //roi0_x_start 12
+	0x00,
+	0x00, //roi0_x_end
+	0x00,
+	0x00, //roi0_y_start
+	0x00,
+	0x00, //roi0_y_end
+	0x00,
+	0x00, //roi1_x_strat
+	0x00,
+	0x00, //roi1_x_end
+	0x00,
+	0x00, //roi1_y_start
+	0x00,
+	0x00, //roi1_y_end
+	0x00,
+};
+
+char AUTO_VIDEO_2[] = {
+	0xEC,
+	0x18, //lce_gain 00 0000
+	0x24, //lce_color_gain 00 0000
+	0x10, //lce_scene_change_on scene_trans 0 0000
+	0x14, //lce_min_diff
+	0xb3, //lce_illum_gain
+	0x01, //lce_ref_offset 9
+	0x0e,
+	0x01, //lce_ref_gain 9
+	0x00,
+	0x66, //lce_block_size h v 0000 0000
+	0xfa, //lce_bright_th
+	0x2d, //lce_bin_size_ratio
+	0x03, //lce_dark_th 000
+	0x96, //lce_min_ref_offset
+	0x05, //nr sharp cs gamma 0000
+	0xff, //nr_mask_th
+	0x00, //sharpen_weight 10
+	0x28,
+	0x00, //sharpen_maxplus 11
+	0x40,
+	0x00, //sharpen_maxminus 11
+	0x40,
+	0x01, //cs_gain 10
+	0x00,
+	0x00, //curve_1_b
+	0x20, //curve_1_a
+	0x00, //curve_2_b
+	0x20, //curve_2_a
+	0x00, //curve_3_b
+	0x20, //curve_3_a
+	0x00, //curve_4_b
+	0x20, //curve_4_a
+	0x02, //curve_5_b
+	0x1b, //curve_5_a
+	0x02, //curve_6_b
+	0x1b, //curve_6_a
+	0x02, //curve_7_b
+	0x1b, //curve_7_a
+	0x02, //curve_8_b
+	0x1b, //curve_8_a
+	0x09, //curve_9_b
+	0xa6, //curve_9_a
+	0x09, //curve10_b
+	0xa6, //curve10_a
+	0x09, //curve11_b
+	0xa6, //curve11_a
+	0x09, //curve12_b
+	0xa6, //curve12_a
+	0x00, //curve13_b
+	0x20, //curve13_a
+	0x00, //curve14_b
+	0x20, //curve14_a
+	0x00, //curve15_b
+	0x20, //curve15_a
+	0x00, //curve16_b
+	0x20, //curve16_a
+	0x00, //curve17_b
+	0x20, //curve17_a
+	0x00, //curve18_b
+	0x20, //curve18_a
+	0x00, //curve19_b
+	0x20, //curve19_a
+	0x00, //curve20_b
+	0x20, //curve20_a
+	0x00, //curve21_b
+	0x20, //curve21_a
+	0x00, //curve22_b
+	0x20, //curve22_a
+	0x00, //curve23_b
+	0x20, //curve23_a
+	0x00, //curve24_b
+	0xFF, //curve24_a
+	0x30, //ascr_skin_on strength 0 00000
+	0x67, //ascr_skin_cb
+	0xa9, //ascr_skin_cr
+	0x17, //ascr_dist_up
+	0x29, //ascr_dist_down
+	0x19, //ascr_dist_right
+	0x27, //ascr_dist_left
+	0x00, //ascr_div_up 20
+	0x59,
+	0x0b,
+	0x00, //ascr_div_down
+	0x31,
+	0xf4,
+	0x00, //ascr_div_right
+	0x51,
+	0xec,
+	0x00, //ascr_div_left
+	0x34,
+	0x83,
+	0xff, //ascr_skin_Rr
+	0x50, //ascr_skin_Rg
+	0x60, //ascr_skin_Rb
+	0xff, //ascr_skin_Yr
+	0xff, //ascr_skin_Yg
+	0x00, //ascr_skin_Yb
+	0xff, //ascr_skin_Mr
+	0x00, //ascr_skin_Mg
+	0xff, //ascr_skin_Mb
+	0xff, //ascr_skin_Wr
+	0xff, //ascr_skin_Wg
+	0xff, //ascr_skin_Wb
+	0x00, //ascr_Cr
+	0xff, //ascr_Rr
+	0xff, //ascr_Cg
+	0x00, //ascr_Rg
+	0xff, //ascr_Cb
+	0x00, //ascr_Rb
+	0xff, //ascr_Mr
+	0x00, //ascr_Gr
+	0x00, //ascr_Mg
+	0xff, //ascr_Gg
+	0xff, //ascr_Mb
+	0x00, //ascr_Gb
+	0xff, //ascr_Yr
+	0x00, //ascr_Br
+	0xff, //ascr_Yg
+	0x00, //ascr_Bg
+	0x00, //ascr_Yb
+	0xff, //ascr_Bb
+	0xff, //ascr_Wr
+	0x00, //ascr_Kr
+	0xff, //ascr_Wg
+	0x00, //ascr_Kg
+	0xff, //ascr_Wb
+	0x00, //ascr_Kb
+	//end
+
+};
+
+////////////////// VT /////////////////////
+
+static char STANDARD_VT_1[] = {
+	//start
+	0xEB,
+	0x01, //mdnie_en
+	0x00, //data_width mask 00 0000
+	0x03, //ascr_roi 1 ascr 00 1 0
+	0x32, //algo_roi 1 algo lce_roi 1 lce 00 1 0 00 1 0
+	0x00, //roi_ctrl 00
+	0x00, //roi0_x_start 12
+	0x00,
+	0x00, //roi0_x_end
+	0x00,
+	0x00, //roi0_y_start
+	0x00,
+	0x00, //roi0_y_end
+	0x00,
+	0x00, //roi1_x_strat
+	0x00,
+	0x00, //roi1_x_end
+	0x00,
+	0x00, //roi1_y_start
+	0x00,
+	0x00, //roi1_y_end
+	0x00,
+};
+
+static char STANDARD_VT_2[] = {
+	0xEC,
+	0x18, //lce_gain 00 0000
+	0x24, //lce_color_gain 00 0000
+	0x10, //lce_scene_change_on scene_trans 0 0000
+	0x14, //lce_min_diff
+	0xb3, //lce_illum_gain
+	0x01, //lce_ref_offset 9
+	0x0e,
+	0x01, //lce_ref_gain 9
+	0x00,
+	0x66, //lce_block_size h v 0000 0000
+	0xfa, //lce_bright_th
+	0x2d, //lce_bin_size_ratio
+	0x03, //lce_dark_th 000
+	0x96, //lce_min_ref_offset
+	0x05, //nr sharp cs gamma 0000
+	0xff, //nr_mask_th
+	0x00, //sharpen_weight 10
+	0x10,
+	0x00, //sharpen_maxplus 11
+	0xa0,
+	0x00, //sharpen_maxminus 11
+	0xa0,
+	0x01, //cs_gain 10
+	0x00,
+	0x00, //curve_1_b
+	0x20, //curve_1_a
+	0x00, //curve_2_b
+	0x20, //curve_2_a
+	0x00, //curve_3_b
+	0x20, //curve_3_a
+	0x00, //curve_4_b
+	0x20, //curve_4_a
+	0x02, //curve_5_b
+	0x1b, //curve_5_a
+	0x02, //curve_6_b
+	0x1b, //curve_6_a
+	0x02, //curve_7_b
+	0x1b, //curve_7_a
+	0x02, //curve_8_b
+	0x1b, //curve_8_a
+	0x09, //curve_9_b
+	0xa6, //curve_9_a
+	0x09, //curve10_b
+	0xa6, //curve10_a
+	0x09, //curve11_b
+	0xa6, //curve11_a
+	0x09, //curve12_b
+	0xa6, //curve12_a
+	0x00, //curve13_b
+	0x20, //curve13_a
+	0x00, //curve14_b
+	0x20, //curve14_a
+	0x00, //curve15_b
+	0x20, //curve15_a
+	0x00, //curve16_b
+	0x20, //curve16_a
+	0x00, //curve17_b
+	0x20, //curve17_a
+	0x00, //curve18_b
+	0x20, //curve18_a
+	0x00, //curve19_b
+	0x20, //curve19_a
+	0x00, //curve20_b
+	0x20, //curve20_a
+	0x00, //curve21_b
+	0x20, //curve21_a
+	0x00, //curve22_b
+	0x20, //curve22_a
+	0x00, //curve23_b
+	0x20, //curve23_a
+	0x00, //curve24_b
+	0xFF, //curve24_a
+	0x20, //ascr_skin_on strength 0 00000
+	0x67, //ascr_skin_cb
+	0xa9, //ascr_skin_cr
+	0x17, //ascr_dist_up
+	0x29, //ascr_dist_down
+	0x19, //ascr_dist_right
+	0x27, //ascr_dist_left
+	0x00, //ascr_div_up 20
+	0x59,
+	0x0b,
+	0x00, //ascr_div_down
+	0x31,
+	0xf4,
+	0x00, //ascr_div_right
+	0x51,
+	0xec,
+	0x00, //ascr_div_left
+	0x34,
+	0x83,
+	0xff, //ascr_skin_Rr
+	0x00, //ascr_skin_Rg
+	0x00, //ascr_skin_Rb
+	0xff, //ascr_skin_Yr
+	0xff, //ascr_skin_Yg
+	0x00, //ascr_skin_Yb
+	0xff, //ascr_skin_Mr
+	0x00, //ascr_skin_Mg
+	0xff, //ascr_skin_Mb
+	0xff, //ascr_skin_Wr
+	0xff, //ascr_skin_Wg
+	0xff, //ascr_skin_Wb
+	0x00, //ascr_Cr
+	0xff, //ascr_Rr
+	0xff, //ascr_Cg
+	0x16, //ascr_Rg
+	0xe5, //ascr_Cb
+	0x0e, //ascr_Rb
+	0xff, //ascr_Mr
+	0x00, //ascr_Gr
+	0x14, //ascr_Mg
+	0xff, //ascr_Gg
+	0xd9, //ascr_Mb
+	0x04, //ascr_Gb
+	0xfc, //ascr_Yr
+	0x26, //ascr_Br
+	0xff, //ascr_Yg
+	0x1b, //ascr_Bg
+	0x23, //ascr_Yb
+	0xff, //ascr_Bb
+	0xff, //ascr_Wr
+	0x00, //ascr_Kr
+	0xf8, //ascr_Wg
+	0x00, //ascr_Kg
+	0xef, //ascr_Wb
+	0x00, //ascr_Kb
+	//end
+};
+
+static char NATURAL_VT_1[] = {
+	//start
+	0xEB,
+	0x01, //mdnie_en
+	0x00, //data_width mask 00 0000
+	0x03, //ascr_roi 1 ascr 00 1 0
+	0x32, //algo_roi 1 algo lce_roi 1 lce 00 1 0 00 1 0
+	0x00, //roi_ctrl 00
+	0x00, //roi0_x_start 12
+	0x00,
+	0x00, //roi0_x_end
+	0x00,
+	0x00, //roi0_y_start
+	0x00,
+	0x00, //roi0_y_end
+	0x00,
+	0x00, //roi1_x_strat
+	0x00,
+	0x00, //roi1_x_end
+	0x00,
+	0x00, //roi1_y_start
+	0x00,
+	0x00, //roi1_y_end
+	0x00,
+};
+
+static char NATURAL_VT_2[] = {
+	0xEC,
+	0x18, //lce_gain 00 0000
+	0x24, //lce_color_gain 00 0000
+	0x10, //lce_scene_change_on scene_trans 0 0000
+	0x14, //lce_min_diff
+	0xb3, //lce_illum_gain
+	0x01, //lce_ref_offset 9
+	0x0e,
+	0x01, //lce_ref_gain 9
+	0x00,
+	0x66, //lce_block_size h v 0000 0000
+	0xfa, //lce_bright_th
+	0x2d, //lce_bin_size_ratio
+	0x03, //lce_dark_th 000
+	0x96, //lce_min_ref_offset
+	0x07, //nr sharp cs gamma 0000
+	0xff, //nr_mask_th
+	0x00, //sharpen_weight 10
+	0x10,
+	0x00, //sharpen_maxplus 11
+	0xa0,
+	0x00, //sharpen_maxminus 11
+	0xa0,
+	0x01, //cs_gain 10
+	0x20,
+	0x00, //curve_1_b
+	0x20, //curve_1_a
+	0x00, //curve_2_b
+	0x20, //curve_2_a
+	0x00, //curve_3_b
+	0x20, //curve_3_a
+	0x00, //curve_4_b
+	0x20, //curve_4_a
+	0x02, //curve_5_b
+	0x1b, //curve_5_a
+	0x02, //curve_6_b
+	0x1b, //curve_6_a
+	0x02, //curve_7_b
+	0x1b, //curve_7_a
+	0x02, //curve_8_b
+	0x1b, //curve_8_a
+	0x09, //curve_9_b
+	0xa6, //curve_9_a
+	0x09, //curve10_b
+	0xa6, //curve10_a
+	0x09, //curve11_b
+	0xa6, //curve11_a
+	0x09, //curve12_b
+	0xa6, //curve12_a
+	0x00, //curve13_b
+	0x20, //curve13_a
+	0x00, //curve14_b
+	0x20, //curve14_a
+	0x00, //curve15_b
+	0x20, //curve15_a
+	0x00, //curve16_b
+	0x20, //curve16_a
+	0x00, //curve17_b
+	0x20, //curve17_a
+	0x00, //curve18_b
+	0x20, //curve18_a
+	0x00, //curve19_b
+	0x20, //curve19_a
+	0x00, //curve20_b
+	0x20, //curve20_a
+	0x00, //curve21_b
+	0x20, //curve21_a
+	0x00, //curve22_b
+	0x20, //curve22_a
+	0x00, //curve23_b
+	0x20, //curve23_a
+	0x00, //curve24_b
+	0xFF, //curve24_a
+	0x20, //ascr_skin_on strength 0 00000
+	0x67, //ascr_skin_cb
+	0xa9, //ascr_skin_cr
+	0x17, //ascr_dist_up
+	0x29, //ascr_dist_down
+	0x19, //ascr_dist_right
+	0x27, //ascr_dist_left
+	0x00, //ascr_div_up 20
+	0x59,
+	0x0b,
+	0x00, //ascr_div_down
+	0x31,
+	0xf4,
+	0x00, //ascr_div_right
+	0x51,
+	0xec,
+	0x00, //ascr_div_left
+	0x34,
+	0x83,
+	0xff, //ascr_skin_Rr
+	0x00, //ascr_skin_Rg
+	0x00, //ascr_skin_Rb
+	0xff, //ascr_skin_Yr
+	0xff, //ascr_skin_Yg
+	0x00, //ascr_skin_Yb
+	0xff, //ascr_skin_Mr
+	0x00, //ascr_skin_Mg
+	0xff, //ascr_skin_Mb
+	0xff, //ascr_skin_Wr
+	0xff, //ascr_skin_Wg
+	0xff, //ascr_skin_Wb
+	0x7a, //ascr_Cr
+	0xff, //ascr_Rr
+	0xff, //ascr_Cg
+	0x2b, //ascr_Rg
+	0xf1, //ascr_Cb
+	0x2d, //ascr_Rb
+	0xff, //ascr_Mr
+	0x68, //ascr_Gr
+	0x15, //ascr_Mg
+	0xff, //ascr_Gg
+	0xfa, //ascr_Mb
+	0x31, //ascr_Gb
+	0xf8, //ascr_Yr
+	0x34, //ascr_Br
+	0xff, //ascr_Yg
+	0x20, //ascr_Bg
+	0x4b, //ascr_Yb
+	0xff, //ascr_Bb
+	0xff, //ascr_Wr
+	0x00, //ascr_Kr
+	0xf8, //ascr_Wg
+	0x00, //ascr_Kg
+	0xef, //ascr_Wb
+	0x00, //ascr_Kb
+	//end
+};
+
+static char DYNAMIC_VT_1[] = {
+	//start
+	0xEB,
+	0x01, //mdnie_en
+	0x00, //data_width mask 00 0000
+	0x03, //ascr_roi 1 ascr 00 1 0
+	0x32, //algo_roi 1 algo lce_roi 1 lce 00 1 0 00 1 0
+	0x00, //roi_ctrl 00
+	0x00, //roi0_x_start 12
+	0x00,
+	0x00, //roi0_x_end
+	0x00,
+	0x00, //roi0_y_start
+	0x00,
+	0x00, //roi0_y_end
+	0x00,
+	0x00, //roi1_x_strat
+	0x00,
+	0x00, //roi1_x_end
+	0x00,
+	0x00, //roi1_y_start
+	0x00,
+	0x00, //roi1_y_end
+	0x00,
+};
+
+static char DYNAMIC_VT_2[] = {
+	0xEC,
+	0x18, //lce_gain 00 0000
+	0x24, //lce_color_gain 00 0000
+	0x10, //lce_scene_change_on scene_trans 0 0000
+	0x14, //lce_min_diff
+	0xb3, //lce_illum_gain
+	0x01, //lce_ref_offset 9
+	0x0e,
+	0x01, //lce_ref_gain 9
+	0x00,
+	0x66, //lce_block_size h v 0000 0000
+	0xfa, //lce_bright_th
+	0x2d, //lce_bin_size_ratio
+	0x03, //lce_dark_th 000
+	0x96, //lce_min_ref_offset
+	0x07, //nr sharp cs gamma 0000
+	0xff, //nr_mask_th
+	0x00, //sharpen_weight 10
+	0x40,
+	0x00, //sharpen_maxplus 11
+	0xa0,
+	0x00, //sharpen_maxminus 11
+	0xa0,
+	0x01, //cs_gain 10
+	0x20,
+	0x00, //curve_1_b
+	0x0f, //curve_1_a
+	0x00, //curve_2_b
+	0x0f, //curve_2_a
+	0x00, //curve_3_b
+	0x0f, //curve_3_a
+	0x00, //curve_4_b
+	0x0f, //curve_4_a
+	0x09, //curve_5_b
+	0xa2, //curve_5_a
+	0x09, //curve_6_b
+	0xa2, //curve_6_a
+	0x09, //curve_7_b
+	0xa2, //curve_7_a
+	0x09, //curve_8_b
+	0xa2, //curve_8_a
+	0x09, //curve_9_b
+	0xa2, //curve_9_a
+	0x09, //curve10_b
+	0xa2, //curve10_a
+	0x0a, //curve11_b
+	0xa2, //curve11_a
+	0x0a, //curve12_b
+	0xa2, //curve12_a
+	0x0a, //curve13_b
+	0xa2, //curve13_a
+	0x0a, //curve14_b
+	0xa2, //curve14_a
+	0x0a, //curve15_b
+	0xa2, //curve15_a
+	0x0a, //curve16_b
+	0xa2, //curve16_a
+	0x0a, //curve17_b
+	0xa2, //curve17_a
+	0x0a, //curve18_b
+	0xa2, //curve18_a
+	0x0f, //curve19_b
+	0xa4, //curve19_a
+	0x0f, //curve20_b
+	0xa4, //curve20_a
+	0x0f, //curve21_b
+	0xa4, //curve21_a
+	0x23, //curve22_b
+	0x1c, //curve22_a
+	0x48, //curve23_b
+	0x17, //curve23_a
+	0x00, //curve24_b
+	0xFF, //curve24_a
+	0x20, //ascr_skin_on strength 0 00000
+	0x67, //ascr_skin_cb
+	0xa9, //ascr_skin_cr
+	0x17, //ascr_dist_up
+	0x29, //ascr_dist_down
+	0x19, //ascr_dist_right
+	0x27, //ascr_dist_left
+	0x00, //ascr_div_up 20
+	0x59,
+	0x0b,
+	0x00, //ascr_div_down
+	0x31,
+	0xf4,
+	0x00, //ascr_div_right
+	0x51,
+	0xec,
+	0x00, //ascr_div_left
+	0x34,
+	0x83,
+	0xff, //ascr_skin_Rr
+	0x00, //ascr_skin_Rg
+	0x00, //ascr_skin_Rb
+	0xff, //ascr_skin_Yr
+	0xff, //ascr_skin_Yg
+	0x00, //ascr_skin_Yb
+	0xff, //ascr_skin_Mr
+	0x00, //ascr_skin_Mg
+	0xff, //ascr_skin_Mb
+	0xff, //ascr_skin_Wr
+	0xff, //ascr_skin_Wg
+	0xff, //ascr_skin_Wb
+	0x00, //ascr_Cr
+	0xff, //ascr_Rr
+	0xff, //ascr_Cg
+	0x00, //ascr_Rg
+	0xff, //ascr_Cb
+	0x00, //ascr_Rb
+	0xff, //ascr_Mr
+	0x00, //ascr_Gr
+	0x00, //ascr_Mg
+	0xff, //ascr_Gg
+	0xff, //ascr_Mb
+	0x00, //ascr_Gb
+	0xff, //ascr_Yr
+	0x00, //ascr_Br
+	0xff, //ascr_Yg
+	0x00, //ascr_Bg
+	0x00, //ascr_Yb
+	0xff, //ascr_Bb
+	0xff, //ascr_Wr
+	0x00, //ascr_Kr
+	0xff, //ascr_Wg
+	0x00, //ascr_Kg
+	0xff, //ascr_Wb
+	0x00, //ascr_Kb
+	//end
+
+};
+
+static char MOVIE_VT_1[] = {
+	//start
+	0xEB,
+	0x01, //mdnie_en
+	0x00, //data_width mask 00 0000
+	0x03, //ascr_roi 1 ascr 00 1 0
+	0x32, //algo_roi 1 algo lce_roi 1 lce 00 1 0 00 1 0
+	0x00, //roi_ctrl 00
+	0x00, //roi0_x_start 12
+	0x00,
+	0x00, //roi0_x_end
+	0x00,
+	0x00, //roi0_y_start
+	0x00,
+	0x00, //roi0_y_end
+	0x00,
+	0x00, //roi1_x_strat
+	0x00,
+	0x00, //roi1_x_end
+	0x00,
+	0x00, //roi1_y_start
+	0x00,
+	0x00, //roi1_y_end
+	0x00,
+};
+
+static char MOVIE_VT_2[] = {
+	0xEC,
+	0x18, //lce_gain 00 0000
+	0x24, //lce_color_gain 00 0000
+	0x10, //lce_scene_change_on scene_trans 0 0000
+	0x14, //lce_min_diff
+	0xb3, //lce_illum_gain
+	0x01, //lce_ref_offset 9
+	0x0e,
+	0x01, //lce_ref_gain 9
+	0x00,
+	0x66, //lce_block_size h v 0000 0000
+	0xfa, //lce_bright_th
+	0x2d, //lce_bin_size_ratio
+	0x03, //lce_dark_th 000
+	0x96, //lce_min_ref_offset
+	0x07, //nr sharp cs gamma 0000
+	0xff, //nr_mask_th
+	0x00, //sharpen_weight 10
+	0x10,
+	0x00, //sharpen_maxplus 11
+	0xa0,
+	0x00, //sharpen_maxminus 11
+	0xa0,
+	0x01, //cs_gain 10
+	0x20,
+	0x00, //curve_1_b
+	0x20, //curve_1_a
+	0x00, //curve_2_b
+	0x20, //curve_2_a
+	0x00, //curve_3_b
+	0x20, //curve_3_a
+	0x00, //curve_4_b
+	0x20, //curve_4_a
+	0x02, //curve_5_b
+	0x1b, //curve_5_a
+	0x02, //curve_6_b
+	0x1b, //curve_6_a
+	0x02, //curve_7_b
+	0x1b, //curve_7_a
+	0x02, //curve_8_b
+	0x1b, //curve_8_a
+	0x09, //curve_9_b
+	0xa6, //curve_9_a
+	0x09, //curve10_b
+	0xa6, //curve10_a
+	0x09, //curve11_b
+	0xa6, //curve11_a
+	0x09, //curve12_b
+	0xa6, //curve12_a
+	0x00, //curve13_b
+	0x20, //curve13_a
+	0x00, //curve14_b
+	0x20, //curve14_a
+	0x00, //curve15_b
+	0x20, //curve15_a
+	0x00, //curve16_b
+	0x20, //curve16_a
+	0x00, //curve17_b
+	0x20, //curve17_a
+	0x00, //curve18_b
+	0x20, //curve18_a
+	0x00, //curve19_b
+	0x20, //curve19_a
+	0x00, //curve20_b
+	0x20, //curve20_a
+	0x00, //curve21_b
+	0x20, //curve21_a
+	0x00, //curve22_b
+	0x20, //curve22_a
+	0x00, //curve23_b
+	0x20, //curve23_a
+	0x00, //curve24_b
+	0xFF, //curve24_a
+	0x20, //ascr_skin_on strength 0 00000
+	0x67, //ascr_skin_cb
+	0xa9, //ascr_skin_cr
+	0x17, //ascr_dist_up
+	0x29, //ascr_dist_down
+	0x19, //ascr_dist_right
+	0x27, //ascr_dist_left
+	0x00, //ascr_div_up 20
+	0x59,
+	0x0b,
+	0x00, //ascr_div_down
+	0x31,
+	0xf4,
+	0x00, //ascr_div_right
+	0x51,
+	0xec,
+	0x00, //ascr_div_left
+	0x34,
+	0x83,
+	0xff, //ascr_skin_Rr
+	0x00, //ascr_skin_Rg
+	0x00, //ascr_skin_Rb
+	0xff, //ascr_skin_Yr
+	0xff, //ascr_skin_Yg
+	0x00, //ascr_skin_Yb
+	0xff, //ascr_skin_Mr
+	0x00, //ascr_skin_Mg
+	0xff, //ascr_skin_Mb
+	0xff, //ascr_skin_Wr
+	0xff, //ascr_skin_Wg
+	0xff, //ascr_skin_Wb
+	0x7a, //ascr_Cr
+	0xff, //ascr_Rr
+	0xff, //ascr_Cg
+	0x2b, //ascr_Rg
+	0xf1, //ascr_Cb
+	0x2d, //ascr_Rb
+	0xff, //ascr_Mr
+	0x68, //ascr_Gr
+	0x15, //ascr_Mg
+	0xff, //ascr_Gg
+	0xfa, //ascr_Mb
+	0x31, //ascr_Gb
+	0xf8, //ascr_Yr
+	0x34, //ascr_Br
+	0xff, //ascr_Yg
+	0x20, //ascr_Bg
+	0x4b, //ascr_Yb
+	0xff, //ascr_Bb
+	0xff, //ascr_Wr
+	0x00, //ascr_Kr
+	0xf8, //ascr_Wg
+	0x00, //ascr_Kg
+	0xef, //ascr_Wb
+	0x00, //ascr_Kb
+	//end
+
+};
+
+char BYPASS_1[] = {
+	//start
+	0xEB,
+	0x01, //mdnie_en
+	0x00, //data_width mask 00 0000
+	0x00, //ascr_roi 1 ascr 00 1 0
+	0x02, //algo_roi 1 algo lce_roi 1 lce 00 1 0 00 1 0
+	0x00, //roi_ctrl 00
+	0x00, //roi0_x_start 12
+	0x00,
+	0x00, //roi0_x_end
+	0x00,
+	0x00, //roi0_y_start
+	0x00,
+	0x00, //roi0_y_end
+	0x00,
+	0x00, //roi1_x_strat
+	0x00,
+	0x00, //roi1_x_end
+	0x00,
+	0x00, //roi1_y_start
+	0x00,
+	0x00, //roi1_y_end
+	0x00,
+};
+
+char BYPASS_2[] = {
+	0xEC,
+	0x18, //lce_gain 00 0000
+	0x24, //lce_color_gain 00 0000
+	0x10, //lce_scene_change_on scene_trans 0 0000
+	0x14, //lce_min_diff
+	0xb3, //lce_illum_gain
+	0x01, //lce_ref_offset 9
+	0x0e,
+	0x01, //lce_ref_gain 9
+	0x00,
+	0x66, //lce_block_size h v 0000 0000
+	0xfa, //lce_bright_th
+	0x2d, //lce_bin_size_ratio
+	0x03, //lce_dark_th 000
+	0x96, //lce_min_ref_offset
+	0x00, //nr sharp cs gamma 0000
+	0xff, //nr_mask_th
+	0x00, //sharpen_weight 10
+	0x00,
+	0x07, //sharpen_maxplus 11
+	0xff,
+	0x07, //sharpen_maxminus 11
+	0xff,
+	0x01, //cs_gain 10
+	0x00,
+	0x00, //curve_1_b
+	0x20, //curve_1_a
+	0x00, //curve_2_b
+	0x20, //curve_2_a
+	0x00, //curve_3_b
+	0x20, //curve_3_a
+	0x00, //curve_4_b
+	0x20, //curve_4_a
+	0x02, //curve_5_b
+	0x1b, //curve_5_a
+	0x02, //curve_6_b
+	0x1b, //curve_6_a
+	0x02, //curve_7_b
+	0x1b, //curve_7_a
+	0x02, //curve_8_b
+	0x1b, //curve_8_a
+	0x09, //curve_9_b
+	0xa6, //curve_9_a
+	0x09, //curve10_b
+	0xa6, //curve10_a
+	0x09, //curve11_b
+	0xa6, //curve11_a
+	0x09, //curve12_b
+	0xa6, //curve12_a
+	0x00, //curve13_b
+	0x20, //curve13_a
+	0x00, //curve14_b
+	0x20, //curve14_a
+	0x00, //curve15_b
+	0x20, //curve15_a
+	0x00, //curve16_b
+	0x20, //curve16_a
+	0x00, //curve17_b
+	0x20, //curve17_a
+	0x00, //curve18_b
+	0x20, //curve18_a
+	0x00, //curve19_b
+	0x20, //curve19_a
+	0x00, //curve20_b
+	0x20, //curve20_a
+	0x00, //curve21_b
+	0x20, //curve21_a
+	0x00, //curve22_b
+	0x20, //curve22_a
+	0x00, //curve23_b
+	0x20, //curve23_a
+	0x00, //curve24_b
+	0xFF, //curve24_a
+	0x10, //ascr_skin_on strength 0 00000
+	0x67, //ascr_skin_cb
+	0xa9, //ascr_skin_cr
+	0x0c, //ascr_dist_up
+	0x0c, //ascr_dist_down
+	0x0c, //ascr_dist_right
+	0x0c, //ascr_dist_left
+	0x00, //ascr_div_up 20
+	0xaa,
+	0xab,
+	0x00, //ascr_div_down
+	0xaa,
+	0xab,
+	0x00, //ascr_div_right
+	0xaa,
+	0xab,
+	0x00, //ascr_div_left
+	0xaa,
+	0xab,
+	0xd5, //ascr_skin_Rr
+	0x2c, //ascr_skin_Rg
+	0x2a, //ascr_skin_Rb
+	0xff, //ascr_skin_Yr
+	0xf5, //ascr_skin_Yg
+	0x63, //ascr_skin_Yb
+	0xfe, //ascr_skin_Mr
+	0x4a, //ascr_skin_Mg
+	0xff, //ascr_skin_Mb
+	0xff, //ascr_skin_Wr
+	0xf9, //ascr_skin_Wg
+	0xf8, //ascr_skin_Wb
+	0x00, //ascr_Cr
+	0xff, //ascr_Rr
+	0xff, //ascr_Cg
+	0x00, //ascr_Rg
+	0xff, //ascr_Cb
+	0x00, //ascr_Rb
+	0xff, //ascr_Mr
+	0x00, //ascr_Gr
+	0x00, //ascr_Mg
+	0xff, //ascr_Gg
+	0xff, //ascr_Mb
+	0x00, //ascr_Gb
+	0xff, //ascr_Yr
+	0x00, //ascr_Br
+	0xff, //ascr_Yg
+	0x00, //ascr_Bg
+	0x00, //ascr_Yb
+	0xff, //ascr_Bb
+	0xff, //ascr_Wr
+	0x00, //ascr_Kr
+	0xff, //ascr_Wg
+	0x00, //ascr_Kg
+	0xff, //ascr_Wb
+	0x00, //ascr_Kb
+	//end
+
+};
+
+char AUTO_VT_1[] = {
+	//start
+	0xEB,
+	0x01, //mdnie_en
+	0x00, //data_width mask 00 0000
+	0x03, //ascr_roi 1 ascr 00 1 0
+	0x32, //algo_roi 1 algo lce_roi 1 lce 00 1 0 00 1 0
+	0x00, //roi_ctrl 00
+	0x00, //roi0_x_start 12
+	0x00,
+	0x00, //roi0_x_end
+	0x00,
+	0x00, //roi0_y_start
+	0x00,
+	0x00, //roi0_y_end
+	0x00,
+	0x00, //roi1_x_strat
+	0x00,
+	0x00, //roi1_x_end
+	0x00,
+	0x00, //roi1_y_start
+	0x00,
+	0x00, //roi1_y_end
+	0x00,
+};
+
+char AUTO_VT_2[] = {
+	0xEC,
+	0x18, //lce_gain 00 0000
+	0x24, //lce_color_gain 00 0000
+	0x10, //lce_scene_change_on scene_trans 0 0000
+	0x14, //lce_min_diff
+	0xb3, //lce_illum_gain
+	0x01, //lce_ref_offset 9
+	0x0e,
+	0x01, //lce_ref_gain 9
+	0x00,
+	0x66, //lce_block_size h v 0000 0000
+	0xfa, //lce_bright_th
+	0x2d, //lce_bin_size_ratio
+	0x03, //lce_dark_th 000
+	0x96, //lce_min_ref_offset
+	0x05, //nr sharp cs gamma 0000
+	0xff, //nr_mask_th
+	0x00, //sharpen_weight 10
+	0x28,
+	0x00, //sharpen_maxplus 11
+	0xa0,
+	0x00, //sharpen_maxminus 11
+	0xa0,
+	0x01, //cs_gain 10
+	0x00,
+	0x00, //curve_1_b
+	0x20, //curve_1_a
+	0x00, //curve_2_b
+	0x20, //curve_2_a
+	0x00, //curve_3_b
+	0x20, //curve_3_a
+	0x00, //curve_4_b
+	0x20, //curve_4_a
+	0x02, //curve_5_b
+	0x1b, //curve_5_a
+	0x02, //curve_6_b
+	0x1b, //curve_6_a
+	0x02, //curve_7_b
+	0x1b, //curve_7_a
+	0x02, //curve_8_b
+	0x1b, //curve_8_a
+	0x09, //curve_9_b
+	0xa6, //curve_9_a
+	0x09, //curve10_b
+	0xa6, //curve10_a
+	0x09, //curve11_b
+	0xa6, //curve11_a
+	0x09, //curve12_b
+	0xa6, //curve12_a
+	0x00, //curve13_b
+	0x20, //curve13_a
+	0x00, //curve14_b
+	0x20, //curve14_a
+	0x00, //curve15_b
+	0x20, //curve15_a
+	0x00, //curve16_b
+	0x20, //curve16_a
+	0x00, //curve17_b
+	0x20, //curve17_a
+	0x00, //curve18_b
+	0x20, //curve18_a
+	0x00, //curve19_b
+	0x20, //curve19_a
+	0x00, //curve20_b
+	0x20, //curve20_a
+	0x00, //curve21_b
+	0x20, //curve21_a
+	0x00, //curve22_b
+	0x20, //curve22_a
+	0x00, //curve23_b
+	0x20, //curve23_a
+	0x00, //curve24_b
+	0xFF, //curve24_a
+	0x20, //ascr_skin_on strength 0 00000
+	0x67, //ascr_skin_cb
+	0xa9, //ascr_skin_cr
+	0x17, //ascr_dist_up
+	0x29, //ascr_dist_down
+	0x19, //ascr_dist_right
+	0x27, //ascr_dist_left
+	0x00, //ascr_div_up 20
+	0x59,
+	0x0b,
+	0x00, //ascr_div_down
+	0x31,
+	0xf4,
+	0x00, //ascr_div_right
+	0x51,
+	0xec,
+	0x00, //ascr_div_left
+	0x34,
+	0x83,
+	0xff, //ascr_skin_Rr
+	0x00, //ascr_skin_Rg
+	0x00, //ascr_skin_Rb
+	0xff, //ascr_skin_Yr
+	0xff, //ascr_skin_Yg
+	0x00, //ascr_skin_Yb
+	0xff, //ascr_skin_Mr
+	0x00, //ascr_skin_Mg
+	0xff, //ascr_skin_Mb
+	0xff, //ascr_skin_Wr
+	0xff, //ascr_skin_Wg
+	0xff, //ascr_skin_Wb
+	0x00, //ascr_Cr
+	0xff, //ascr_Rr
+	0xff, //ascr_Cg
+	0x00, //ascr_Rg
+	0xff, //ascr_Cb
+	0x00, //ascr_Rb
+	0xff, //ascr_Mr
+	0x00, //ascr_Gr
+	0x00, //ascr_Mg
+	0xff, //ascr_Gg
+	0xff, //ascr_Mb
+	0x00, //ascr_Gb
+	0xff, //ascr_Yr
+	0x00, //ascr_Br
+	0xff, //ascr_Yg
+	0x00, //ascr_Bg
+	0x00, //ascr_Yb
+	0xff, //ascr_Bb
+	0xff, //ascr_Wr
+	0x00, //ascr_Kr
+	0xff, //ascr_Wg
+	0x00, //ascr_Kg
+	0xff, //ascr_Wb
+	0x00, //ascr_Kb
+	//end
+
+};
+
+////////////////// CAMERA /////////////////////
+
+static char CAMERA_1[] = {
+	//start
+	0xEB,
+	0x01, //mdnie_en
+	0x00, //data_width mask 00 0000
+	0x03, //ascr_roi 1 ascr 00 1 0
+	0x32, //algo_roi 1 algo lce_roi 1 lce 00 1 0 00 1 0
+	0x00, //roi_ctrl 00
+	0x00, //roi0_x_start 12
+	0x00,
+	0x00, //roi0_x_end
+	0x00,
+	0x00, //roi0_y_start
+	0x00,
+	0x00, //roi0_y_end
+	0x00,
+	0x00, //roi1_x_strat
+	0x00,
+	0x00, //roi1_x_end
+	0x00,
+	0x00, //roi1_y_start
+	0x00,
+	0x00, //roi1_y_end
+	0x00,
+};
+
+static char CAMERA_2[] = {
+	0xEC,
+	0x18, //lce_gain 00 0000
+	0x24, //lce_color_gain 00 0000
+	0x10, //lce_scene_change_on scene_trans 0 0000
+	0x14, //lce_min_diff
+	0xb3, //lce_illum_gain
+	0x01, //lce_ref_offset 9
+	0x0e,
+	0x01, //lce_ref_gain 9
+	0x00,
+	0x66, //lce_block_size h v 0000 0000
+	0xfa, //lce_bright_th
+	0x2d, //lce_bin_size_ratio
+	0x03, //lce_dark_th 000
+	0x96, //lce_min_ref_offset
+	0x01, //nr sharp cs gamma 0000
+	0xff, //nr_mask_th
+	0x00, //sharpen_weight 10
+	0x40,
+	0x00, //sharpen_maxplus 11
+	0xa0,
+	0x00, //sharpen_maxminus 11
+	0xa0,
+	0x01, //cs_gain 10
+	0x00,
+	0x00, //curve_1_b
+	0x20, //curve_1_a
+	0x00, //curve_2_b
+	0x20, //curve_2_a
+	0x00, //curve_3_b
+	0x20, //curve_3_a
+	0x00, //curve_4_b
+	0x20, //curve_4_a
+	0x02, //curve_5_b
+	0x1b, //curve_5_a
+	0x02, //curve_6_b
+	0x1b, //curve_6_a
+	0x02, //curve_7_b
+	0x1b, //curve_7_a
+	0x02, //curve_8_b
+	0x1b, //curve_8_a
+	0x09, //curve_9_b
+	0xa6, //curve_9_a
+	0x09, //curve10_b
+	0xa6, //curve10_a
+	0x09, //curve11_b
+	0xa6, //curve11_a
+	0x09, //curve12_b
+	0xa6, //curve12_a
+	0x00, //curve13_b
+	0x20, //curve13_a
+	0x00, //curve14_b
+	0x20, //curve14_a
+	0x00, //curve15_b
+	0x20, //curve15_a
+	0x00, //curve16_b
+	0x20, //curve16_a
+	0x00, //curve17_b
+	0x20, //curve17_a
+	0x00, //curve18_b
+	0x20, //curve18_a
+	0x00, //curve19_b
+	0x20, //curve19_a
+	0x00, //curve20_b
+	0x20, //curve20_a
+	0x00, //curve21_b
+	0x20, //curve21_a
+	0x00, //curve22_b
+	0x20, //curve22_a
+	0x00, //curve23_b
+	0x20, //curve23_a
+	0x00, //curve24_b
+	0xFF, //curve24_a
+	0x20, //ascr_skin_on strength 0 00000
+	0x67, //ascr_skin_cb
+	0xa9, //ascr_skin_cr
+	0x17, //ascr_dist_up
+	0x29, //ascr_dist_down
+	0x19, //ascr_dist_right
+	0x27, //ascr_dist_left
+	0x00, //ascr_div_up 20
+	0x59,
+	0x0b,
+	0x00, //ascr_div_down
+	0x31,
+	0xf4,
+	0x00, //ascr_div_right
+	0x51,
+	0xec,
+	0x00, //ascr_div_left
+	0x34,
+	0x83,
+	0xff, //ascr_skin_Rr
+	0x00, //ascr_skin_Rg
+	0x00, //ascr_skin_Rb
+	0xff, //ascr_skin_Yr
+	0xff, //ascr_skin_Yg
+	0x00, //ascr_skin_Yb
+	0xff, //ascr_skin_Mr
+	0x00, //ascr_skin_Mg
+	0xff, //ascr_skin_Mb
+	0xff, //ascr_skin_Wr
+	0xff, //ascr_skin_Wg
+	0xff, //ascr_skin_Wb
+	0x00, //ascr_Cr
+	0xff, //ascr_Rr
+	0xff, //ascr_Cg
+	0x00, //ascr_Rg
+	0xff, //ascr_Cb
+	0x00, //ascr_Rb
+	0xff, //ascr_Mr
+	0x00, //ascr_Gr
+	0x00, //ascr_Mg
+	0xff, //ascr_Gg
+	0xff, //ascr_Mb
+	0x00, //ascr_Gb
+	0xff, //ascr_Yr
+	0x00, //ascr_Br
+	0xff, //ascr_Yg
+	0x00, //ascr_Bg
+	0x00, //ascr_Yb
+	0xff, //ascr_Bb
+	0xff, //ascr_Wr
+	0x00, //ascr_Kr
+	0xff, //ascr_Wg
+	0x00, //ascr_Kg
+	0xff, //ascr_Wb
+	0x00, //ascr_Kb
+	//end
+
+};
+
+char AUTO_CAMERA_1[] = {
+	//start
+	0xEB,
+	0x01, //mdnie_en
+	0x00, //data_width mask 00 0000
+	0x03, //ascr_roi 1 ascr 00 1 0
+	0x32, //algo_roi 1 algo lce_roi 1 lce 00 1 0 00 1 0
+	0x00, //roi_ctrl 00
+	0x00, //roi0_x_start 12
+	0x00,
+	0x00, //roi0_x_end
+	0x00,
+	0x00, //roi0_y_start
+	0x00,
+	0x00, //roi0_y_end
+	0x00,
+	0x00, //roi1_x_strat
+	0x00,
+	0x00, //roi1_x_end
+	0x00,
+	0x00, //roi1_y_start
+	0x00,
+	0x00, //roi1_y_end
+	0x00,
+};
+
+char AUTO_CAMERA_2[] = {
+	0xEC,
+	0x18, //lce_gain 00 0000
+	0x24, //lce_color_gain 00 0000
+	0x10, //lce_scene_change_on scene_trans 0 0000
+	0x14, //lce_min_diff
+	0xb3, //lce_illum_gain
+	0x01, //lce_ref_offset 9
+	0x0e,
+	0x01, //lce_ref_gain 9
+	0x00,
+	0x66, //lce_block_size h v 0000 0000
+	0xfa, //lce_bright_th
+	0x2d, //lce_bin_size_ratio
+	0x03, //lce_dark_th 000
+	0x96, //lce_min_ref_offset
+	0x01, //nr sharp cs gamma 0000
+	0xff, //nr_mask_th
+	0x00, //sharpen_weight 10
+	0x40,
+	0x00, //sharpen_maxplus 11
+	0xa0,
+	0x00, //sharpen_maxminus 11
+	0xa0,
+	0x01, //cs_gain 10
+	0x00,
+	0x00, //curve_1_b
+	0x20, //curve_1_a
+	0x00, //curve_2_b
+	0x20, //curve_2_a
+	0x00, //curve_3_b
+	0x20, //curve_3_a
+	0x00, //curve_4_b
+	0x20, //curve_4_a
+	0x02, //curve_5_b
+	0x1b, //curve_5_a
+	0x02, //curve_6_b
+	0x1b, //curve_6_a
+	0x02, //curve_7_b
+	0x1b, //curve_7_a
+	0x02, //curve_8_b
+	0x1b, //curve_8_a
+	0x09, //curve_9_b
+	0xa6, //curve_9_a
+	0x09, //curve10_b
+	0xa6, //curve10_a
+	0x09, //curve11_b
+	0xa6, //curve11_a
+	0x09, //curve12_b
+	0xa6, //curve12_a
+	0x00, //curve13_b
+	0x20, //curve13_a
+	0x00, //curve14_b
+	0x20, //curve14_a
+	0x00, //curve15_b
+	0x20, //curve15_a
+	0x00, //curve16_b
+	0x20, //curve16_a
+	0x00, //curve17_b
+	0x20, //curve17_a
+	0x00, //curve18_b
+	0x20, //curve18_a
+	0x00, //curve19_b
+	0x20, //curve19_a
+	0x00, //curve20_b
+	0x20, //curve20_a
+	0x00, //curve21_b
+	0x20, //curve21_a
+	0x00, //curve22_b
+	0x20, //curve22_a
+	0x00, //curve23_b
+	0x20, //curve23_a
+	0x00, //curve24_b
+	0xFF, //curve24_a
+	0x30, //ascr_skin_on strength 0 00000
+	0x67, //ascr_skin_cb
+	0xa9, //ascr_skin_cr
+	0x17, //ascr_dist_up
+	0x29, //ascr_dist_down
+	0x19, //ascr_dist_right
+	0x27, //ascr_dist_left
+	0x00, //ascr_div_up 20
+	0x59,
+	0x0b,
+	0x00, //ascr_div_down
+	0x31,
+	0xf4,
+	0x00, //ascr_div_right
+	0x51,
+	0xec,
+	0x00, //ascr_div_left
+	0x34,
+	0x83,
+	0xff, //ascr_skin_Rr
+	0x50, //ascr_skin_Rg
+	0x60, //ascr_skin_Rb
+	0xff, //ascr_skin_Yr
+	0xff, //ascr_skin_Yg
+	0x00, //ascr_skin_Yb
+	0xff, //ascr_skin_Mr
+	0x00, //ascr_skin_Mg
+	0xff, //ascr_skin_Mb
+	0xff, //ascr_skin_Wr
+	0xff, //ascr_skin_Wg
+	0xff, //ascr_skin_Wb
+	0x00, //ascr_Cr
+	0xff, //ascr_Rr
+	0xff, //ascr_Cg
+	0x00, //ascr_Rg
+	0xff, //ascr_Cb
+	0x00, //ascr_Rb
+	0xff, //ascr_Mr
+	0x00, //ascr_Gr
+	0x00, //ascr_Mg
+	0xff, //ascr_Gg
+	0xff, //ascr_Mb
+	0x00, //ascr_Gb
+	0xff, //ascr_Yr
+	0x00, //ascr_Br
+	0xff, //ascr_Yg
+	0x00, //ascr_Bg
+	0x00, //ascr_Yb
+	0xff, //ascr_Bb
+	0xff, //ascr_Wr
+	0x00, //ascr_Kr
+	0xff, //ascr_Wg
+	0x00, //ascr_Kg
+	0xff, //ascr_Wb
+	0x00, //ascr_Kb
+	//end
+
+};
+
+
+static char CAMERA_OUTDOOR_1[] = {
+	0xEB,
+	0x01, //mdnie_en
+	0x00, //data_width mask 00 0000
+	0x03, //ascr_roi 1 ascr 00 1 0
+	0x32, //algo_roi 1 algo lce_roi 1 lce 00 1 0 00 1 0
+	0x00, //roi_ctrl 00
+	0x00, //roi0_x_start 12
+	0x00,
+	0x00, //roi0_x_end
+	0x00,
+	0x00, //roi0_y_start
+	0x00,
+	0x00, //roi0_y_end
+	0x00,
+	0x00, //roi1_x_strat
+	0x00,
+	0x00, //roi1_x_end
+	0x00,
+	0x00, //roi1_y_start
+	0x00,
+	0x00, //roi1_y_end
+	0x00,
+
+};
+
+static char CAMERA_OUTDOOR_2[] = {
+	0xEC,
+	0x18, //lce_gain 00 0000
+	0x24, //lce_color_gain 00 0000
+	0x10, //lce_scene_change_on scene_trans 0 0000
+	0x14, //lce_min_diff
+	0xb3, //lce_illum_gain
+	0x01, //lce_ref_offset 9
+	0x0e,
+	0x01, //lce_ref_gain 9
+	0x00,
+	0x66, //lce_block_size h v 0000 0000
+	0xfa, //lce_bright_th
+	0x2d, //lce_bin_size_ratio
+	0x03, //lce_dark_th 000
+	0x96, //lce_min_ref_offset
+	0x07, //nr sharp cs gamma 0000
+	0xff, //nr_mask_th
+	0x00, //sharpen_weight 10
+	0x10,
+	0x00, //sharpen_maxplus 11
+	0xa0,
+	0x00, //sharpen_maxminus 11
+	0xa0,
+	0x01, //cs_gain 10
+	0x00,
+	0x00, //curve_1_b
+	0x20, //curve_1_a
+	0x00, //curve_2_b
+	0x20, //curve_2_a
+	0x00, //curve_3_b
+	0x20, //curve_3_a
+	0x00, //curve_4_b
+	0x20, //curve_4_a
+	0x02, //curve_5_b
+	0x1b, //curve_5_a
+	0x02, //curve_6_b
+	0x1b, //curve_6_a
+	0x02, //curve_7_b
+	0x1b, //curve_7_a
+	0x02, //curve_8_b
+	0x1b, //curve_8_a
+	0x09, //curve_9_b
+	0xa6, //curve_9_a
+	0x09, //curve10_b
+	0xa6, //curve10_a
+	0x09, //curve11_b
+	0xa6, //curve11_a
+	0x09, //curve12_b
+	0xa6, //curve12_a
+	0x00, //curve13_b
+	0x20, //curve13_a
+	0x00, //curve14_b
+	0x20, //curve14_a
+	0x00, //curve15_b
+	0x20, //curve15_a
+	0x00, //curve16_b
+	0x20, //curve16_a
+	0x00, //curve17_b
+	0x20, //curve17_a
+	0x00, //curve18_b
+	0x20, //curve18_a
+	0x00, //curve19_b
+	0x20, //curve19_a
+	0x00, //curve20_b
+	0x20, //curve20_a
+	0x00, //curve21_b
+	0x20, //curve21_a
+	0x00, //curve22_b
+	0x20, //curve22_a
+	0x00, //curve23_b
+	0x20, //curve23_a
+	0x00, //curve24_b
+	0xFF, //curve24_a
+	0x2c, //ascr_skin_on strength 0 00000
+	0x67, //ascr_skin_cb
+	0xa9, //ascr_skin_cr
+	0x4e, //ascr_dist_up
+	0x29, //ascr_dist_down
+	0x19, //ascr_dist_right
+	0x5f, //ascr_dist_left
+	0x00, //ascr_div_up 20
+	0x1a,
+	0x74,
+	0x00, //ascr_div_down
+	0x31,
+	0xf4,
+	0x00, //ascr_div_right
+	0x51,
+	0xec,
+	0x00, //ascr_div_left
+	0x15,
+	0x8f,
+	0xff, //ascr_skin_Rr
+	0x20, //ascr_skin_Rg
+	0x20, //ascr_skin_Rb
+	0xff, //ascr_skin_Yr
+	0xff, //ascr_skin_Yg
+	0x00, //ascr_skin_Yb
+	0xff, //ascr_skin_Mr
+	0x00, //ascr_skin_Mg
+	0xff, //ascr_skin_Mb
+	0xff, //ascr_skin_Wr
+	0xff, //ascr_skin_Wg
+	0xff, //ascr_skin_Wb
+	0x00, //ascr_Cr
+	0xff, //ascr_Rr
+	0xff, //ascr_Cg
+	0x00, //ascr_Rg
+	0xff, //ascr_Cb
+	0x00, //ascr_Rb
+	0xff, //ascr_Mr
+	0x00, //ascr_Gr
+	0x00, //ascr_Mg
+	0xff, //ascr_Gg
+	0xff, //ascr_Mb
+	0x00, //ascr_Gb
+	0xff, //ascr_Yr
+	0x00, //ascr_Br
+	0xff, //ascr_Yg
+	0x00, //ascr_Bg
+	0x00, //ascr_Yb
+	0xff, //ascr_Bb
+	0xfc, //ascr_Wr
+	0x00, //ascr_Kr
+	0xff, //ascr_Wg
+	0x00, //ascr_Kg
+	0xfd, //ascr_Wb
+	0x00, //ascr_Kb
+	//end
+
+};
+
+static char COLD_1[] = {
+	0xEB,
+	0x01, //mdnie_en
+	0x00, //data_width mask 00 0000
+	0x03, //ascr_roi 1 ascr 00 1 0
+	0x32, //algo_roi 1 algo lce_roi 1 lce 00 1 0 00 1 0
+	0x00, //roi_ctrl 00
+	0x00, //roi0_x_start 12
+	0x00,
+	0x00, //roi0_x_end
+	0x00,
+	0x00, //roi0_y_start
+	0x00,
+	0x00, //roi0_y_end
+	0x00,
+	0x00, //roi1_x_strat
+	0x00,
+	0x00, //roi1_x_end
+	0x00,
+	0x00, //roi1_y_start
+	0x00,
+	0x00, //roi1_y_end
+	0x00,
+
+};
+
+static char COLD_2[] = {
+	0xEC,
+	0x18, //lce_gain 00 0000
+	0x24, //lce_color_gain 00 0000
+	0x10, //lce_scene_change_on scene_trans 0 0000
+	0x14, //lce_min_diff
+	0xb3, //lce_illum_gain
+	0x01, //lce_ref_offset 9
+	0x0e,
+	0x01, //lce_ref_gain 9
+	0x00,
+	0x66, //lce_block_size h v 0000 0000
+	0xfa, //lce_bright_th
+	0x2d, //lce_bin_size_ratio
+	0x03, //lce_dark_th 000
+	0x96, //lce_min_ref_offset
+	0x07, //nr sharp cs gamma 0000
+	0xff, //nr_mask_th
+	0x00, //sharpen_weight 10
+	0x10,
+	0x00, //sharpen_maxplus 11
+	0xa0,
+	0x00, //sharpen_maxminus 11
+	0xa0,
+	0x01, //cs_gain 10
+	0x00,
+	0x00, //curve_1_b
+	0x20, //curve_1_a
+	0x00, //curve_2_b
+	0x20, //curve_2_a
+	0x00, //curve_3_b
+	0x20, //curve_3_a
+	0x00, //curve_4_b
+	0x20, //curve_4_a
+	0x02, //curve_5_b
+	0x1b, //curve_5_a
+	0x02, //curve_6_b
+	0x1b, //curve_6_a
+	0x02, //curve_7_b
+	0x1b, //curve_7_a
+	0x02, //curve_8_b
+	0x1b, //curve_8_a
+	0x09, //curve_9_b
+	0xa6, //curve_9_a
+	0x09, //curve10_b
+	0xa6, //curve10_a
+	0x09, //curve11_b
+	0xa6, //curve11_a
+	0x09, //curve12_b
+	0xa6, //curve12_a
+	0x00, //curve13_b
+	0x20, //curve13_a
+	0x00, //curve14_b
+	0x20, //curve14_a
+	0x00, //curve15_b
+	0x20, //curve15_a
+	0x00, //curve16_b
+	0x20, //curve16_a
+	0x00, //curve17_b
+	0x20, //curve17_a
+	0x00, //curve18_b
+	0x20, //curve18_a
+	0x00, //curve19_b
+	0x20, //curve19_a
+	0x00, //curve20_b
+	0x20, //curve20_a
+	0x00, //curve21_b
+	0x20, //curve21_a
+	0x00, //curve22_b
+	0x20, //curve22_a
+	0x00, //curve23_b
+	0x20, //curve23_a
+	0x00, //curve24_b
+	0xFF, //curve24_a
+	0x2c, //ascr_skin_on strength 0 00000
+	0x67, //ascr_skin_cb
+	0xa9, //ascr_skin_cr
+	0x4e, //ascr_dist_up
+	0x29, //ascr_dist_down
+	0x19, //ascr_dist_right
+	0x5f, //ascr_dist_left
+	0x00, //ascr_div_up 20
+	0x1a,
+	0x74,
+	0x00, //ascr_div_down
+	0x31,
+	0xf4,
+	0x00, //ascr_div_right
+	0x51,
+	0xec,
+	0x00, //ascr_div_left
+	0x15,
+	0x8f,
+	0xff, //ascr_skin_Rr
+	0x20, //ascr_skin_Rg
+	0x20, //ascr_skin_Rb
+	0xff, //ascr_skin_Yr
+	0xff, //ascr_skin_Yg
+	0x00, //ascr_skin_Yb
+	0xff, //ascr_skin_Mr
+	0x00, //ascr_skin_Mg
+	0xff, //ascr_skin_Mb
+	0xff, //ascr_skin_Wr
+	0xff, //ascr_skin_Wg
+	0xff, //ascr_skin_Wb
+	0x00, //ascr_Cr
+	0xff, //ascr_Rr
+	0xff, //ascr_Cg
+	0x00, //ascr_Rg
+	0xff, //ascr_Cb
+	0x00, //ascr_Rb
+	0xff, //ascr_Mr
+	0x00, //ascr_Gr
+	0x00, //ascr_Mg
+	0xff, //ascr_Gg
+	0xff, //ascr_Mb
+	0x00, //ascr_Gb
+	0xff, //ascr_Yr
+	0x00, //ascr_Br
+	0xff, //ascr_Yg
+	0x00, //ascr_Bg
+	0x00, //ascr_Yb
+	0xff, //ascr_Bb
+	0xfc, //ascr_Wr
+	0x00, //ascr_Kr
+	0xff, //ascr_Wg
+	0x00, //ascr_Kg
+	0xfd, //ascr_Wb
+	0x00, //ascr_Kb
+	//end
+
+};
+
+static char COLD_OUTDOOR_1[] = {
+	0xEB,
+	0x01, //mdnie_en
+	0x00, //data_width mask 00 0000
+	0x03, //ascr_roi 1 ascr 00 1 0
+	0x32, //algo_roi 1 algo lce_roi 1 lce 00 1 0 00 1 0
+	0x00, //roi_ctrl 00
+	0x00, //roi0_x_start 12
+	0x00,
+	0x00, //roi0_x_end
+	0x00,
+	0x00, //roi0_y_start
+	0x00,
+	0x00, //roi0_y_end
+	0x00,
+	0x00, //roi1_x_strat
+	0x00,
+	0x00, //roi1_x_end
+	0x00,
+	0x00, //roi1_y_start
+	0x00,
+	0x00, //roi1_y_end
+	0x00,
+
+};
+
+static char COLD_OUTDOOR_2[] = {
+	0xEC,
+	0x18, //lce_gain 00 0000
+	0x24, //lce_color_gain 00 0000
+	0x10, //lce_scene_change_on scene_trans 0 0000
+	0x14, //lce_min_diff
+	0xb3, //lce_illum_gain
+	0x01, //lce_ref_offset 9
+	0x0e,
+	0x01, //lce_ref_gain 9
+	0x00,
+	0x66, //lce_block_size h v 0000 0000
+	0xfa, //lce_bright_th
+	0x2d, //lce_bin_size_ratio
+	0x03, //lce_dark_th 000
+	0x96, //lce_min_ref_offset
+	0x07, //nr sharp cs gamma 0000
+	0xff, //nr_mask_th
+	0x00, //sharpen_weight 10
+	0x10,
+	0x00, //sharpen_maxplus 11
+	0xa0,
+	0x00, //sharpen_maxminus 11
+	0xa0,
+	0x01, //cs_gain 10
+	0x00,
+	0x00, //curve_1_b
+	0x20, //curve_1_a
+	0x00, //curve_2_b
+	0x20, //curve_2_a
+	0x00, //curve_3_b
+	0x20, //curve_3_a
+	0x00, //curve_4_b
+	0x20, //curve_4_a
+	0x02, //curve_5_b
+	0x1b, //curve_5_a
+	0x02, //curve_6_b
+	0x1b, //curve_6_a
+	0x02, //curve_7_b
+	0x1b, //curve_7_a
+	0x02, //curve_8_b
+	0x1b, //curve_8_a
+	0x09, //curve_9_b
+	0xa6, //curve_9_a
+	0x09, //curve10_b
+	0xa6, //curve10_a
+	0x09, //curve11_b
+	0xa6, //curve11_a
+	0x09, //curve12_b
+	0xa6, //curve12_a
+	0x00, //curve13_b
+	0x20, //curve13_a
+	0x00, //curve14_b
+	0x20, //curve14_a
+	0x00, //curve15_b
+	0x20, //curve15_a
+	0x00, //curve16_b
+	0x20, //curve16_a
+	0x00, //curve17_b
+	0x20, //curve17_a
+	0x00, //curve18_b
+	0x20, //curve18_a
+	0x00, //curve19_b
+	0x20, //curve19_a
+	0x00, //curve20_b
+	0x20, //curve20_a
+	0x00, //curve21_b
+	0x20, //curve21_a
+	0x00, //curve22_b
+	0x20, //curve22_a
+	0x00, //curve23_b
+	0x20, //curve23_a
+	0x00, //curve24_b
+	0xFF, //curve24_a
+	0x2c, //ascr_skin_on strength 0 00000
+	0x67, //ascr_skin_cb
+	0xa9, //ascr_skin_cr
+	0x4e, //ascr_dist_up
+	0x29, //ascr_dist_down
+	0x19, //ascr_dist_right
+	0x5f, //ascr_dist_left
+	0x00, //ascr_div_up 20
+	0x1a,
+	0x74,
+	0x00, //ascr_div_down
+	0x31,
+	0xf4,
+	0x00, //ascr_div_right
+	0x51,
+	0xec,
+	0x00, //ascr_div_left
+	0x15,
+	0x8f,
+	0xff, //ascr_skin_Rr
+	0x20, //ascr_skin_Rg
+	0x20, //ascr_skin_Rb
+	0xff, //ascr_skin_Yr
+	0xff, //ascr_skin_Yg
+	0x00, //ascr_skin_Yb
+	0xff, //ascr_skin_Mr
+	0x00, //ascr_skin_Mg
+	0xff, //ascr_skin_Mb
+	0xff, //ascr_skin_Wr
+	0xff, //ascr_skin_Wg
+	0xff, //ascr_skin_Wb
+	0x00, //ascr_Cr
+	0xff, //ascr_Rr
+	0xff, //ascr_Cg
+	0x00, //ascr_Rg
+	0xff, //ascr_Cb
+	0x00, //ascr_Rb
+	0xff, //ascr_Mr
+	0x00, //ascr_Gr
+	0x00, //ascr_Mg
+	0xff, //ascr_Gg
+	0xff, //ascr_Mb
+	0x00, //ascr_Gb
+	0xff, //ascr_Yr
+	0x00, //ascr_Br
+	0xff, //ascr_Yg
+	0x00, //ascr_Bg
+	0x00, //ascr_Yb
+	0xff, //ascr_Bb
+	0xfc, //ascr_Wr
+	0x00, //ascr_Kr
+	0xff, //ascr_Wg
+	0x00, //ascr_Kg
+	0xfd, //ascr_Wb
+	0x00, //ascr_Kb
+	//end
+
+};
+
+static char WARM_1[] = {
+	0xEB,
+	0x01, //mdnie_en
+	0x00, //data_width mask 00 0000
+	0x03, //ascr_roi 1 ascr 00 1 0
+	0x32, //algo_roi 1 algo lce_roi 1 lce 00 1 0 00 1 0
+	0x00, //roi_ctrl 00
+	0x00, //roi0_x_start 12
+	0x00,
+	0x00, //roi0_x_end
+	0x00,
+	0x00, //roi0_y_start
+	0x00,
+	0x00, //roi0_y_end
+	0x00,
+	0x00, //roi1_x_strat
+	0x00,
+	0x00, //roi1_x_end
+	0x00,
+	0x00, //roi1_y_start
+	0x00,
+	0x00, //roi1_y_end
+	0x00,
+
+};
+
+static char WARM_2[] = {
+	0xEC,
+	0x18, //lce_gain 00 0000
+	0x24, //lce_color_gain 00 0000
+	0x10, //lce_scene_change_on scene_trans 0 0000
+	0x14, //lce_min_diff
+	0xb3, //lce_illum_gain
+	0x01, //lce_ref_offset 9
+	0x0e,
+	0x01, //lce_ref_gain 9
+	0x00,
+	0x66, //lce_block_size h v 0000 0000
+	0xfa, //lce_bright_th
+	0x2d, //lce_bin_size_ratio
+	0x03, //lce_dark_th 000
+	0x96, //lce_min_ref_offset
+	0x07, //nr sharp cs gamma 0000
+	0xff, //nr_mask_th
+	0x00, //sharpen_weight 10
+	0x10,
+	0x00, //sharpen_maxplus 11
+	0xa0,
+	0x00, //sharpen_maxminus 11
+	0xa0,
+	0x01, //cs_gain 10
+	0x00,
+	0x00, //curve_1_b
+	0x20, //curve_1_a
+	0x00, //curve_2_b
+	0x20, //curve_2_a
+	0x00, //curve_3_b
+	0x20, //curve_3_a
+	0x00, //curve_4_b
+	0x20, //curve_4_a
+	0x02, //curve_5_b
+	0x1b, //curve_5_a
+	0x02, //curve_6_b
+	0x1b, //curve_6_a
+	0x02, //curve_7_b
+	0x1b, //curve_7_a
+	0x02, //curve_8_b
+	0x1b, //curve_8_a
+	0x09, //curve_9_b
+	0xa6, //curve_9_a
+	0x09, //curve10_b
+	0xa6, //curve10_a
+	0x09, //curve11_b
+	0xa6, //curve11_a
+	0x09, //curve12_b
+	0xa6, //curve12_a
+	0x00, //curve13_b
+	0x20, //curve13_a
+	0x00, //curve14_b
+	0x20, //curve14_a
+	0x00, //curve15_b
+	0x20, //curve15_a
+	0x00, //curve16_b
+	0x20, //curve16_a
+	0x00, //curve17_b
+	0x20, //curve17_a
+	0x00, //curve18_b
+	0x20, //curve18_a
+	0x00, //curve19_b
+	0x20, //curve19_a
+	0x00, //curve20_b
+	0x20, //curve20_a
+	0x00, //curve21_b
+	0x20, //curve21_a
+	0x00, //curve22_b
+	0x20, //curve22_a
+	0x00, //curve23_b
+	0x20, //curve23_a
+	0x00, //curve24_b
+	0xFF, //curve24_a
+	0x2c, //ascr_skin_on strength 0 00000
+	0x67, //ascr_skin_cb
+	0xa9, //ascr_skin_cr
+	0x4e, //ascr_dist_up
+	0x29, //ascr_dist_down
+	0x19, //ascr_dist_right
+	0x5f, //ascr_dist_left
+	0x00, //ascr_div_up 20
+	0x1a,
+	0x74,
+	0x00, //ascr_div_down
+	0x31,
+	0xf4,
+	0x00, //ascr_div_right
+	0x51,
+	0xec,
+	0x00, //ascr_div_left
+	0x15,
+	0x8f,
+	0xff, //ascr_skin_Rr
+	0x20, //ascr_skin_Rg
+	0x20, //ascr_skin_Rb
+	0xff, //ascr_skin_Yr
+	0xff, //ascr_skin_Yg
+	0x00, //ascr_skin_Yb
+	0xff, //ascr_skin_Mr
+	0x00, //ascr_skin_Mg
+	0xff, //ascr_skin_Mb
+	0xff, //ascr_skin_Wr
+	0xff, //ascr_skin_Wg
+	0xff, //ascr_skin_Wb
+	0x00, //ascr_Cr
+	0xff, //ascr_Rr
+	0xff, //ascr_Cg
+	0x00, //ascr_Rg
+	0xff, //ascr_Cb
+	0x00, //ascr_Rb
+	0xff, //ascr_Mr
+	0x00, //ascr_Gr
+	0x00, //ascr_Mg
+	0xff, //ascr_Gg
+	0xff, //ascr_Mb
+	0x00, //ascr_Gb
+	0xff, //ascr_Yr
+	0x00, //ascr_Br
+	0xff, //ascr_Yg
+	0x00, //ascr_Bg
+	0x00, //ascr_Yb
+	0xff, //ascr_Bb
+	0xfc, //ascr_Wr
+	0x00, //ascr_Kr
+	0xff, //ascr_Wg
+	0x00, //ascr_Kg
+	0xfd, //ascr_Wb
+	0x00, //ascr_Kb
+	//end
+
+};
+
+static char WARM_OUTDOOR_1[] = {
+	0xEB,
+	0x01, //mdnie_en
+	0x00, //data_width mask 00 0000
+	0x03, //ascr_roi 1 ascr 00 1 0
+	0x32, //algo_roi 1 algo lce_roi 1 lce 00 1 0 00 1 0
+	0x00, //roi_ctrl 00
+	0x00, //roi0_x_start 12
+	0x00,
+	0x00, //roi0_x_end
+	0x00,
+	0x00, //roi0_y_start
+	0x00,
+	0x00, //roi0_y_end
+	0x00,
+	0x00, //roi1_x_strat
+	0x00,
+	0x00, //roi1_x_end
+	0x00,
+	0x00, //roi1_y_start
+	0x00,
+	0x00, //roi1_y_end
+	0x00,
+
+};
+
+static char WARM_OUTDOOR_2[] = {
+	0xEC,
+	0x18, //lce_gain 00 0000
+	0x24, //lce_color_gain 00 0000
+	0x10, //lce_scene_change_on scene_trans 0 0000
+	0x14, //lce_min_diff
+	0xb3, //lce_illum_gain
+	0x01, //lce_ref_offset 9
+	0x0e,
+	0x01, //lce_ref_gain 9
+	0x00,
+	0x66, //lce_block_size h v 0000 0000
+	0xfa, //lce_bright_th
+	0x2d, //lce_bin_size_ratio
+	0x03, //lce_dark_th 000
+	0x96, //lce_min_ref_offset
+	0x07, //nr sharp cs gamma 0000
+	0xff, //nr_mask_th
+	0x00, //sharpen_weight 10
+	0x10,
+	0x00, //sharpen_maxplus 11
+	0xa0,
+	0x00, //sharpen_maxminus 11
+	0xa0,
+	0x01, //cs_gain 10
+	0x00,
+	0x00, //curve_1_b
+	0x20, //curve_1_a
+	0x00, //curve_2_b
+	0x20, //curve_2_a
+	0x00, //curve_3_b
+	0x20, //curve_3_a
+	0x00, //curve_4_b
+	0x20, //curve_4_a
+	0x02, //curve_5_b
+	0x1b, //curve_5_a
+	0x02, //curve_6_b
+	0x1b, //curve_6_a
+	0x02, //curve_7_b
+	0x1b, //curve_7_a
+	0x02, //curve_8_b
+	0x1b, //curve_8_a
+	0x09, //curve_9_b
+	0xa6, //curve_9_a
+	0x09, //curve10_b
+	0xa6, //curve10_a
+	0x09, //curve11_b
+	0xa6, //curve11_a
+	0x09, //curve12_b
+	0xa6, //curve12_a
+	0x00, //curve13_b
+	0x20, //curve13_a
+	0x00, //curve14_b
+	0x20, //curve14_a
+	0x00, //curve15_b
+	0x20, //curve15_a
+	0x00, //curve16_b
+	0x20, //curve16_a
+	0x00, //curve17_b
+	0x20, //curve17_a
+	0x00, //curve18_b
+	0x20, //curve18_a
+	0x00, //curve19_b
+	0x20, //curve19_a
+	0x00, //curve20_b
+	0x20, //curve20_a
+	0x00, //curve21_b
+	0x20, //curve21_a
+	0x00, //curve22_b
+	0x20, //curve22_a
+	0x00, //curve23_b
+	0x20, //curve23_a
+	0x00, //curve24_b
+	0xFF, //curve24_a
+	0x2c, //ascr_skin_on strength 0 00000
+	0x67, //ascr_skin_cb
+	0xa9, //ascr_skin_cr
+	0x4e, //ascr_dist_up
+	0x29, //ascr_dist_down
+	0x19, //ascr_dist_right
+	0x5f, //ascr_dist_left
+	0x00, //ascr_div_up 20
+	0x1a,
+	0x74,
+	0x00, //ascr_div_down
+	0x31,
+	0xf4,
+	0x00, //ascr_div_right
+	0x51,
+	0xec,
+	0x00, //ascr_div_left
+	0x15,
+	0x8f,
+	0xff, //ascr_skin_Rr
+	0x20, //ascr_skin_Rg
+	0x20, //ascr_skin_Rb
+	0xff, //ascr_skin_Yr
+	0xff, //ascr_skin_Yg
+	0x00, //ascr_skin_Yb
+	0xff, //ascr_skin_Mr
+	0x00, //ascr_skin_Mg
+	0xff, //ascr_skin_Mb
+	0xff, //ascr_skin_Wr
+	0xff, //ascr_skin_Wg
+	0xff, //ascr_skin_Wb
+	0x00, //ascr_Cr
+	0xff, //ascr_Rr
+	0xff, //ascr_Cg
+	0x00, //ascr_Rg
+	0xff, //ascr_Cb
+	0x00, //ascr_Rb
+	0xff, //ascr_Mr
+	0x00, //ascr_Gr
+	0x00, //ascr_Mg
+	0xff, //ascr_Gg
+	0xff, //ascr_Mb
+	0x00, //ascr_Gb
+	0xff, //ascr_Yr
+	0x00, //ascr_Br
+	0xff, //ascr_Yg
+	0x00, //ascr_Bg
+	0x00, //ascr_Yb
+	0xff, //ascr_Bb
+	0xfc, //ascr_Wr
+	0x00, //ascr_Kr
+	0xff, //ascr_Wg
+	0x00, //ascr_Kg
+	0xfd, //ascr_Wb
+	0x00, //ascr_Kb
+	//end
+
+};
+
+static char NEGATIVE_1[] = {
+	//start
+	0xEB,
+	0x01, //mdnie_en
+	0x00, //data_width mask 00 0000
+	0x03, //ascr_roi 1 ascr 00 1 0
+	0x02, //algo_roi 1 algo lce_roi 1 lce 00 1 0 00 1 0
+	0x00, //roi_ctrl 00
+	0x00, //roi0_x_start 12
+	0x00,
+	0x00, //roi0_x_end
+	0x00,
+	0x00, //roi0_y_start
+	0x00,
+	0x00, //roi0_y_end
+	0x00,
+	0x00, //roi1_x_strat
+	0x00,
+	0x00, //roi1_x_end
+	0x00,
+	0x00, //roi1_y_start
+	0x00,
+	0x00, //roi1_y_end
+	0x00,
+};
+
+static char NEGATIVE_2[] = {
+	0xEC,
+	0x18, //lce_gain 00 0000
+	0x24, //lce_color_gain 00 0000
+	0x10, //lce_scene_change_on scene_trans 0 0000
+	0x14, //lce_min_diff
+	0xb3, //lce_illum_gain
+	0x01, //lce_ref_offset 9
+	0x0e,
+	0x01, //lce_ref_gain 9
+	0x00,
+	0x66, //lce_block_size h v 0000 0000
+	0xfa, //lce_bright_th
+	0x2d, //lce_bin_size_ratio
+	0x03, //lce_dark_th 000
+	0x96, //lce_min_ref_offset
+	0x00, //nr sharp cs gamma 0000
+	0xff, //nr_mask_th
+	0x00, //sharpen_weight 10
+	0x00,
+	0x07, //sharpen_maxplus 11
+	0xff,
+	0x07, //sharpen_maxminus 11
+	0xff,
+	0x01, //cs_gain 10
+	0x00,
+	0x00, //curve_1_b
+	0x20, //curve_1_a
+	0x00, //curve_2_b
+	0x20, //curve_2_a
+	0x00, //curve_3_b
+	0x20, //curve_3_a
+	0x00, //curve_4_b
+	0x20, //curve_4_a
+	0x02, //curve_5_b
+	0x1b, //curve_5_a
+	0x02, //curve_6_b
+	0x1b, //curve_6_a
+	0x02, //curve_7_b
+	0x1b, //curve_7_a
+	0x02, //curve_8_b
+	0x1b, //curve_8_a
+	0x09, //curve_9_b
+	0xa6, //curve_9_a
+	0x09, //curve10_b
+	0xa6, //curve10_a
+	0x09, //curve11_b
+	0xa6, //curve11_a
+	0x09, //curve12_b
+	0xa6, //curve12_a
+	0x00, //curve13_b
+	0x20, //curve13_a
+	0x00, //curve14_b
+	0x20, //curve14_a
+	0x00, //curve15_b
+	0x20, //curve15_a
+	0x00, //curve16_b
+	0x20, //curve16_a
+	0x00, //curve17_b
+	0x20, //curve17_a
+	0x00, //curve18_b
+	0x20, //curve18_a
+	0x00, //curve19_b
+	0x20, //curve19_a
+	0x00, //curve20_b
+	0x20, //curve20_a
+	0x00, //curve21_b
+	0x20, //curve21_a
+	0x00, //curve22_b
+	0x20, //curve22_a
+	0x00, //curve23_b
+	0x20, //curve23_a
+	0x00, //curve24_b
+	0xFF, //curve24_a
+	0x20, //ascr_skin_on strength 0 00000
+	0x67, //ascr_skin_cb
+	0xa9, //ascr_skin_cr
+	0x0c, //ascr_dist_up
+	0x0c, //ascr_dist_down
+	0x0c, //ascr_dist_right
+	0x0c, //ascr_dist_left
+	0x00, //ascr_div_up 20
+	0xaa,
+	0xab,
+	0x00, //ascr_div_down
+	0xaa,
+	0xab,
+	0x00, //ascr_div_right
+	0xaa,
+	0xab,
+	0x00, //ascr_div_left
+	0xaa,
+	0xab,
+	0x00, //ascr_skin_Rr
+	0xff, //ascr_skin_Rg
+	0xff, //ascr_skin_Rb
+	0x00, //ascr_skin_Yr
+	0x00, //ascr_skin_Yg
+	0xff, //ascr_skin_Yb
+	0x00, //ascr_skin_Mr
+	0xff, //ascr_skin_Mg
+	0x00, //ascr_skin_Mb
+	0x00, //ascr_skin_Wr
+	0x00, //ascr_skin_Wg
+	0x00, //ascr_skin_Wb
+	0xff, //ascr_Cr
+	0x00, //ascr_Rr
+	0x00, //ascr_Cg
+	0xff, //ascr_Rg
+	0x00, //ascr_Cb
+	0xff, //ascr_Rb
+	0x00, //ascr_Mr
+	0xff, //ascr_Gr
+	0xff, //ascr_Mg
+	0x00, //ascr_Gg
+	0x00, //ascr_Mb
+	0xff, //ascr_Gb
+	0x00, //ascr_Yr
+	0xff, //ascr_Br
+	0x00, //ascr_Yg
+	0xff, //ascr_Bg
+	0xff, //ascr_Yb
+	0x00, //ascr_Bb
+	0x00, //ascr_Wr
+	0xff, //ascr_Kr
+	0x00, //ascr_Wg
+	0xff, //ascr_Kg
+	0x00, //ascr_Wb
+	0xff, //ascr_Kb
+	//end
+
+};
+
+static char OUTDOOR_VIDEO_1[] = {
+	0xEB,
+	0x01, //mdnie_en
+	0x00, //data_width mask 00 0000
+	0x03, //ascr_roi 1 ascr 00 1 0
+	0x32, //algo_roi 1 algo lce_roi 1 lce 00 1 0 00 1 0
+	0x00, //roi_ctrl 00
+	0x00, //roi0_x_start 12
+	0x00,
+	0x00, //roi0_x_end
+	0x00,
+	0x00, //roi0_y_start
+	0x00,
+	0x00, //roi0_y_end
+	0x00,
+	0x00, //roi1_x_strat
+	0x00,
+	0x00, //roi1_x_end
+	0x00,
+	0x00, //roi1_y_start
+	0x00,
+	0x00, //roi1_y_end
+	0x00,
+
+};
+
+static char OUTDOOR_VIDEO_2[] = {
+	0xEC,
+	0x18, //lce_gain 00 0000
+	0x24, //lce_color_gain 00 0000
+	0x10, //lce_scene_change_on scene_trans 0 0000
+	0x14, //lce_min_diff
+	0xb3, //lce_illum_gain
+	0x01, //lce_ref_offset 9
+	0x0e,
+	0x01, //lce_ref_gain 9
+	0x00,
+	0x66, //lce_block_size h v 0000 0000
+	0xfa, //lce_bright_th
+	0x2d, //lce_bin_size_ratio
+	0x03, //lce_dark_th 000
+	0x96, //lce_min_ref_offset
+	0x07, //nr sharp cs gamma 0000
+	0xff, //nr_mask_th
+	0x00, //sharpen_weight 10
+	0x10,
+	0x00, //sharpen_maxplus 11
+	0xa0,
+	0x00, //sharpen_maxminus 11
+	0xa0,
+	0x01, //cs_gain 10
+	0x00,
+	0x00, //curve_1_b
+	0x20, //curve_1_a
+	0x00, //curve_2_b
+	0x20, //curve_2_a
+	0x00, //curve_3_b
+	0x20, //curve_3_a
+	0x00, //curve_4_b
+	0x20, //curve_4_a
+	0x02, //curve_5_b
+	0x1b, //curve_5_a
+	0x02, //curve_6_b
+	0x1b, //curve_6_a
+	0x02, //curve_7_b
+	0x1b, //curve_7_a
+	0x02, //curve_8_b
+	0x1b, //curve_8_a
+	0x09, //curve_9_b
+	0xa6, //curve_9_a
+	0x09, //curve10_b
+	0xa6, //curve10_a
+	0x09, //curve11_b
+	0xa6, //curve11_a
+	0x09, //curve12_b
+	0xa6, //curve12_a
+	0x00, //curve13_b
+	0x20, //curve13_a
+	0x00, //curve14_b
+	0x20, //curve14_a
+	0x00, //curve15_b
+	0x20, //curve15_a
+	0x00, //curve16_b
+	0x20, //curve16_a
+	0x00, //curve17_b
+	0x20, //curve17_a
+	0x00, //curve18_b
+	0x20, //curve18_a
+	0x00, //curve19_b
+	0x20, //curve19_a
+	0x00, //curve20_b
+	0x20, //curve20_a
+	0x00, //curve21_b
+	0x20, //curve21_a
+	0x00, //curve22_b
+	0x20, //curve22_a
+	0x00, //curve23_b
+	0x20, //curve23_a
+	0x00, //curve24_b
+	0xFF, //curve24_a
+	0x2c, //ascr_skin_on strength 0 00000
+	0x67, //ascr_skin_cb
+	0xa9, //ascr_skin_cr
+	0x4e, //ascr_dist_up
+	0x29, //ascr_dist_down
+	0x19, //ascr_dist_right
+	0x5f, //ascr_dist_left
+	0x00, //ascr_div_up 20
+	0x1a,
+	0x74,
+	0x00, //ascr_div_down
+	0x31,
+	0xf4,
+	0x00, //ascr_div_right
+	0x51,
+	0xec,
+	0x00, //ascr_div_left
+	0x15,
+	0x8f,
+	0xff, //ascr_skin_Rr
+	0x20, //ascr_skin_Rg
+	0x20, //ascr_skin_Rb
+	0xff, //ascr_skin_Yr
+	0xff, //ascr_skin_Yg
+	0x00, //ascr_skin_Yb
+	0xff, //ascr_skin_Mr
+	0x00, //ascr_skin_Mg
+	0xff, //ascr_skin_Mb
+	0xff, //ascr_skin_Wr
+	0xff, //ascr_skin_Wg
+	0xff, //ascr_skin_Wb
+	0x00, //ascr_Cr
+	0xff, //ascr_Rr
+	0xff, //ascr_Cg
+	0x00, //ascr_Rg
+	0xff, //ascr_Cb
+	0x00, //ascr_Rb
+	0xff, //ascr_Mr
+	0x00, //ascr_Gr
+	0x00, //ascr_Mg
+	0xff, //ascr_Gg
+	0xff, //ascr_Mb
+	0x00, //ascr_Gb
+	0xff, //ascr_Yr
+	0x00, //ascr_Br
+	0xff, //ascr_Yg
+	0x00, //ascr_Bg
+	0x00, //ascr_Yb
+	0xff, //ascr_Bb
+	0xfc, //ascr_Wr
+	0x00, //ascr_Kr
+	0xff, //ascr_Wg
+	0x00, //ascr_Kg
+	0xfd, //ascr_Wb
+	0x00, //ascr_Kb
+	//end
+
+};
+
+char COLOR_BLIND_1[] = {
+	0xEB,
+	0x01, //mdnie_en
+	0x00, //data_width mask 00 0000
+	0x03, //ascr_roi 1 ascr 00 1 0
+	0x02, //algo_roi 1 algo lce_roi 1 lce 00 1 0 00 1 0
+	0x00, //roi_ctrl 00
+	0x00, //roi0_x_start 12
+	0x00,
+	0x00, //roi0_x_end
+	0x00,
+	0x00, //roi0_y_start
+	0x00,
+	0x00, //roi0_y_end
+	0x00,
+	0x00, //roi1_x_strat
+	0x00,
+	0x00, //roi1_x_end
+	0x00,
+	0x00, //roi1_y_start
+	0x00,
+	0x00, //roi1_y_end
+	0x00,
+
+};
+
+char COLOR_BLIND_2[] = {
+	0xEC,
+	0x18, //lce_gain 00 0000
+	0x24, //lce_color_gain 00 0000
+	0x10, //lce_scene_change_on scene_trans 0 0000
+	0x14, //lce_min_diff
+	0xb3, //lce_illum_gain
+	0x01, //lce_ref_offset 9
+	0x0e,
+	0x01, //lce_ref_gain 9
+	0x00,
+	0x66, //lce_block_size h v 0000 0000
+	0xfa, //lce_bright_th
+	0x2d, //lce_bin_size_ratio
+	0x03, //lce_dark_th 000
+	0x96, //lce_min_ref_offset
+	0x00, //nr sharp cs gamma 0000
+	0xff, //nr_mask_th
+	0x00, //sharpen_weight 10
+	0x00,
+	0x07, //sharpen_maxplus 11
+	0xff,
+	0x07, //sharpen_maxminus 11
+	0xff,
+	0x01, //cs_gain 10
+	0x00,
+	0x00, //curve_1_b
+	0x20, //curve_1_a
+	0x00, //curve_2_b
+	0x20, //curve_2_a
+	0x00, //curve_3_b
+	0x20, //curve_3_a
+	0x00, //curve_4_b
+	0x20, //curve_4_a
+	0x02, //curve_5_b
+	0x1b, //curve_5_a
+	0x02, //curve_6_b
+	0x1b, //curve_6_a
+	0x02, //curve_7_b
+	0x1b, //curve_7_a
+	0x02, //curve_8_b
+	0x1b, //curve_8_a
+	0x09, //curve_9_b
+	0xa6, //curve_9_a
+	0x09, //curve10_b
+	0xa6, //curve10_a
+	0x09, //curve11_b
+	0xa6, //curve11_a
+	0x09, //curve12_b
+	0xa6, //curve12_a
+	0x00, //curve13_b
+	0x20, //curve13_a
+	0x00, //curve14_b
+	0x20, //curve14_a
+	0x00, //curve15_b
+	0x20, //curve15_a
+	0x00, //curve16_b
+	0x20, //curve16_a
+	0x00, //curve17_b
+	0x20, //curve17_a
+	0x00, //curve18_b
+	0x20, //curve18_a
+	0x00, //curve19_b
+	0x20, //curve19_a
+	0x00, //curve20_b
+	0x20, //curve20_a
+	0x00, //curve21_b
+	0x20, //curve21_a
+	0x00, //curve22_b
+	0x20, //curve22_a
+	0x00, //curve23_b
+	0x20, //curve23_a
+	0x00, //curve24_b
+	0xFF, //curve24_a
+	0x20, //ascr_skin_on strength 0 00000
+	0x67, //ascr_skin_cb
+	0xa9, //ascr_skin_cr
+	0x0c, //ascr_dist_up
+	0x0c, //ascr_dist_down
+	0x0c, //ascr_dist_right
+	0x0c, //ascr_dist_left
+	0x00, //ascr_div_up 20
+	0xaa,
+	0xab,
+	0x00, //ascr_div_down
+	0xaa,
+	0xab,
+	0x00, //ascr_div_right
+	0xaa,
+	0xab,
+	0x00, //ascr_div_left
+	0xaa,
+	0xab,
+	0xff, //ascr_skin_Rr
+	0x00, //ascr_skin_Rg
+	0x00, //ascr_skin_Rb
+	0xff, //ascr_skin_Yr
+	0xff, //ascr_skin_Yg
+	0x00, //ascr_skin_Yb
+	0xff, //ascr_skin_Mr
+	0x00, //ascr_skin_Mg
+	0xff, //ascr_skin_Mb
+	0xff, //ascr_skin_Wr
+	0xff, //ascr_skin_Wg
+	0xff, //ascr_skin_Wb
+	0x00, //ascr_Cr
+	0xff, //ascr_Rr
+	0xff, //ascr_Cg
+	0x00, //ascr_Rg
+	0xff, //ascr_Cb
+	0x00, //ascr_Rb
+	0xff, //ascr_Mr
+	0x00, //ascr_Gr
+	0x00, //ascr_Mg
+	0xff, //ascr_Gg
+	0xff, //ascr_Mb
+	0x00, //ascr_Gb
+	0xff, //ascr_Yr
+	0x00, //ascr_Br
+	0xff, //ascr_Yg
+	0x00, //ascr_Bg
+	0x00, //ascr_Yb
+	0xff, //ascr_Bb
+	0xff, //ascr_Wr
+	0x00, //ascr_Kr
+	0xff, //ascr_Wg
+	0x00, //ascr_Kg
+	0xff, //ascr_Wb
+	0x00, //ascr_Kb
+	//end
+
+};
+
+////////////////// BROWSER /////////////////////
+
+char STANDARD_BROWSER_1[] = {
+	//start
+	0xEB,
+	0x01, //mdnie_en
+	0x00, //data_width mask 00 0000
+	0x03, //ascr_roi 1 ascr 00 1 0
+	0x32, //algo_roi 1 algo lce_roi 1 lce 00 1 0 00 1 0
+	0x00, //roi_ctrl 00
+	0x00, //roi0_x_start 12
+	0x00,
+	0x00, //roi0_x_end
+	0x00,
+	0x00, //roi0_y_start
+	0x00,
+	0x00, //roi0_y_end
+	0x00,
+	0x00, //roi1_x_strat
+	0x00,
+	0x00, //roi1_x_end
+	0x00,
+	0x00, //roi1_y_start
+	0x00,
+	0x00, //roi1_y_end
+	0x00,
+};
+
+char STANDARD_BROWSER_2[] = {
+	0xEC,
+	0x18, //lce_gain 00 0000
+	0x24, //lce_color_gain 00 0000
+	0x10, //lce_scene_change_on scene_trans 0 0000
+	0x14, //lce_min_diff
+	0xb3, //lce_illum_gain
+	0x01, //lce_ref_offset 9
+	0x0e,
+	0x01, //lce_ref_gain 9
+	0x00,
+	0x66, //lce_block_size h v 0000 0000
+	0xfa, //lce_bright_th
+	0x2d, //lce_bin_size_ratio
+	0x03, //lce_dark_th 000
+	0x96, //lce_min_ref_offset
+	0x01, //nr sharp cs gamma 0000
+	0xff, //nr_mask_th
+	0x00, //sharpen_weight 10
+	0x40,
+	0x00, //sharpen_maxplus 11
+	0xa0,
+	0x00, //sharpen_maxminus 11
+	0xa0,
+	0x01, //cs_gain 10
+	0x00,
+	0x00, //curve_1_b
+	0x20, //curve_1_a
+	0x00, //curve_2_b
+	0x20, //curve_2_a
+	0x00, //curve_3_b
+	0x20, //curve_3_a
+	0x00, //curve_4_b
+	0x20, //curve_4_a
+	0x02, //curve_5_b
+	0x1b, //curve_5_a
+	0x02, //curve_6_b
+	0x1b, //curve_6_a
+	0x02, //curve_7_b
+	0x1b, //curve_7_a
+	0x02, //curve_8_b
+	0x1b, //curve_8_a
+	0x09, //curve_9_b
+	0xa6, //curve_9_a
+	0x09, //curve10_b
+	0xa6, //curve10_a
+	0x09, //curve11_b
+	0xa6, //curve11_a
+	0x09, //curve12_b
+	0xa6, //curve12_a
+	0x00, //curve13_b
+	0x20, //curve13_a
+	0x00, //curve14_b
+	0x20, //curve14_a
+	0x00, //curve15_b
+	0x20, //curve15_a
+	0x00, //curve16_b
+	0x20, //curve16_a
+	0x00, //curve17_b
+	0x20, //curve17_a
+	0x00, //curve18_b
+	0x20, //curve18_a
+	0x00, //curve19_b
+	0x20, //curve19_a
+	0x00, //curve20_b
+	0x20, //curve20_a
+	0x00, //curve21_b
+	0x20, //curve21_a
+	0x00, //curve22_b
+	0x20, //curve22_a
+	0x00, //curve23_b
+	0x20, //curve23_a
+	0x00, //curve24_b
+	0xFF, //curve24_a
+	0x20, //ascr_skin_on strength 0 00000
+	0x67, //ascr_skin_cb
+	0xa9, //ascr_skin_cr
+	0x17, //ascr_dist_up
+	0x29, //ascr_dist_down
+	0x19, //ascr_dist_right
+	0x27, //ascr_dist_left
+	0x00, //ascr_div_up 20
+	0x59,
+	0x0b,
+	0x00, //ascr_div_down
+	0x31,
+	0xf4,
+	0x00, //ascr_div_right
+	0x51,
+	0xec,
+	0x00, //ascr_div_left
+	0x34,
+	0x83,
+	0xff, //ascr_skin_Rr
+	0x00, //ascr_skin_Rg
+	0x00, //ascr_skin_Rb
+	0xff, //ascr_skin_Yr
+	0xff, //ascr_skin_Yg
+	0x00, //ascr_skin_Yb
+	0xff, //ascr_skin_Mr
+	0x00, //ascr_skin_Mg
+	0xff, //ascr_skin_Mb
+	0xff, //ascr_skin_Wr
+	0xff, //ascr_skin_Wg
+	0xff, //ascr_skin_Wb
+	0x00, //ascr_Cr
+	0xff, //ascr_Rr
+	0xff, //ascr_Cg
+	0x16, //ascr_Rg
+	0xe5, //ascr_Cb
+	0x0e, //ascr_Rb
+	0xff, //ascr_Mr
+	0x00, //ascr_Gr
+	0x14, //ascr_Mg
+	0xff, //ascr_Gg
+	0xd9, //ascr_Mb
+	0x04, //ascr_Gb
+	0xfc, //ascr_Yr
+	0x26, //ascr_Br
+	0xff, //ascr_Yg
+	0x1b, //ascr_Bg
+	0x23, //ascr_Yb
+	0xff, //ascr_Bb
+	0xff, //ascr_Wr
+	0x00, //ascr_Kr
+	0xf8, //ascr_Wg
+	0x00, //ascr_Kg
+	0xef, //ascr_Wb
+	0x00, //ascr_Kb
+	//end
+};
+
+char NATURAL_BROWSER_1[] = {
+	//start
+	0xEB,
+	0x01, //mdnie_en
+	0x00, //data_width mask 00 0000
+	0x03, //ascr_roi 1 ascr 00 1 0
+	0x32, //algo_roi 1 algo lce_roi 1 lce 00 1 0 00 1 0
+	0x00, //roi_ctrl 00
+	0x00, //roi0_x_start 12
+	0x00,
+	0x00, //roi0_x_end
+	0x00,
+	0x00, //roi0_y_start
+	0x00,
+	0x00, //roi0_y_end
+	0x00,
+	0x00, //roi1_x_strat
+	0x00,
+	0x00, //roi1_x_end
+	0x00,
+	0x00, //roi1_y_start
+	0x00,
+	0x00, //roi1_y_end
+	0x00,
+};
+
+char NATURAL_BROWSER_2[] = {
+	0xEC,
+	0x18, //lce_gain 00 0000
+	0x24, //lce_color_gain 00 0000
+	0x10, //lce_scene_change_on scene_trans 0 0000
+	0x14, //lce_min_diff
+	0xb3, //lce_illum_gain
+	0x01, //lce_ref_offset 9
+	0x0e,
+	0x01, //lce_ref_gain 9
+	0x00,
+	0x66, //lce_block_size h v 0000 0000
+	0xfa, //lce_bright_th
+	0x2d, //lce_bin_size_ratio
+	0x03, //lce_dark_th 000
+	0x96, //lce_min_ref_offset
+	0x03, //nr sharp cs gamma 0000
+	0xff, //nr_mask_th
+	0x00, //sharpen_weight 10
+	0x40,
+	0x00, //sharpen_maxplus 11
+	0xa0,
+	0x00, //sharpen_maxminus 11
+	0xa0,
+	0x01, //cs_gain 10
+	0x20,
+	0x00, //curve_1_b
+	0x20, //curve_1_a
+	0x00, //curve_2_b
+	0x20, //curve_2_a
+	0x00, //curve_3_b
+	0x20, //curve_3_a
+	0x00, //curve_4_b
+	0x20, //curve_4_a
+	0x02, //curve_5_b
+	0x1b, //curve_5_a
+	0x02, //curve_6_b
+	0x1b, //curve_6_a
+	0x02, //curve_7_b
+	0x1b, //curve_7_a
+	0x02, //curve_8_b
+	0x1b, //curve_8_a
+	0x09, //curve_9_b
+	0xa6, //curve_9_a
+	0x09, //curve10_b
+	0xa6, //curve10_a
+	0x09, //curve11_b
+	0xa6, //curve11_a
+	0x09, //curve12_b
+	0xa6, //curve12_a
+	0x00, //curve13_b
+	0x20, //curve13_a
+	0x00, //curve14_b
+	0x20, //curve14_a
+	0x00, //curve15_b
+	0x20, //curve15_a
+	0x00, //curve16_b
+	0x20, //curve16_a
+	0x00, //curve17_b
+	0x20, //curve17_a
+	0x00, //curve18_b
+	0x20, //curve18_a
+	0x00, //curve19_b
+	0x20, //curve19_a
+	0x00, //curve20_b
+	0x20, //curve20_a
+	0x00, //curve21_b
+	0x20, //curve21_a
+	0x00, //curve22_b
+	0x20, //curve22_a
+	0x00, //curve23_b
+	0x20, //curve23_a
+	0x00, //curve24_b
+	0xFF, //curve24_a
+	0x20, //ascr_skin_on strength 0 00000
+	0x67, //ascr_skin_cb
+	0xa9, //ascr_skin_cr
+	0x17, //ascr_dist_up
+	0x29, //ascr_dist_down
+	0x19, //ascr_dist_right
+	0x27, //ascr_dist_left
+	0x00, //ascr_div_up 20
+	0x59,
+	0x0b,
+	0x00, //ascr_div_down
+	0x31,
+	0xf4,
+	0x00, //ascr_div_right
+	0x51,
+	0xec,
+	0x00, //ascr_div_left
+	0x34,
+	0x83,
+	0xff, //ascr_skin_Rr
+	0x00, //ascr_skin_Rg
+	0x00, //ascr_skin_Rb
+	0xff, //ascr_skin_Yr
+	0xff, //ascr_skin_Yg
+	0x00, //ascr_skin_Yb
+	0xff, //ascr_skin_Mr
+	0x00, //ascr_skin_Mg
+	0xff, //ascr_skin_Mb
+	0xff, //ascr_skin_Wr
+	0xff, //ascr_skin_Wg
+	0xff, //ascr_skin_Wb
+	0x7a, //ascr_Cr
+	0xff, //ascr_Rr
+	0xff, //ascr_Cg
+	0x2b, //ascr_Rg
+	0xf1, //ascr_Cb
+	0x2d, //ascr_Rb
+	0xff, //ascr_Mr
+	0x68, //ascr_Gr
+	0x15, //ascr_Mg
+	0xff, //ascr_Gg
+	0xfa, //ascr_Mb
+	0x31, //ascr_Gb
+	0xf8, //ascr_Yr
+	0x34, //ascr_Br
+	0xff, //ascr_Yg
+	0x20, //ascr_Bg
+	0x4b, //ascr_Yb
+	0xff, //ascr_Bb
+	0xff, //ascr_Wr
+	0x00, //ascr_Kr
+	0xf8, //ascr_Wg
+	0x00, //ascr_Kg
+	0xef, //ascr_Wb
+	0x00, //ascr_Kb
+	//end
+};
+
+char DYNAMIC_BROWSER_1[] = {
+	//start
+	0xEB,
+	0x01, //mdnie_en
+	0x00, //data_width mask 00 0000
+	0x03, //ascr_roi 1 ascr 00 1 0
+	0x32, //algo_roi 1 algo lce_roi 1 lce 00 1 0 00 1 0
+	0x00, //roi_ctrl 00
+	0x00, //roi0_x_start 12
+	0x00,
+	0x00, //roi0_x_end
+	0x00,
+	0x00, //roi0_y_start
+	0x00,
+	0x00, //roi0_y_end
+	0x00,
+	0x00, //roi1_x_strat
+	0x00,
+	0x00, //roi1_x_end
+	0x00,
+	0x00, //roi1_y_start
+	0x00,
+	0x00, //roi1_y_end
+	0x00,
+};
+
+char DYNAMIC_BROWSER_2[] = {
+	0xEC,
+	0x18, //lce_gain 00 0000
+	0x24, //lce_color_gain 00 0000
+	0x10, //lce_scene_change_on scene_trans 0 0000
+	0x14, //lce_min_diff
+	0xb3, //lce_illum_gain
+	0x01, //lce_ref_offset 9
+	0x0e,
+	0x01, //lce_ref_gain 9
+	0x00,
+	0x66, //lce_block_size h v 0000 0000
+	0xfa, //lce_bright_th
+	0x2d, //lce_bin_size_ratio
+	0x03, //lce_dark_th 000
+	0x96, //lce_min_ref_offset
+	0x03, //nr sharp cs gamma 0000
+	0xff, //nr_mask_th
+	0x00, //sharpen_weight 10
+	0x50,
+	0x00, //sharpen_maxplus 11
+	0xa0,
+	0x00, //sharpen_maxminus 11
+	0xa0,
+	0x01, //cs_gain 10
+	0x20,
+	0x00, //curve_1_b
+	0x0f, //curve_1_a
+	0x00, //curve_2_b
+	0x0f, //curve_2_a
+	0x00, //curve_3_b
+	0x0f, //curve_3_a
+	0x00, //curve_4_b
+	0x0f, //curve_4_a
+	0x09, //curve_5_b
+	0xa2, //curve_5_a
+	0x09, //curve_6_b
+	0xa2, //curve_6_a
+	0x09, //curve_7_b
+	0xa2, //curve_7_a
+	0x09, //curve_8_b
+	0xa2, //curve_8_a
+	0x09, //curve_9_b
+	0xa2, //curve_9_a
+	0x09, //curve10_b
+	0xa2, //curve10_a
+	0x0a, //curve11_b
+	0xa2, //curve11_a
+	0x0a, //curve12_b
+	0xa2, //curve12_a
+	0x0a, //curve13_b
+	0xa2, //curve13_a
+	0x0a, //curve14_b
+	0xa2, //curve14_a
+	0x0a, //curve15_b
+	0xa2, //curve15_a
+	0x0a, //curve16_b
+	0xa2, //curve16_a
+	0x0a, //curve17_b
+	0xa2, //curve17_a
+	0x0a, //curve18_b
+	0xa2, //curve18_a
+	0x0f, //curve19_b
+	0xa4, //curve19_a
+	0x0f, //curve20_b
+	0xa4, //curve20_a
+	0x0f, //curve21_b
+	0xa4, //curve21_a
+	0x23, //curve22_b
+	0x1c, //curve22_a
+	0x48, //curve23_b
+	0x17, //curve23_a
+	0x00, //curve24_b
+	0xFF, //curve24_a
+	0x20, //ascr_skin_on strength 0 00000
+	0x67, //ascr_skin_cb
+	0xa9, //ascr_skin_cr
+	0x17, //ascr_dist_up
+	0x29, //ascr_dist_down
+	0x19, //ascr_dist_right
+	0x27, //ascr_dist_left
+	0x00, //ascr_div_up 20
+	0x59,
+	0x0b,
+	0x00, //ascr_div_down
+	0x31,
+	0xf4,
+	0x00, //ascr_div_right
+	0x51,
+	0xec,
+	0x00, //ascr_div_left
+	0x34,
+	0x83,
+	0xff, //ascr_skin_Rr
+	0x00, //ascr_skin_Rg
+	0x00, //ascr_skin_Rb
+	0xff, //ascr_skin_Yr
+	0xff, //ascr_skin_Yg
+	0x00, //ascr_skin_Yb
+	0xff, //ascr_skin_Mr
+	0x00, //ascr_skin_Mg
+	0xff, //ascr_skin_Mb
+	0xff, //ascr_skin_Wr
+	0xff, //ascr_skin_Wg
+	0xff, //ascr_skin_Wb
+	0x00, //ascr_Cr
+	0xff, //ascr_Rr
+	0xff, //ascr_Cg
+	0x00, //ascr_Rg
+	0xff, //ascr_Cb
+	0x00, //ascr_Rb
+	0xff, //ascr_Mr
+	0x00, //ascr_Gr
+	0x00, //ascr_Mg
+	0xff, //ascr_Gg
+	0xff, //ascr_Mb
+	0x00, //ascr_Gb
+	0xff, //ascr_Yr
+	0x00, //ascr_Br
+	0xff, //ascr_Yg
+	0x00, //ascr_Bg
+	0x00, //ascr_Yb
+	0xff, //ascr_Bb
+	0xff, //ascr_Wr
+	0x00, //ascr_Kr
+	0xff, //ascr_Wg
+	0x00, //ascr_Kg
+	0xff, //ascr_Wb
+	0x00, //ascr_Kb
+	//end
+
+};
+
+char MOVIE_BROWSER_1[] = {
+	//start
+	0xEB,
+	0x01, //mdnie_en
+	0x00, //data_width mask 00 0000
+	0x03, //ascr_roi 1 ascr 00 1 0
+	0x32, //algo_roi 1 algo lce_roi 1 lce 00 1 0 00 1 0
+	0x00, //roi_ctrl 00
+	0x00, //roi0_x_start 12
+	0x00,
+	0x00, //roi0_x_end
+	0x00,
+	0x00, //roi0_y_start
+	0x00,
+	0x00, //roi0_y_end
+	0x00,
+	0x00, //roi1_x_strat
+	0x00,
+	0x00, //roi1_x_end
+	0x00,
+	0x00, //roi1_y_start
+	0x00,
+	0x00, //roi1_y_end
+	0x00,
+};
+
+char MOVIE_BROWSER_2[] = {
+	0xEC,
+	0x18, //lce_gain 00 0000
+	0x24, //lce_color_gain 00 0000
+	0x10, //lce_scene_change_on scene_trans 0 0000
+	0x14, //lce_min_diff
+	0xb3, //lce_illum_gain
+	0x01, //lce_ref_offset 9
+	0x0e,
+	0x01, //lce_ref_gain 9
+	0x00,
+	0x66, //lce_block_size h v 0000 0000
+	0xfa, //lce_bright_th
+	0x2d, //lce_bin_size_ratio
+	0x03, //lce_dark_th 000
+	0x96, //lce_min_ref_offset
+	0x03, //nr sharp cs gamma 0000
+	0xff, //nr_mask_th
+	0x00, //sharpen_weight 10
+	0x40,
+	0x00, //sharpen_maxplus 11
+	0xa0,
+	0x00, //sharpen_maxminus 11
+	0xa0,
+	0x01, //cs_gain 10
+	0x20,
+	0x00, //curve_1_b
+	0x20, //curve_1_a
+	0x00, //curve_2_b
+	0x20, //curve_2_a
+	0x00, //curve_3_b
+	0x20, //curve_3_a
+	0x00, //curve_4_b
+	0x20, //curve_4_a
+	0x02, //curve_5_b
+	0x1b, //curve_5_a
+	0x02, //curve_6_b
+	0x1b, //curve_6_a
+	0x02, //curve_7_b
+	0x1b, //curve_7_a
+	0x02, //curve_8_b
+	0x1b, //curve_8_a
+	0x09, //curve_9_b
+	0xa6, //curve_9_a
+	0x09, //curve10_b
+	0xa6, //curve10_a
+	0x09, //curve11_b
+	0xa6, //curve11_a
+	0x09, //curve12_b
+	0xa6, //curve12_a
+	0x00, //curve13_b
+	0x20, //curve13_a
+	0x00, //curve14_b
+	0x20, //curve14_a
+	0x00, //curve15_b
+	0x20, //curve15_a
+	0x00, //curve16_b
+	0x20, //curve16_a
+	0x00, //curve17_b
+	0x20, //curve17_a
+	0x00, //curve18_b
+	0x20, //curve18_a
+	0x00, //curve19_b
+	0x20, //curve19_a
+	0x00, //curve20_b
+	0x20, //curve20_a
+	0x00, //curve21_b
+	0x20, //curve21_a
+	0x00, //curve22_b
+	0x20, //curve22_a
+	0x00, //curve23_b
+	0x20, //curve23_a
+	0x00, //curve24_b
+	0xFF, //curve24_a
+	0x20, //ascr_skin_on strength 0 00000
+	0x67, //ascr_skin_cb
+	0xa9, //ascr_skin_cr
+	0x17, //ascr_dist_up
+	0x29, //ascr_dist_down
+	0x19, //ascr_dist_right
+	0x27, //ascr_dist_left
+	0x00, //ascr_div_up 20
+	0x59,
+	0x0b,
+	0x00, //ascr_div_down
+	0x31,
+	0xf4,
+	0x00, //ascr_div_right
+	0x51,
+	0xec,
+	0x00, //ascr_div_left
+	0x34,
+	0x83,
+	0xff, //ascr_skin_Rr
+	0x00, //ascr_skin_Rg
+	0x00, //ascr_skin_Rb
+	0xff, //ascr_skin_Yr
+	0xff, //ascr_skin_Yg
+	0x00, //ascr_skin_Yb
+	0xff, //ascr_skin_Mr
+	0x00, //ascr_skin_Mg
+	0xff, //ascr_skin_Mb
+	0xff, //ascr_skin_Wr
+	0xff, //ascr_skin_Wg
+	0xff, //ascr_skin_Wb
+	0x7a, //ascr_Cr
+	0xff, //ascr_Rr
+	0xff, //ascr_Cg
+	0x2b, //ascr_Rg
+	0xf1, //ascr_Cb
+	0x2d, //ascr_Rb
+	0xff, //ascr_Mr
+	0x68, //ascr_Gr
+	0x15, //ascr_Mg
+	0xff, //ascr_Gg
+	0xfa, //ascr_Mb
+	0x31, //ascr_Gb
+	0xf8, //ascr_Yr
+	0x34, //ascr_Br
+	0xff, //ascr_Yg
+	0x20, //ascr_Bg
+	0x4b, //ascr_Yb
+	0xff, //ascr_Bb
+	0xff, //ascr_Wr
+	0x00, //ascr_Kr
+	0xf8, //ascr_Wg
+	0x00, //ascr_Kg
+	0xef, //ascr_Wb
+	0x00, //ascr_Kb
+	//end
+
+};
+
+char AUTO_BROWSER_1[] = {
+	//start
+	0xEB,
+	0x01, //mdnie_en
+	0x00, //data_width mask 00 0000
+	0x03, //ascr_roi 1 ascr 00 1 0
+	0x32, //algo_roi 1 algo lce_roi 1 lce 00 1 0 00 1 0
+	0x00, //roi_ctrl 00
+	0x00, //roi0_x_start 12
+	0x00,
+	0x00, //roi0_x_end
+	0x00,
+	0x00, //roi0_y_start
+	0x00,
+	0x00, //roi0_y_end
+	0x00,
+	0x00, //roi1_x_strat
+	0x00,
+	0x00, //roi1_x_end
+	0x00,
+	0x00, //roi1_y_start
+	0x00,
+	0x00, //roi1_y_end
+	0x00,
+};
+
+char AUTO_BROWSER_2[] = {
+	0xEC,
+	0x18, //lce_gain 00 0000
+	0x24, //lce_color_gain 00 0000
+	0x10, //lce_scene_change_on scene_trans 0 0000
+	0x14, //lce_min_diff
+	0xb3, //lce_illum_gain
+	0x01, //lce_ref_offset 9
+	0x0e,
+	0x01, //lce_ref_gain 9
+	0x00,
+	0x66, //lce_block_size h v 0000 0000
+	0xfa, //lce_bright_th
+	0x2d, //lce_bin_size_ratio
+	0x03, //lce_dark_th 000
+	0x96, //lce_min_ref_offset
+	0x01, //nr sharp cs gamma 0000
+	0xff, //nr_mask_th
+	0x00, //sharpen_weight 10
+	0x40,
+	0x00, //sharpen_maxplus 11
+	0xa0,
+	0x00, //sharpen_maxminus 11
+	0xa0,
+	0x01, //cs_gain 10
+	0x00,
+	0x00, //curve_1_b
+	0x20, //curve_1_a
+	0x00, //curve_2_b
+	0x20, //curve_2_a
+	0x00, //curve_3_b
+	0x20, //curve_3_a
+	0x00, //curve_4_b
+	0x20, //curve_4_a
+	0x02, //curve_5_b
+	0x1b, //curve_5_a
+	0x02, //curve_6_b
+	0x1b, //curve_6_a
+	0x02, //curve_7_b
+	0x1b, //curve_7_a
+	0x02, //curve_8_b
+	0x1b, //curve_8_a
+	0x09, //curve_9_b
+	0xa6, //curve_9_a
+	0x09, //curve10_b
+	0xa6, //curve10_a
+	0x09, //curve11_b
+	0xa6, //curve11_a
+	0x09, //curve12_b
+	0xa6, //curve12_a
+	0x00, //curve13_b
+	0x20, //curve13_a
+	0x00, //curve14_b
+	0x20, //curve14_a
+	0x00, //curve15_b
+	0x20, //curve15_a
+	0x00, //curve16_b
+	0x20, //curve16_a
+	0x00, //curve17_b
+	0x20, //curve17_a
+	0x00, //curve18_b
+	0x20, //curve18_a
+	0x00, //curve19_b
+	0x20, //curve19_a
+	0x00, //curve20_b
+	0x20, //curve20_a
+	0x00, //curve21_b
+	0x20, //curve21_a
+	0x00, //curve22_b
+	0x20, //curve22_a
+	0x00, //curve23_b
+	0x20, //curve23_a
+	0x00, //curve24_b
+	0xFF, //curve24_a
+	0x30, //ascr_skin_on strength 0 00000
+	0x67, //ascr_skin_cb
+	0xa9, //ascr_skin_cr
+	0x17, //ascr_dist_up
+	0x29, //ascr_dist_down
+	0x19, //ascr_dist_right
+	0x27, //ascr_dist_left
+	0x00, //ascr_div_up 20
+	0x59,
+	0x0b,
+	0x00, //ascr_div_down
+	0x31,
+	0xf4,
+	0x00, //ascr_div_right
+	0x51,
+	0xec,
+	0x00, //ascr_div_left
+	0x34,
+	0x83,
+	0xff, //ascr_skin_Rr
+	0x50, //ascr_skin_Rg
+	0x60, //ascr_skin_Rb
+	0xff, //ascr_skin_Yr
+	0xff, //ascr_skin_Yg
+	0x00, //ascr_skin_Yb
+	0xff, //ascr_skin_Mr
+	0x00, //ascr_skin_Mg
+	0xff, //ascr_skin_Mb
+	0xff, //ascr_skin_Wr
+	0xff, //ascr_skin_Wg
+	0xff, //ascr_skin_Wb
+	0x00, //ascr_Cr
+	0xff, //ascr_Rr
+	0xff, //ascr_Cg
+	0x00, //ascr_Rg
+	0xff, //ascr_Cb
+	0x00, //ascr_Rb
+	0xff, //ascr_Mr
+	0x00, //ascr_Gr
+	0x00, //ascr_Mg
+	0xff, //ascr_Gg
+	0xff, //ascr_Mb
+	0x00, //ascr_Gb
+	0xff, //ascr_Yr
+	0x00, //ascr_Br
+	0xff, //ascr_Yg
+	0x00, //ascr_Bg
+	0x00, //ascr_Yb
+	0xff, //ascr_Bb
+	0xff, //ascr_Wr
+	0x00, //ascr_Kr
+	0xff, //ascr_Wg
+	0x00, //ascr_Kg
+	0xff, //ascr_Wb
+	0x00, //ascr_Kb
+	//end
+
+};
+
+////////////////// eBOOK /////////////////////
+char DYNAMIC_EBOOK_1[] = {
+	//start
+	0xEB,
+	0x01, //mdnie_en
+	0x00, //data_width mask 00 0000
+	0x03, //ascr_roi 1 ascr 00 1 0
+	0x32, //algo_roi 1 algo lce_roi 1 lce 00 1 0 00 1 0
+	0x00, //roi_ctrl 00
+	0x00, //roi0_x_start 12
+	0x00,
+	0x00, //roi0_x_end
+	0x00,
+	0x00, //roi0_y_start
+	0x00,
+	0x00, //roi0_y_end
+	0x00,
+	0x00, //roi1_x_strat
+	0x00,
+	0x00, //roi1_x_end
+	0x00,
+	0x00, //roi1_y_start
+	0x00,
+	0x00, //roi1_y_end
+	0x00,
+
+};
+
+char DYNAMIC_EBOOK_2[] = {
+	0xEC,
+	0x18, //lce_gain 00 0000
+	0x24, //lce_color_gain 00 0000
+	0x10, //lce_scene_change_on scene_trans 0 0000
+	0x14, //lce_min_diff
+	0xb3, //lce_illum_gain
+	0x01, //lce_ref_offset 9
+	0x0e,
+	0x01, //lce_ref_gain 9
+	0x00,
+	0x66, //lce_block_size h v 0000 0000
+	0xfa, //lce_bright_th
+	0x2d, //lce_bin_size_ratio
+	0x03, //lce_dark_th 000
+	0x96, //lce_min_ref_offset
+	0x03, //nr sharp cs gamma 0000
+	0xff, //nr_mask_th
+	0x00, //sharpen_weight 10
+	0x50,
+	0x00, //sharpen_maxplus 11
+	0xa0,
+	0x00, //sharpen_maxminus 11
+	0xa0,
+	0x01, //cs_gain 10
+	0x20,
+	0x00, //curve_1_b
+	0x0f, //curve_1_a
+	0x00, //curve_2_b
+	0x0f, //curve_2_a
+	0x00, //curve_3_b
+	0x0f, //curve_3_a
+	0x00, //curve_4_b
+	0x0f, //curve_4_a
+	0x09, //curve_5_b
+	0xa2, //curve_5_a
+	0x09, //curve_6_b
+	0xa2, //curve_6_a
+	0x09, //curve_7_b
+	0xa2, //curve_7_a
+	0x09, //curve_8_b
+	0xa2, //curve_8_a
+	0x09, //curve_9_b
+	0xa2, //curve_9_a
+	0x09, //curve10_b
+	0xa2, //curve10_a
+	0x0a, //curve11_b
+	0xa2, //curve11_a
+	0x0a, //curve12_b
+	0xa2, //curve12_a
+	0x0a, //curve13_b
+	0xa2, //curve13_a
+	0x0a, //curve14_b
+	0xa2, //curve14_a
+	0x0a, //curve15_b
+	0xa2, //curve15_a
+	0x0a, //curve16_b
+	0xa2, //curve16_a
+	0x0a, //curve17_b
+	0xa2, //curve17_a
+	0x0a, //curve18_b
+	0xa2, //curve18_a
+	0x0f, //curve19_b
+	0xa4, //curve19_a
+	0x0f, //curve20_b
+	0xa4, //curve20_a
+	0x0f, //curve21_b
+	0xa4, //curve21_a
+	0x23, //curve22_b
+	0x1c, //curve22_a
+	0x48, //curve23_b
+	0x17, //curve23_a
+	0x00, //curve24_b
+	0xFF, //curve24_a
+	0x20, //ascr_skin_on strength 0 00000
+	0x67, //ascr_skin_cb
+	0xa9, //ascr_skin_cr
+	0x17, //ascr_dist_up
+	0x29, //ascr_dist_down
+	0x19, //ascr_dist_right
+	0x27, //ascr_dist_left
+	0x00, //ascr_div_up 20
+	0x59,
+	0x0b,
+	0x00, //ascr_div_down
+	0x31,
+	0xf4,
+	0x00, //ascr_div_right
+	0x51,
+	0xec,
+	0x00, //ascr_div_left
+	0x34,
+	0x83,
+	0xff, //ascr_skin_Rr
+	0x00, //ascr_skin_Rg
+	0x00, //ascr_skin_Rb
+	0xff, //ascr_skin_Yr
+	0xff, //ascr_skin_Yg
+	0x00, //ascr_skin_Yb
+	0xff, //ascr_skin_Mr
+	0x00, //ascr_skin_Mg
+	0xff, //ascr_skin_Mb
+	0xff, //ascr_skin_Wr
+	0xff, //ascr_skin_Wg
+	0xff, //ascr_skin_Wb
+	0x00, //ascr_Cr
+	0xff, //ascr_Rr
+	0xff, //ascr_Cg
+	0x00, //ascr_Rg
+	0xff, //ascr_Cb
+	0x00, //ascr_Rb
+	0xff, //ascr_Mr
+	0x00, //ascr_Gr
+	0x00, //ascr_Mg
+	0xff, //ascr_Gg
+	0xff, //ascr_Mb
+	0x00, //ascr_Gb
+	0xff, //ascr_Yr
+	0x00, //ascr_Br
+	0xff, //ascr_Yg
+	0x00, //ascr_Bg
+	0x00, //ascr_Yb
+	0xff, //ascr_Bb
+	0xff, //ascr_Wr
+	0x00, //ascr_Kr
+	0xff, //ascr_Wg
+	0x00, //ascr_Kg
+	0xff, //ascr_Wb
+	0x00, //ascr_Kb
+	//end
+
+};
+
+char STANDARD_EBOOK_1[] = {
+	//start
+	0xEB,
+	0x01, //mdnie_en
+	0x00, //data_width mask 00 0000
+	0x03, //ascr_roi 1 ascr 00 1 0
+	0x32, //algo_roi 1 algo lce_roi 1 lce 00 1 0 00 1 0
+	0x00, //roi_ctrl 00
+	0x00, //roi0_x_start 12
+	0x00,
+	0x00, //roi0_x_end
+	0x00,
+	0x00, //roi0_y_start
+	0x00,
+	0x00, //roi0_y_end
+	0x00,
+	0x00, //roi1_x_strat
+	0x00,
+	0x00, //roi1_x_end
+	0x00,
+	0x00, //roi1_y_start
+	0x00,
+	0x00, //roi1_y_end
+	0x00,
+};
+
+char STANDARD_EBOOK_2[] = {
+	0xEC,
+	0x18, //lce_gain 00 0000
+	0x24, //lce_color_gain 00 0000
+	0x10, //lce_scene_change_on scene_trans 0 0000
+	0x14, //lce_min_diff
+	0xb3, //lce_illum_gain
+	0x01, //lce_ref_offset 9
+	0x0e,
+	0x01, //lce_ref_gain 9
+	0x00,
+	0x66, //lce_block_size h v 0000 0000
+	0xfa, //lce_bright_th
+	0x2d, //lce_bin_size_ratio
+	0x03, //lce_dark_th 000
+	0x96, //lce_min_ref_offset
+	0x01, //nr sharp cs gamma 0000
+	0xff, //nr_mask_th
+	0x00, //sharpen_weight 10
+	0x40,
+	0x00, //sharpen_maxplus 11
+	0xa0,
+	0x00, //sharpen_maxminus 11
+	0xa0,
+	0x01, //cs_gain 10
+	0x00,
+	0x00, //curve_1_b
+	0x20, //curve_1_a
+	0x00, //curve_2_b
+	0x20, //curve_2_a
+	0x00, //curve_3_b
+	0x20, //curve_3_a
+	0x00, //curve_4_b
+	0x20, //curve_4_a
+	0x02, //curve_5_b
+	0x1b, //curve_5_a
+	0x02, //curve_6_b
+	0x1b, //curve_6_a
+	0x02, //curve_7_b
+	0x1b, //curve_7_a
+	0x02, //curve_8_b
+	0x1b, //curve_8_a
+	0x09, //curve_9_b
+	0xa6, //curve_9_a
+	0x09, //curve10_b
+	0xa6, //curve10_a
+	0x09, //curve11_b
+	0xa6, //curve11_a
+	0x09, //curve12_b
+	0xa6, //curve12_a
+	0x00, //curve13_b
+	0x20, //curve13_a
+	0x00, //curve14_b
+	0x20, //curve14_a
+	0x00, //curve15_b
+	0x20, //curve15_a
+	0x00, //curve16_b
+	0x20, //curve16_a
+	0x00, //curve17_b
+	0x20, //curve17_a
+	0x00, //curve18_b
+	0x20, //curve18_a
+	0x00, //curve19_b
+	0x20, //curve19_a
+	0x00, //curve20_b
+	0x20, //curve20_a
+	0x00, //curve21_b
+	0x20, //curve21_a
+	0x00, //curve22_b
+	0x20, //curve22_a
+	0x00, //curve23_b
+	0x20, //curve23_a
+	0x00, //curve24_b
+	0xFF, //curve24_a
+	0x20, //ascr_skin_on strength 0 00000
+	0x67, //ascr_skin_cb
+	0xa9, //ascr_skin_cr
+	0x17, //ascr_dist_up
+	0x29, //ascr_dist_down
+	0x19, //ascr_dist_right
+	0x27, //ascr_dist_left
+	0x00, //ascr_div_up 20
+	0x59,
+	0x0b,
+	0x00, //ascr_div_down
+	0x31,
+	0xf4,
+	0x00, //ascr_div_right
+	0x51,
+	0xec,
+	0x00, //ascr_div_left
+	0x34,
+	0x83,
+	0xff, //ascr_skin_Rr
+	0x00, //ascr_skin_Rg
+	0x00, //ascr_skin_Rb
+	0xff, //ascr_skin_Yr
+	0xff, //ascr_skin_Yg
+	0x00, //ascr_skin_Yb
+	0xff, //ascr_skin_Mr
+	0x00, //ascr_skin_Mg
+	0xff, //ascr_skin_Mb
+	0xff, //ascr_skin_Wr
+	0xff, //ascr_skin_Wg
+	0xff, //ascr_skin_Wb
+	0x00, //ascr_Cr
+	0xff, //ascr_Rr
+	0xff, //ascr_Cg
+	0x16, //ascr_Rg
+	0xe5, //ascr_Cb
+	0x0e, //ascr_Rb
+	0xff, //ascr_Mr
+	0x00, //ascr_Gr
+	0x14, //ascr_Mg
+	0xff, //ascr_Gg
+	0xd9, //ascr_Mb
+	0x04, //ascr_Gb
+	0xfc, //ascr_Yr
+	0x26, //ascr_Br
+	0xff, //ascr_Yg
+	0x1b, //ascr_Bg
+	0x23, //ascr_Yb
+	0xff, //ascr_Bb
+	0xff, //ascr_Wr
+	0x00, //ascr_Kr
+	0xf8, //ascr_Wg
+	0x00, //ascr_Kg
+	0xef, //ascr_Wb
+	0x00, //ascr_Kb
+	//end
+};
+char NATURAL_EBOOK_1[] = {
+	//start
+	0xEB,
+	0x01, //mdnie_en
+	0x00, //data_width mask 00 0000
+	0x03, //ascr_roi 1 ascr 00 1 0
+	0x32, //algo_roi 1 algo lce_roi 1 lce 00 1 0 00 1 0
+	0x00, //roi_ctrl 00
+	0x00, //roi0_x_start 12
+	0x00,
+	0x00, //roi0_x_end
+	0x00,
+	0x00, //roi0_y_start
+	0x00,
+	0x00, //roi0_y_end
+	0x00,
+	0x00, //roi1_x_strat
+	0x00,
+	0x00, //roi1_x_end
+	0x00,
+	0x00, //roi1_y_start
+	0x00,
+	0x00, //roi1_y_end
+	0x00,
+};
+
+char NATURAL_EBOOK_2[] = {
+	0xEC,
+	0x18, //lce_gain 00 0000
+	0x24, //lce_color_gain 00 0000
+	0x10, //lce_scene_change_on scene_trans 0 0000
+	0x14, //lce_min_diff
+	0xb3, //lce_illum_gain
+	0x01, //lce_ref_offset 9
+	0x0e,
+	0x01, //lce_ref_gain 9
+	0x00,
+	0x66, //lce_block_size h v 0000 0000
+	0xfa, //lce_bright_th
+	0x2d, //lce_bin_size_ratio
+	0x03, //lce_dark_th 000
+	0x96, //lce_min_ref_offset
+	0x03, //nr sharp cs gamma 0000
+	0xff, //nr_mask_th
+	0x00, //sharpen_weight 10
+	0x40,
+	0x00, //sharpen_maxplus 11
+	0xa0,
+	0x00, //sharpen_maxminus 11
+	0xa0,
+	0x01, //cs_gain 10
+	0x20,
+	0x00, //curve_1_b
+	0x20, //curve_1_a
+	0x00, //curve_2_b
+	0x20, //curve_2_a
+	0x00, //curve_3_b
+	0x20, //curve_3_a
+	0x00, //curve_4_b
+	0x20, //curve_4_a
+	0x02, //curve_5_b
+	0x1b, //curve_5_a
+	0x02, //curve_6_b
+	0x1b, //curve_6_a
+	0x02, //curve_7_b
+	0x1b, //curve_7_a
+	0x02, //curve_8_b
+	0x1b, //curve_8_a
+	0x09, //curve_9_b
+	0xa6, //curve_9_a
+	0x09, //curve10_b
+	0xa6, //curve10_a
+	0x09, //curve11_b
+	0xa6, //curve11_a
+	0x09, //curve12_b
+	0xa6, //curve12_a
+	0x00, //curve13_b
+	0x20, //curve13_a
+	0x00, //curve14_b
+	0x20, //curve14_a
+	0x00, //curve15_b
+	0x20, //curve15_a
+	0x00, //curve16_b
+	0x20, //curve16_a
+	0x00, //curve17_b
+	0x20, //curve17_a
+	0x00, //curve18_b
+	0x20, //curve18_a
+	0x00, //curve19_b
+	0x20, //curve19_a
+	0x00, //curve20_b
+	0x20, //curve20_a
+	0x00, //curve21_b
+	0x20, //curve21_a
+	0x00, //curve22_b
+	0x20, //curve22_a
+	0x00, //curve23_b
+	0x20, //curve23_a
+	0x00, //curve24_b
+	0xFF, //curve24_a
+	0x20, //ascr_skin_on strength 0 00000
+	0x67, //ascr_skin_cb
+	0xa9, //ascr_skin_cr
+	0x17, //ascr_dist_up
+	0x29, //ascr_dist_down
+	0x19, //ascr_dist_right
+	0x27, //ascr_dist_left
+	0x00, //ascr_div_up 20
+	0x59,
+	0x0b,
+	0x00, //ascr_div_down
+	0x31,
+	0xf4,
+	0x00, //ascr_div_right
+	0x51,
+	0xec,
+	0x00, //ascr_div_left
+	0x34,
+	0x83,
+	0xff, //ascr_skin_Rr
+	0x00, //ascr_skin_Rg
+	0x00, //ascr_skin_Rb
+	0xff, //ascr_skin_Yr
+	0xff, //ascr_skin_Yg
+	0x00, //ascr_skin_Yb
+	0xff, //ascr_skin_Mr
+	0x00, //ascr_skin_Mg
+	0xff, //ascr_skin_Mb
+	0xff, //ascr_skin_Wr
+	0xff, //ascr_skin_Wg
+	0xff, //ascr_skin_Wb
+	0x7a, //ascr_Cr
+	0xff, //ascr_Rr
+	0xff, //ascr_Cg
+	0x2b, //ascr_Rg
+	0xf1, //ascr_Cb
+	0x2d, //ascr_Rb
+	0xff, //ascr_Mr
+	0x68, //ascr_Gr
+	0x15, //ascr_Mg
+	0xff, //ascr_Gg
+	0xfa, //ascr_Mb
+	0x31, //ascr_Gb
+	0xf8, //ascr_Yr
+	0x34, //ascr_Br
+	0xff, //ascr_Yg
+	0x20, //ascr_Bg
+	0x4b, //ascr_Yb
+	0xff, //ascr_Bb
+	0xff, //ascr_Wr
+	0x00, //ascr_Kr
+	0xf8, //ascr_Wg
+	0x00, //ascr_Kg
+	0xef, //ascr_Wb
+	0x00, //ascr_Kb
+	//end
+};
+char MOVIE_EBOOK_1[] = {
+	//start
+	0xEB,
+	0x01, //mdnie_en
+	0x00, //data_width mask 00 0000
+	0x03, //ascr_roi 1 ascr 00 1 0
+	0x32, //algo_roi 1 algo lce_roi 1 lce 00 1 0 00 1 0
+	0x00, //roi_ctrl 00
+	0x00, //roi0_x_start 12
+	0x00,
+	0x00, //roi0_x_end
+	0x00,
+	0x00, //roi0_y_start
+	0x00,
+	0x00, //roi0_y_end
+	0x00,
+	0x00, //roi1_x_strat
+	0x00,
+	0x00, //roi1_x_end
+	0x00,
+	0x00, //roi1_y_start
+	0x00,
+	0x00, //roi1_y_end
+	0x00,
+
+};
+
+char MOVIE_EBOOK_2[] = {
+	0xEC,
+	0x18, //lce_gain 00 0000
+	0x24, //lce_color_gain 00 0000
+	0x10, //lce_scene_change_on scene_trans 0 0000
+	0x14, //lce_min_diff
+	0xb3, //lce_illum_gain
+	0x01, //lce_ref_offset 9
+	0x0e,
+	0x01, //lce_ref_gain 9
+	0x00,
+	0x66, //lce_block_size h v 0000 0000
+	0xfa, //lce_bright_th
+	0x2d, //lce_bin_size_ratio
+	0x03, //lce_dark_th 000
+	0x96, //lce_min_ref_offset
+	0x03, //nr sharp cs gamma 0000
+	0xff, //nr_mask_th
+	0x00, //sharpen_weight 10
+	0x40,
+	0x00, //sharpen_maxplus 11
+	0xa0,
+	0x00, //sharpen_maxminus 11
+	0xa0,
+	0x01, //cs_gain 10
+	0x20,
+	0x00, //curve_1_b
+	0x20, //curve_1_a
+	0x00, //curve_2_b
+	0x20, //curve_2_a
+	0x00, //curve_3_b
+	0x20, //curve_3_a
+	0x00, //curve_4_b
+	0x20, //curve_4_a
+	0x02, //curve_5_b
+	0x1b, //curve_5_a
+	0x02, //curve_6_b
+	0x1b, //curve_6_a
+	0x02, //curve_7_b
+	0x1b, //curve_7_a
+	0x02, //curve_8_b
+	0x1b, //curve_8_a
+	0x09, //curve_9_b
+	0xa6, //curve_9_a
+	0x09, //curve10_b
+	0xa6, //curve10_a
+	0x09, //curve11_b
+	0xa6, //curve11_a
+	0x09, //curve12_b
+	0xa6, //curve12_a
+	0x00, //curve13_b
+	0x20, //curve13_a
+	0x00, //curve14_b
+	0x20, //curve14_a
+	0x00, //curve15_b
+	0x20, //curve15_a
+	0x00, //curve16_b
+	0x20, //curve16_a
+	0x00, //curve17_b
+	0x20, //curve17_a
+	0x00, //curve18_b
+	0x20, //curve18_a
+	0x00, //curve19_b
+	0x20, //curve19_a
+	0x00, //curve20_b
+	0x20, //curve20_a
+	0x00, //curve21_b
+	0x20, //curve21_a
+	0x00, //curve22_b
+	0x20, //curve22_a
+	0x00, //curve23_b
+	0x20, //curve23_a
+	0x00, //curve24_b
+	0xFF, //curve24_a
+	0x20, //ascr_skin_on strength 0 00000
+	0x67, //ascr_skin_cb
+	0xa9, //ascr_skin_cr
+	0x17, //ascr_dist_up
+	0x29, //ascr_dist_down
+	0x19, //ascr_dist_right
+	0x27, //ascr_dist_left
+	0x00, //ascr_div_up 20
+	0x59,
+	0x0b,
+	0x00, //ascr_div_down
+	0x31,
+	0xf4,
+	0x00, //ascr_div_right
+	0x51,
+	0xec,
+	0x00, //ascr_div_left
+	0x34,
+	0x83,
+	0xff, //ascr_skin_Rr
+	0x00, //ascr_skin_Rg
+	0x00, //ascr_skin_Rb
+	0xff, //ascr_skin_Yr
+	0xff, //ascr_skin_Yg
+	0x00, //ascr_skin_Yb
+	0xff, //ascr_skin_Mr
+	0x00, //ascr_skin_Mg
+	0xff, //ascr_skin_Mb
+	0xff, //ascr_skin_Wr
+	0xff, //ascr_skin_Wg
+	0xff, //ascr_skin_Wb
+	0x7a, //ascr_Cr
+	0xff, //ascr_Rr
+	0xff, //ascr_Cg
+	0x2b, //ascr_Rg
+	0xf1, //ascr_Cb
+	0x2d, //ascr_Rb
+	0xff, //ascr_Mr
+	0x68, //ascr_Gr
+	0x15, //ascr_Mg
+	0xff, //ascr_Gg
+	0xfa, //ascr_Mb
+	0x31, //ascr_Gb
+	0xf8, //ascr_Yr
+	0x34, //ascr_Br
+	0xff, //ascr_Yg
+	0x20, //ascr_Bg
+	0x4b, //ascr_Yb
+	0xff, //ascr_Bb
+	0xff, //ascr_Wr
+	0x00, //ascr_Kr
+	0xf8, //ascr_Wg
+	0x00, //ascr_Kg
+	0xef, //ascr_Wb
+	0x00, //ascr_Kb
+	//end
+
+};
+char AUTO_EBOOK_1[] = {
+	//start
+	0xEB,
+	0x01, //mdnie_en
+	0x00, //data_width mask 00 0000
+	0x03, //ascr_roi 1 ascr 00 1 0
+	0x02, //algo_roi 1 algo lce_roi 1 lce 00 1 0 00 1 0
+	0x00, //roi_ctrl 00
+	0x00, //roi0_x_start 12
+	0x00,
+	0x00, //roi0_x_end
+	0x00,
+	0x00, //roi0_y_start
+	0x00,
+	0x00, //roi0_y_end
+	0x00,
+	0x00, //roi1_x_strat
+	0x00,
+	0x00, //roi1_x_end
+	0x00,
+	0x00, //roi1_y_start
+	0x00,
+	0x00, //roi1_y_end
+	0x00,
+
+};
+
+char AUTO_EBOOK_2[] = {
+	0xEC,
+	0x18, //lce_gain 00 0000
+	0x24, //lce_color_gain 00 0000
+	0x10, //lce_scene_change_on scene_trans 0 0000
+	0x14, //lce_min_diff
+	0xb3, //lce_illum_gain
+	0x01, //lce_ref_offset 9
+	0x0e,
+	0x01, //lce_ref_gain 9
+	0x00,
+	0x66, //lce_block_size h v 0000 0000
+	0xfa, //lce_bright_th
+	0x2d, //lce_bin_size_ratio
+	0x03, //lce_dark_th 000
+	0x96, //lce_min_ref_offset
+	0x00, //nr sharp cs gamma 0000
+	0xff, //nr_mask_th
+	0x00, //sharpen_weight 10
+	0x40,
+	0x00, //sharpen_maxplus 11
+	0xa0,
+	0x00, //sharpen_maxminus 11
+	0xa0,
+	0x01, //cs_gain 10
+	0x00,
+	0x00, //curve_1_b
+	0x20, //curve_1_a
+	0x00, //curve_2_b
+	0x20, //curve_2_a
+	0x00, //curve_3_b
+	0x20, //curve_3_a
+	0x00, //curve_4_b
+	0x20, //curve_4_a
+	0x02, //curve_5_b
+	0x1b, //curve_5_a
+	0x02, //curve_6_b
+	0x1b, //curve_6_a
+	0x02, //curve_7_b
+	0x1b, //curve_7_a
+	0x02, //curve_8_b
+	0x1b, //curve_8_a
+	0x09, //curve_9_b
+	0xa6, //curve_9_a
+	0x09, //curve10_b
+	0xa6, //curve10_a
+	0x09, //curve11_b
+	0xa6, //curve11_a
+	0x09, //curve12_b
+	0xa6, //curve12_a
+	0x00, //curve13_b
+	0x20, //curve13_a
+	0x00, //curve14_b
+	0x20, //curve14_a
+	0x00, //curve15_b
+	0x20, //curve15_a
+	0x00, //curve16_b
+	0x20, //curve16_a
+	0x00, //curve17_b
+	0x20, //curve17_a
+	0x00, //curve18_b
+	0x20, //curve18_a
+	0x00, //curve19_b
+	0x20, //curve19_a
+	0x00, //curve20_b
+	0x20, //curve20_a
+	0x00, //curve21_b
+	0x20, //curve21_a
+	0x00, //curve22_b
+	0x20, //curve22_a
+	0x00, //curve23_b
+	0x20, //curve23_a
+	0x00, //curve24_b
+	0xFF, //curve24_a
+	0x20, //ascr_skin_on strength 0 00000
+	0x67, //ascr_skin_cb
+	0xa9, //ascr_skin_cr
+	0x17, //ascr_dist_up
+	0x29, //ascr_dist_down
+	0x19, //ascr_dist_right
+	0x27, //ascr_dist_left
+	0x00, //ascr_div_up 20
+	0x59,
+	0x0b,
+	0x00, //ascr_div_down
+	0x31,
+	0xf4,
+	0x00, //ascr_div_right
+	0x51,
+	0xec,
+	0x00, //ascr_div_left
+	0x34,
+	0x83,
+	0xff, //ascr_skin_Rr
+	0x00, //ascr_skin_Rg
+	0x00, //ascr_skin_Rb
+	0xff, //ascr_skin_Yr
+	0xff, //ascr_skin_Yg
+	0x00, //ascr_skin_Yb
+	0xff, //ascr_skin_Mr
+	0x00, //ascr_skin_Mg
+	0xff, //ascr_skin_Mb
+	0xff, //ascr_skin_Wr
+	0xff, //ascr_skin_Wg
+	0xff, //ascr_skin_Wb
+	0x00, //ascr_Cr
+	0xff, //ascr_Rr
+	0xff, //ascr_Cg
+	0x00, //ascr_Rg
+	0xff, //ascr_Cb
+	0x00, //ascr_Rb
+	0xff, //ascr_Mr
+	0x00, //ascr_Gr
+	0x00, //ascr_Mg
+	0xff, //ascr_Gg
+	0xff, //ascr_Mb
+	0x00, //ascr_Gb
+	0xff, //ascr_Yr
+	0x00, //ascr_Br
+	0xff, //ascr_Yg
+	0x00, //ascr_Bg
+	0x00, //ascr_Yb
+	0xff, //ascr_Bb
+	0xff, //ascr_Wr
+	0x00, //ascr_Kr
+	0xf6, //ascr_Wg
+	0x00, //ascr_Kg
+	0xe6, //ascr_Wb
+	0x00, //ascr_Kb
+	//end
+
+};
+
+char AUTO_EMAIL_1[] = {
+	//start
+	0xEB,
+	0x01, //mdnie_en
+	0x00, //data_width mask 00 0000
+	0x03, //ascr_roi 1 ascr 00 1 0
+	0x02, //algo_roi 1 algo lce_roi 1 lce 00 1 0 00 1 0
+	0x00, //roi_ctrl 00
+	0x00, //roi0_x_start 12
+	0x00,
+	0x00, //roi0_x_end
+	0x00,
+	0x00, //roi0_y_start
+	0x00,
+	0x00, //roi0_y_end
+	0x00,
+	0x00, //roi1_x_strat
+	0x00,
+	0x00, //roi1_x_end
+	0x00,
+	0x00, //roi1_y_start
+	0x00,
+	0x00, //roi1_y_end
+	0x00,
+};
+
+char AUTO_EMAIL_2[] = {
+	0xEC,
+	0x18, //lce_gain 00 0000
+	0x24, //lce_color_gain 00 0000
+	0x10, //lce_scene_change_on scene_trans 0 0000
+	0x14, //lce_min_diff
+	0xb3, //lce_illum_gain
+	0x01, //lce_ref_offset 9
+	0x0e,
+	0x01, //lce_ref_gain 9
+	0x00,
+	0x66, //lce_block_size h v 0000 0000
+	0xfa, //lce_bright_th
+	0x2d, //lce_bin_size_ratio
+	0x03, //lce_dark_th 000
+	0x96, //lce_min_ref_offset
+	0x00, //nr sharp cs gamma 0000
+	0xff, //nr_mask_th
+	0x00, //sharpen_weight 10
+	0x40,
+	0x00, //sharpen_maxplus 11
+	0xa0,
+	0x00, //sharpen_maxminus 11
+	0xa0,
+	0x01, //cs_gain 10
+	0x00,
+	0x00, //curve_1_b
+	0x20, //curve_1_a
+	0x00, //curve_2_b
+	0x20, //curve_2_a
+	0x00, //curve_3_b
+	0x20, //curve_3_a
+	0x00, //curve_4_b
+	0x20, //curve_4_a
+	0x02, //curve_5_b
+	0x1b, //curve_5_a
+	0x02, //curve_6_b
+	0x1b, //curve_6_a
+	0x02, //curve_7_b
+	0x1b, //curve_7_a
+	0x02, //curve_8_b
+	0x1b, //curve_8_a
+	0x09, //curve_9_b
+	0xa6, //curve_9_a
+	0x09, //curve10_b
+	0xa6, //curve10_a
+	0x09, //curve11_b
+	0xa6, //curve11_a
+	0x09, //curve12_b
+	0xa6, //curve12_a
+	0x00, //curve13_b
+	0x20, //curve13_a
+	0x00, //curve14_b
+	0x20, //curve14_a
+	0x00, //curve15_b
+	0x20, //curve15_a
+	0x00, //curve16_b
+	0x20, //curve16_a
+	0x00, //curve17_b
+	0x20, //curve17_a
+	0x00, //curve18_b
+	0x20, //curve18_a
+	0x00, //curve19_b
+	0x20, //curve19_a
+	0x00, //curve20_b
+	0x20, //curve20_a
+	0x00, //curve21_b
+	0x20, //curve21_a
+	0x00, //curve22_b
+	0x20, //curve22_a
+	0x00, //curve23_b
+	0x20, //curve23_a
+	0x00, //curve24_b
+	0xFF, //curve24_a
+	0x20, //ascr_skin_on strength 0 00000
+	0x67, //ascr_skin_cb
+	0xa9, //ascr_skin_cr
+	0x17, //ascr_dist_up
+	0x29, //ascr_dist_down
+	0x19, //ascr_dist_right
+	0x27, //ascr_dist_left
+	0x00, //ascr_div_up 20
+	0x59,
+	0x0b,
+	0x00, //ascr_div_down
+	0x31,
+	0xf4,
+	0x00, //ascr_div_right
+	0x51,
+	0xec,
+	0x00, //ascr_div_left
+	0x34,
+	0x83,
+	0xff, //ascr_skin_Rr
+	0x00, //ascr_skin_Rg
+	0x00, //ascr_skin_Rb
+	0xff, //ascr_skin_Yr
+	0xff, //ascr_skin_Yg
+	0x00, //ascr_skin_Yb
+	0xff, //ascr_skin_Mr
+	0x00, //ascr_skin_Mg
+	0xff, //ascr_skin_Mb
+	0xff, //ascr_skin_Wr
+	0xff, //ascr_skin_Wg
+	0xff, //ascr_skin_Wb
+	0x00, //ascr_Cr
+	0xff, //ascr_Rr
+	0xff, //ascr_Cg
+	0x00, //ascr_Rg
+	0xff, //ascr_Cb
+	0x00, //ascr_Rb
+	0xff, //ascr_Mr
+	0x00, //ascr_Gr
+	0x00, //ascr_Mg
+	0xff, //ascr_Gg
+	0xff, //ascr_Mb
+	0x00, //ascr_Gb
+	0xff, //ascr_Yr
+	0x00, //ascr_Br
+	0xff, //ascr_Yg
+	0x00, //ascr_Bg
+	0x00, //ascr_Yb
+	0xff, //ascr_Bb
+	0xff, //ascr_Wr
+	0x00, //ascr_Kr
+	0xfa, //ascr_Wg
+	0x00, //ascr_Kg
+	0xef, //ascr_Wb
+	0x00, //ascr_Kb
+	//end
+};
+
+#if defined(CONFIG_LCD_HMT)
+char HMT_GRAY_8_1[] = {
+	//start
+	0xEB,
+	0x01, //mdnie_en
+	0x00, //data_width mask 00 0000
+	0x02, //ascr_roi 1 ascr 00 1 0
+	0x32, //algo_roi 1 algo lce_roi 1 lce 00 1 0 00 1 0
+	0x00, //roi_ctrl 00
+	0x00, //roi0_x_start 12
+	0x00,
+	0x00, //roi0_x_end
+	0x00,
+	0x00, //roi0_y_start
+	0x00,
+	0x00, //roi0_y_end
+	0x00,
+	0x00, //roi1_x_strat
+	0x00,
+	0x00, //roi1_x_end
+	0x00,
+	0x00, //roi1_y_start
+	0x00,
+	0x00, //roi1_y_end
+	0x00,
+};
+
+char HMT_GRAY_8_2[] = {
+	0xEC,
+	0x18, //lce_gain 00 0000
+	0x24, //lce_color_gain 00 0000
+	0x10, //lce_scene_change_on scene_trans 0 0000
+	0x14, //lce_min_diff
+	0xb3, //lce_illum_gain
+	0x01, //lce_ref_offset 9
+	0x0e,
+	0x01, //lce_ref_gain 9
+	0x00,
+	0x66, //lce_block_size h v 0000 0000
+	0xfa, //lce_bright_th
+	0x2d, //lce_bin_size_ratio
+	0x03, //lce_dark_th 000
+	0x96, //lce_min_ref_offset
+	0x01, //nr sharp cs gamma 0000
+	0xff, //nr_mask_th
+	0x00, //sharpen_weight 10
+	0x40,
+	0x00, //sharpen_maxplus 11
+	0xa0,
+	0x00, //sharpen_maxminus 11
+	0xa0,
+	0x01, //cs_gain 10
+	0x00,
+	0x08, //curve_1_b
+	0x00, //curve_1_a
+	0x08, //curve_2_b
+	0x00, //curve_2_a
+	0x00, //curve_3_b
+	0x20, //curve_3_a
+	0x00, //curve_4_b
+	0x20, //curve_4_a
+	0x00, //curve_5_b
+	0x20, //curve_5_a
+	0x00, //curve_6_b
+	0x20, //curve_6_a
+	0x00, //curve_7_b
+	0x20, //curve_7_a
+	0x00, //curve_8_b
+	0x20, //curve_8_a
+	0x00, //curve_9_b
+	0x20, //curve_9_a
+	0x00, //curve10_b
+	0x20, //curve10_a
+	0x00, //curve11_b
+	0x20, //curve11_a
+	0x00, //curve12_b
+	0x20, //curve12_a
+	0x00, //curve13_b
+	0x20, //curve13_a
+	0x00, //curve14_b
+	0x20, //curve14_a
+	0x00, //curve15_b
+	0x20, //curve15_a
+	0x00, //curve16_b
+	0x20, //curve16_a
+	0x00, //curve17_b
+	0x20, //curve17_a
+	0x00, //curve18_b
+	0x20, //curve18_a
+	0x00, //curve19_b
+	0x20, //curve19_a
+	0x00, //curve20_b
+	0x20, //curve20_a
+	0x00, //curve21_b
+	0x20, //curve21_a
+	0x00, //curve22_b
+	0x20, //curve22_a
+	0x00, //curve23_b
+	0x20, //curve23_a
+	0x00, //curve24_b
+	0xFF, //curve24_a
+	0x20, //ascr_skin_on strength 0 00000
+	0x67, //ascr_skin_cb
+	0xa9, //ascr_skin_cr
+	0x17, //ascr_dist_up
+	0x29, //ascr_dist_down
+	0x19, //ascr_dist_right
+	0x27, //ascr_dist_left
+	0x00, //ascr_div_up 20
+	0x59,
+	0x0b,
+	0x00, //ascr_div_down
+	0x31,
+	0xf4,
+	0x00, //ascr_div_right
+	0x51,
+	0xec,
+	0x00, //ascr_div_left
+	0x34,
+	0x83,
+	0xff, //ascr_skin_Rr
+	0x00, //ascr_skin_Rg
+	0x00, //ascr_skin_Rb
+	0xff, //ascr_skin_Yr
+	0xff, //ascr_skin_Yg
+	0x00, //ascr_skin_Yb
+	0xff, //ascr_skin_Mr
+	0x00, //ascr_skin_Mg
+	0xff, //ascr_skin_Mb
+	0xff, //ascr_skin_Wr
+	0xff, //ascr_skin_Wg
+	0xff, //ascr_skin_Wb
+	0x00, //ascr_Cr
+	0xff, //ascr_Rr
+	0xff, //ascr_Cg
+	0x00, //ascr_Rg
+	0xff, //ascr_Cb
+	0x00, //ascr_Rb
+	0xff, //ascr_Mr
+	0x00, //ascr_Gr
+	0x00, //ascr_Mg
+	0xff, //ascr_Gg
+	0xff, //ascr_Mb
+	0x00, //ascr_Gb
+	0xff, //ascr_Yr
+	0x00, //ascr_Br
+	0xff, //ascr_Yg
+	0x00, //ascr_Bg
+	0x00, //ascr_Yb
+	0xff, //ascr_Bb
+	0xff, //ascr_Wr
+	0x00, //ascr_Kr
+	0xff, //ascr_Wg
+	0x00, //ascr_Kg
+	0xff, //ascr_Wb
+	0x00, //ascr_Kb
+	//end
+};
+
+char HMT_GRAY_16_1[] = {
+	//start
+	0xEB,
+	0x01, //mdnie_en
+	0x00, //data_width mask 00 0000
+	0x02, //ascr_roi 1 ascr 00 1 0
+	0x32, //algo_roi 1 algo lce_roi 1 lce 00 1 0 00 1 0
+	0x00, //roi_ctrl 00
+	0x00, //roi0_x_start 12
+	0x00,
+	0x00, //roi0_x_end
+	0x00,
+	0x00, //roi0_y_start
+	0x00,
+	0x00, //roi0_y_end
+	0x00,
+	0x00, //roi1_x_strat
+	0x00,
+	0x00, //roi1_x_end
+	0x00,
+	0x00, //roi1_y_start
+	0x00,
+	0x00, //roi1_y_end
+	0x00,
+};
+
+char HMT_GRAY_16_2[] = {
+	0xEC,
+	0x18, //lce_gain 00 0000
+	0x24, //lce_color_gain 00 0000
+	0x10, //lce_scene_change_on scene_trans 0 0000
+	0x14, //lce_min_diff
+	0xb3, //lce_illum_gain
+	0x01, //lce_ref_offset 9
+	0x0e,
+	0x01, //lce_ref_gain 9
+	0x00,
+	0x66, //lce_block_size h v 0000 0000
+	0xfa, //lce_bright_th
+	0x2d, //lce_bin_size_ratio
+	0x03, //lce_dark_th 000
+	0x96, //lce_min_ref_offset
+	0x01, //nr sharp cs gamma 0000
+	0xff, //nr_mask_th
+	0x00, //sharpen_weight 10
+	0x40,
+	0x00, //sharpen_maxplus 11
+	0xa0,
+	0x00, //sharpen_maxminus 11
+	0xa0,
+	0x01, //cs_gain 10
+	0x00,
+	0x10, //curve_1_b
+	0x00, //curve_1_a
+	0x10, //curve_2_b
+	0x00, //curve_2_a
+	0x10, //curve_3_b
+	0x00, //curve_3_a
+	0x10, //curve_4_b
+	0x00, //curve_4_a
+	0x00, //curve_5_b
+	0x20, //curve_5_a
+	0x00, //curve_6_b
+	0x20, //curve_6_a
+	0x00, //curve_7_b
+	0x20, //curve_7_a
+	0x00, //curve_8_b
+	0x20, //curve_8_a
+	0x00, //curve_9_b
+	0x20, //curve_9_a
+	0x00, //curve10_b
+	0x20, //curve10_a
+	0x00, //curve11_b
+	0x20, //curve11_a
+	0x00, //curve12_b
+	0x20, //curve12_a
+	0x00, //curve13_b
+	0x20, //curve13_a
+	0x00, //curve14_b
+	0x20, //curve14_a
+	0x00, //curve15_b
+	0x20, //curve15_a
+	0x00, //curve16_b
+	0x20, //curve16_a
+	0x00, //curve17_b
+	0x20, //curve17_a
+	0x00, //curve18_b
+	0x20, //curve18_a
+	0x00, //curve19_b
+	0x20, //curve19_a
+	0x00, //curve20_b
+	0x20, //curve20_a
+	0x00, //curve21_b
+	0x20, //curve21_a
+	0x00, //curve22_b
+	0x20, //curve22_a
+	0x00, //curve23_b
+	0x20, //curve23_a
+	0x00, //curve24_b
+	0xFF, //curve24_a
+	0x20, //ascr_skin_on strength 0 00000
+	0x67, //ascr_skin_cb
+	0xa9, //ascr_skin_cr
+	0x17, //ascr_dist_up
+	0x29, //ascr_dist_down
+	0x19, //ascr_dist_right
+	0x27, //ascr_dist_left
+	0x00, //ascr_div_up 20
+	0x59,
+	0x0b,
+	0x00, //ascr_div_down
+	0x31,
+	0xf4,
+	0x00, //ascr_div_right
+	0x51,
+	0xec,
+	0x00, //ascr_div_left
+	0x34,
+	0x83,
+	0xff, //ascr_skin_Rr
+	0x00, //ascr_skin_Rg
+	0x00, //ascr_skin_Rb
+	0xff, //ascr_skin_Yr
+	0xff, //ascr_skin_Yg
+	0x00, //ascr_skin_Yb
+	0xff, //ascr_skin_Mr
+	0x00, //ascr_skin_Mg
+	0xff, //ascr_skin_Mb
+	0xff, //ascr_skin_Wr
+	0xff, //ascr_skin_Wg
+	0xff, //ascr_skin_Wb
+	0x00, //ascr_Cr
+	0xff, //ascr_Rr
+	0xff, //ascr_Cg
+	0x00, //ascr_Rg
+	0xff, //ascr_Cb
+	0x00, //ascr_Rb
+	0xff, //ascr_Mr
+	0x00, //ascr_Gr
+	0x00, //ascr_Mg
+	0xff, //ascr_Gg
+	0xff, //ascr_Mb
+	0x00, //ascr_Gb
+	0xff, //ascr_Yr
+	0x00, //ascr_Br
+	0xff, //ascr_Yg
+	0x00, //ascr_Bg
+	0x00, //ascr_Yb
+	0xff, //ascr_Bb
+	0xff, //ascr_Wr
+	0x00, //ascr_Kr
+	0xff, //ascr_Wg
+	0x00, //ascr_Kg
+	0xff, //ascr_Wb
+	0x00, //ascr_Kb
+	//end
+};
+#endif
+char LOCAL_CE_1[] = {
+	//start
+	0xEB,
+	0x01, //mdnie_en
+	0x00, //data_width mask 00 0000
+	0x00, //ascr_roi 1 ascr 00 1 0
+	0x33, //algo_roi 1 algo lce_roi 1 lce 00 1 0 00 1 0
+	0x00, //roi_ctrl 00
+	0x00, //roi0_x_start 12
+	0x00,
+	0x00, //roi0_x_end
+	0x00,
+	0x00, //roi0_y_start
+	0x00,
+	0x00, //roi0_y_end
+	0x00,
+	0x00, //roi1_x_strat
+	0x00,
+	0x00, //roi1_x_end
+	0x00,
+	0x00, //roi1_y_start
+	0x00,
+	0x00, //roi1_y_end
+	0x00,
+};
+
+char LOCAL_CE_2[] = {
+	0xEC,
+	0x06, //lce_gain 00 0000
+	0x30, //lce_color_gain 00 0000
+	0x00, //lce_scene_change_on scene_trans 0 0000
+	0x14, //lce_min_diff
+	0x79, //lce_illum_gain
+	0x01, //lce_ref_offset 9
+	0xbf,
+	0x00, //lce_ref_gain 9
+	0xb0,
+	0x77, //lce_block_size h v 0000 0000
+	0xfa, //lce_bright_th
+	0x7f, //lce_bin_size_ratio
+	0x00, //lce_dark_th 000
+	0x40, //lce_min_ref_offset
+	0x05, //nr sharp cs gamma 0000
+	0xff, //nr_mask_th
+	0x00, //sharpen_weight 10
+	0x40,
+	0x00, //sharpen_maxplus 11
+	0xa0,
+	0x00, //sharpen_maxminus 11
+	0xa0,
+	0x01, //cs_gain 10
+	0x90,
+	0x00, //curve_1_b
+	0x7b, //curve_1_a
+	0x03, //curve_2_b
+	0x48, //curve_2_a
+	0x08, //curve_3_b
+	0x32, //curve_3_a
+	0x08, //curve_4_b
+	0x32, //curve_4_a
+	0x08, //curve_5_b
+	0x32, //curve_5_a
+	0x08, //curve_6_b
+	0x32, //curve_6_a
+	0x08, //curve_7_b
+	0x32, //curve_7_a
+	0x10, //curve_8_b
+	0x28, //curve_8_a
+	0x10, //curve_9_b
+	0x28, //curve_9_a
+	0x10, //curve10_b
+	0x28, //curve10_a
+	0x10, //curve11_b
+	0x28, //curve11_a
+	0x10, //curve12_b
+	0x28, //curve12_a
+	0x19, //curve13_b
+	0x22, //curve13_a
+	0x19, //curve14_b
+	0x22, //curve14_a
+	0x19, //curve15_b
+	0x22, //curve15_a
+	0x19, //curve16_b
+	0x22, //curve16_a
+	0x19, //curve17_b
+	0x22, //curve17_a
+	0x19, //curve18_b
+	0x22, //curve18_a
+	0x23, //curve19_b
+	0x1e, //curve19_a
+	0x2e, //curve20_b
+	0x1b, //curve20_a
+	0x33, //curve21_b
+	0x1a, //curve21_a
+	0x40, //curve22_b
+	0x18, //curve22_a
+	0x48, //curve23_b
+	0x17, //curve23_a
+	0x00, //curve24_b
+	0xFF, //curve24_a
+	0x2f, //ascr_skin_on strength 0 00000
+	0x67, //ascr_skin_cb
+	0xa9, //ascr_skin_cr
+	0x4e, //ascr_dist_up
+	0x29, //ascr_dist_down
+	0x19, //ascr_dist_right
+	0x5f, //ascr_dist_left
+	0x00, //ascr_div_up 20
+	0x1a,
+	0x74,
+	0x00, //ascr_div_down
+	0x31,
+	0xf4,
+	0x00, //ascr_div_right
+	0x51,
+	0xec,
+	0x00, //ascr_div_left
+	0x15,
+	0x8f,
+	0xff, //ascr_skin_Rr
+	0x20, //ascr_skin_Rg
+	0x20, //ascr_skin_Rb
+	0xff, //ascr_skin_Yr
+	0xff, //ascr_skin_Yg
+	0x00, //ascr_skin_Yb
+	0xff, //ascr_skin_Mr
+	0x00, //ascr_skin_Mg
+	0xff, //ascr_skin_Mb
+	0xff, //ascr_skin_Wr
+	0xff, //ascr_skin_Wg
+	0xff, //ascr_skin_Wb
+	0x00, //ascr_Cr
+	0xff, //ascr_Rr
+	0xff, //ascr_Cg
+	0x00, //ascr_Rg
+	0xff, //ascr_Cb
+	0x00, //ascr_Rb
+	0xff, //ascr_Mr
+	0x00, //ascr_Gr
+	0x00, //ascr_Mg
+	0xff, //ascr_Gg
+	0xff, //ascr_Mb
+	0x00, //ascr_Gb
+	0xff, //ascr_Yr
+	0x00, //ascr_Br
+	0xff, //ascr_Yg
+	0x00, //ascr_Bg
+	0x00, //ascr_Yb
+	0xff, //ascr_Bb
+	0xff, //ascr_Wr
+	0x00, //ascr_Kr
+	0xff, //ascr_Wg
+	0x00, //ascr_Kg
+	0xff, //ascr_Wb
+	0x00, //ascr_Kb
+	//end
+};
+
+char LOCAL_CE_1_ENHENCED[] = {
+	//start
+	0xEB,
+	0x01, //mdnie_en
+	0x00, //data_width mask 00 0000
+	0x03, //ascr_roi 1 ascr 00 1 0
+	0x33, //algo_roi 1 algo lce_roi 1 lce 00 1 0 00 1 0
+	0x00, //roi_ctrl 00
+	0x00, //roi0_x_start 12
+	0x00,
+	0x00, //roi0_x_end
+	0x00,
+	0x00, //roi0_y_start
+	0x00,
+	0x00, //roi0_y_end
+	0x00,
+	0x00, //roi1_x_strat
+	0x00,
+	0x00, //roi1_x_end
+	0x00,
+	0x00, //roi1_y_start
+	0x00,
+	0x00, //roi1_y_end
+	0x00,
+};
+
+char LOCAL_CE_2_ENHENCED[] = {
+	0xEC,
+	0x06, //lce_gain 00 0000
+	0x30, //lce_color_gain 00 0000
+	0x00, //lce_scene_change_on scene_trans 0 0000
+	0x14, //lce_min_diff
+	0x90, //lce_illum_gain
+	0x01, //lce_ref_offset 9
+	0xbf,
+	0x00, //lce_ref_gain 9
+	0xb0,
+	0x77, //lce_block_size h v 0000 0000
+	0xfa, //lce_bright_th
+	0x7f, //lce_bin_size_ratio
+	0x00, //lce_dark_th 000
+	0x40, //lce_min_ref_offset
+	0x07, //nr sharp cs gamma 0000
+	0xff, //nr_mask_th
+	0x00, //sharpen_weight 10
+	0x40,
+	0x00, //sharpen_maxplus 11
+	0xa0,
+	0x00, //sharpen_maxminus 11
+	0xa0,
+	0x01, //cs_gain 10
+	0x40,
+	0x00, //curve_1_b
+	0x7b, //curve_1_a
+	0x03, //curve_2_b
+	0x48, //curve_2_a
+	0x08, //curve_3_b
+	0x32, //curve_3_a
+	0x08, //curve_4_b
+	0x32, //curve_4_a
+	0x08, //curve_5_b
+	0x32, //curve_5_a
+	0x08, //curve_6_b
+	0x32, //curve_6_a
+	0x08, //curve_7_b
+	0x32, //curve_7_a
+	0x10, //curve_8_b
+	0x28, //curve_8_a
+	0x10, //curve_9_b
+	0x28, //curve_9_a
+	0x10, //curve10_b
+	0x28, //curve10_a
+	0x10, //curve11_b
+	0x28, //curve11_a
+	0x10, //curve12_b
+	0x28, //curve12_a
+	0x19, //curve13_b
+	0x22, //curve13_a
+	0x70, //curve14_b
+	0xf7, //curve14_a
+	0x70, //curve15_b
+	0xf7, //curve15_a
+	0x70, //curve16_b
+	0xf7, //curve16_a
+	0x70, //curve17_b
+	0xf7, //curve17_a
+	0x66, //curve18_b
+	0x1a, //curve18_a
+	0x76, //curve19_b
+	0x14, //curve19_a
+	0x82, //curve20_b
+	0x11, //curve20_a
+	0x92, //curve21_b
+	0x0e, //curve21_a
+	0x98, //curve22_b
+	0x0d, //curve22_a
+	0x9f, //curve23_b
+	0x0c, //curve23_a
+	0x00, //curve24_b
+	0xFF, //curve24_a
+	0x30, //ascr_skin_on strength 0 00000
+	0x67, //ascr_skin_cb
+	0xa9, //ascr_skin_cr
+	0x17, //ascr_dist_up
+	0x29, //ascr_dist_down
+	0x19, //ascr_dist_right
+	0x27, //ascr_dist_left
+	0x00, //ascr_div_up 20
+	0x59,
+	0x0b,
+	0x00, //ascr_div_down
+	0x31,
+	0xf4,
+	0x00, //ascr_div_right
+	0x51,
+	0xec,
+	0x00, //ascr_div_left
+	0x34,
+	0x83,
+	0xff, //ascr_skin_Rr
+	0x50, //ascr_skin_Rg
+	0x60, //ascr_skin_Rb
+	0xff, //ascr_skin_Yr
+	0xff, //ascr_skin_Yg
+	0x00, //ascr_skin_Yb
+	0xff, //ascr_skin_Mr
+	0x00, //ascr_skin_Mg
+	0xff, //ascr_skin_Mb
+	0xff, //ascr_skin_Wr
+	0xff, //ascr_skin_Wg
+	0xff, //ascr_skin_Wb
+	0x00, //ascr_Cr
+	0xff, //ascr_Rr
+	0xff, //ascr_Cg
+	0x00, //ascr_Rg
+	0xff, //ascr_Cb
+	0x00, //ascr_Rb
+	0xff, //ascr_Mr
+	0x00, //ascr_Gr
+	0x00, //ascr_Mg
+	0xff, //ascr_Gg
+	0xff, //ascr_Mb
+	0x00, //ascr_Gb
+	0xff, //ascr_Yr
+	0x00, //ascr_Br
+	0xff, //ascr_Yg
+	0x00, //ascr_Bg
+	0x00, //ascr_Yb
+	0xff, //ascr_Bb
+	0xff, //ascr_Wr
+	0x00, //ascr_Kr
+	0xff, //ascr_Wg
+	0x00, //ascr_Kg
+	0xff, //ascr_Wb
+	0x00, //ascr_Kb
+	//end
+};
+
+
+
+char *blind_tune_value[ACCESSIBILITY_MAX][2] = {
+		/*
+			ACCESSIBILITY_OFF,
+			NEGATIVE,
+			COLOR_BLIND,
+			SCREEN_CURTAIN,
+		*/
+		{NULL, NULL},
+		{NEGATIVE_1, NEGATIVE_2},
+		{COLOR_BLIND_1, COLOR_BLIND_2},
+		{SCREEN_CURTAIN_1, SCREEN_CURTAIN_2},
+		{GRAYSCALE_1, GRAYSCALE_2},
+		{GRAYSCALE_NEGATIVE_1, GRAYSCALE_NEGATIVE_2}
+};
+
+char *mdnie_tune_value[MAX_mDNIe_MODE][MAX_BACKGROUND_MODE][MAX_OUTDOOR_MODE][2] = {
+		/*
+			DYNAMIC_MODE (outdoor off/on)
+			STANDARD_MODE (outdoor off/on)
+			NATURAL_MODE (outdoor off/on)
+			MOVIE_MODE (outdoor off/on)
+			AUTO_MODE (outdoor off/on)
+		*/
+		// UI_APP
+		{
+			{{DYNAMIC_UI_1, DYNAMIC_UI_2}, {NULL, NULL}},
+			{{STANDARD_UI_1, STANDARD_UI_2}, {NULL, NULL}},
+			{{NATURAL_UI_1, NATURAL_UI_2}, {NULL, NULL}},
+			{{MOVIE_UI_1, MOVIE_UI_2}, {NULL, NULL}},
+			{{AUTO_UI_1, AUTO_UI_2}, {NULL, NULL}},
+		},
+		// VIDEO_APP
+		{
+			{{DYNAMIC_VIDEO_1, DYNAMIC_VIDEO_2}, {OUTDOOR_VIDEO_1, OUTDOOR_VIDEO_2}},
+			{{STANDARD_VIDEO_1, STANDARD_VIDEO_2}, {OUTDOOR_VIDEO_1, OUTDOOR_VIDEO_2}},
+			{{NATURAL_VIDEO_1, NATURAL_VIDEO_2}, {OUTDOOR_VIDEO_1, OUTDOOR_VIDEO_2}},
+			{{MOVIE_VIDEO_1, MOVIE_VIDEO_2}, {OUTDOOR_VIDEO_1, OUTDOOR_VIDEO_2}},
+			{{AUTO_VIDEO_1, AUTO_VIDEO_2}, {OUTDOOR_VIDEO_1, OUTDOOR_VIDEO_2}},
+		},
+		// VIDEO_WARM_APP
+		{
+			{{WARM_1, WARM_2}, {WARM_OUTDOOR_1, WARM_OUTDOOR_2}},
+			{{WARM_1, WARM_2}, {WARM_OUTDOOR_1, WARM_OUTDOOR_2}},
+			{{WARM_1, WARM_2}, {WARM_OUTDOOR_1, WARM_OUTDOOR_2}},
+			{{WARM_1, WARM_2}, {WARM_OUTDOOR_1, WARM_OUTDOOR_2}},
+			{{WARM_1, WARM_2}, {WARM_OUTDOOR_1, WARM_OUTDOOR_2}},
+		},
+		// VIDEO_COLD_APP
+		{
+			{{COLD_1, COLD_2}, {COLD_OUTDOOR_1, COLD_OUTDOOR_2}},
+			{{COLD_1, COLD_2}, {COLD_OUTDOOR_1, COLD_OUTDOOR_2}},
+			{{COLD_1, COLD_2}, {COLD_OUTDOOR_1, COLD_OUTDOOR_2}},
+			{{COLD_1, COLD_2}, {COLD_OUTDOOR_1, COLD_OUTDOOR_2}},
+			{{COLD_1, COLD_2}, {COLD_OUTDOOR_1, COLD_OUTDOOR_2}},
+		},
+		// CAMERA_APP
+		{
+			{{CAMERA_1, CAMERA_2}, {CAMERA_OUTDOOR_1, CAMERA_OUTDOOR_2}},
+			{{CAMERA_1, CAMERA_2}, {CAMERA_OUTDOOR_1, CAMERA_OUTDOOR_2}},
+			{{CAMERA_1, CAMERA_2}, {CAMERA_OUTDOOR_1, CAMERA_OUTDOOR_2}},
+			{{CAMERA_1, CAMERA_2}, {CAMERA_OUTDOOR_1, CAMERA_OUTDOOR_2}},
+			{{AUTO_CAMERA_1, AUTO_CAMERA_2}, {CAMERA_OUTDOOR_1, CAMERA_OUTDOOR_2}},
+		},
+		// NAVI_APP
+		{
+			{{NULL, NULL}, {NULL, NULL}},
+			{{NULL, NULL}, {NULL, NULL}},
+			{{NULL, NULL}, {NULL, NULL}},
+			{{NULL, NULL}, {NULL, NULL}},
+			{{NULL, NULL}, {NULL, NULL}},
+		},
+		// GALLERY_APP
+		{
+			{{DYNAMIC_GALLERY_1, DYNAMIC_GALLERY_2}, {NULL,NULL}},
+			{{STANDARD_GALLERY_1, STANDARD_GALLERY_2}, {NULL,NULL}},
+			{{NATURAL_GALLERY_1, NATURAL_GALLERY_2}, {NULL,NULL}},
+			{{MOVIE_GALLERY_1, MOVIE_GALLERY_2}, {NULL,NULL}},
+			{{AUTO_GALLERY_1, AUTO_GALLERY_2}, {NULL,NULL}},
+		},
+		// VT_APP
+		{
+			{{DYNAMIC_VT_1, DYNAMIC_VT_2}, {NULL, NULL}},
+			{{STANDARD_VT_1, STANDARD_VT_2}, {NULL, NULL}},
+			{{NATURAL_VT_1, NATURAL_VT_2}, {NULL, NULL}},
+			{{MOVIE_VT_1, MOVIE_VT_2}, {NULL, NULL}},
+			{{AUTO_VT_1, AUTO_VT_2}, {NULL, NULL}},
+		},
+		// BROWSER_APP
+		{
+			{{DYNAMIC_BROWSER_1, DYNAMIC_BROWSER_2}, {NULL, NULL}},
+			{{STANDARD_BROWSER_1, STANDARD_BROWSER_2}, {NULL, NULL}},
+			{{NATURAL_BROWSER_1, NATURAL_BROWSER_2}, {NULL, NULL}},
+			{{MOVIE_BROWSER_1, MOVIE_BROWSER_2}, {NULL, NULL}},
+			{{AUTO_BROWSER_1, AUTO_BROWSER_2}, {NULL, NULL}},
+		},
+		// eBOOK_APP
+		{
+			{{DYNAMIC_EBOOK_1, DYNAMIC_EBOOK_2}, {NULL, NULL}},
+			{{STANDARD_EBOOK_1, STANDARD_EBOOK_2}, {NULL, NULL}},
+			{{NATURAL_EBOOK_1, NATURAL_EBOOK_2}, {NULL, NULL}},
+			{{MOVIE_EBOOK_1, MOVIE_EBOOK_2}, {NULL, NULL}},
+			{{AUTO_EBOOK_1, AUTO_EBOOK_2}, {NULL, NULL}},
+		},
+		// EMAIL_APP
+		{
+			{{AUTO_EMAIL_1, AUTO_EMAIL_2}, {NULL, NULL}},
+			{{AUTO_EMAIL_1, AUTO_EMAIL_2}, {NULL, NULL}},
+			{{AUTO_EMAIL_1, AUTO_EMAIL_2}, {NULL, NULL}},
+			{{AUTO_EMAIL_1, AUTO_EMAIL_2}, {NULL, NULL}},
+			{{AUTO_EMAIL_1, AUTO_EMAIL_2}, {NULL, NULL}},
+		},
+#if defined(CONFIG_LCD_HMT)
+		// HMT GRAY 8
+		{
+			{{HMT_GRAY_8_1, HMT_GRAY_8_2}, {NULL, NULL}},
+			{{HMT_GRAY_8_1, HMT_GRAY_8_2}, {NULL, NULL}},
+			{{HMT_GRAY_8_1, HMT_GRAY_8_2}, {NULL, NULL}},
+			{{HMT_GRAY_8_1, HMT_GRAY_8_2}, {NULL, NULL}},
+			{{HMT_GRAY_8_1, HMT_GRAY_8_2}, {NULL, NULL}},
+		},
+		// HMT GRAY 16
+		{
+			{{HMT_GRAY_16_1, HMT_GRAY_16_2}, {NULL, NULL}},
+			{{HMT_GRAY_16_1, HMT_GRAY_16_2}, {NULL, NULL}},
+			{{HMT_GRAY_16_1, HMT_GRAY_16_2}, {NULL, NULL}},
+			{{HMT_GRAY_16_1, HMT_GRAY_16_2}, {NULL, NULL}},
+			{{HMT_GRAY_16_1, HMT_GRAY_16_2}, {NULL, NULL}},
+		},
+#endif
+};
+
+#endif
diff -Nur a/drivers/video/msm/mdss/mdnie_lite_tuning_data_kmini.h b/drivers/video/msm/mdss/mdnie_lite_tuning_data_kmini.h
--- a/drivers/video/msm/mdss/mdnie_lite_tuning_data_kmini.h	2016-01-10 16:25:37.420141000 -0500
+++ b/drivers/video/msm/mdss/mdnie_lite_tuning_data_kmini.h	2015-12-01 05:57:13.000000000 -0500
@@ -19,6 +19,212 @@
 #ifndef _MDNIE_LITE_TUNING_DATA_H_
 #define _MDNIE_LITE_TUNING_DATA_H_
 
+char GRAYSCALE_1[] = {
+	0xEB,
+	0x01, //mdnie_en
+	0x00, //mask 000
+	0x30, //scr_roi 1 scr algo_roi 1 algo 00 1 0 00 1 0
+	0x00, //data_width sharpen cs gamma 00 00 0 0
+};
+
+char GRAYSCALE_2[] = {
+	0xEC,
+	0x00, //roi ctrl
+	0x00, //roi1 y end
+	0x00,
+	0x00, //roi1 y start
+	0x00,
+	0x00, //roi1 x end
+	0x00,
+	0x00, //roi1 x strat
+	0x00,
+	0x00, //roi0 y end
+	0x00,
+	0x00, //roi0 y start
+	0x00,
+	0x00, //roi0 x end
+	0x00,
+	0x00, //roi0 x start
+	0x00,
+	0xb3, //scr Cr Yb
+	0x4c, //scr Rr Bb
+	0xb3, //scr Cg Yg
+	0x4c, //scr Rg Bg
+	0xb3, //scr Cb Yr
+	0x4c, //scr Rb Br
+	0x69, //scr Mr Mb
+	0x96, //scr Gr Gb
+	0x69, //scr Mg Mg
+	0x96, //scr Gg Gg
+	0x69, //scr Mb Mr
+	0x96, //scr Gb Gr
+	0xe2, //scr Yr Cb
+	0x1d, //scr Br Rb
+	0xe2, //scr Yg Cg
+	0x1d, //scr Bg Rg
+	0xe2, //scr Yb Cr
+	0x1d, //scr Bb Rr
+	0xff, //scr Wr Wb
+	0x00, //scr Kr Kb
+	0xff, //scr Wg Wg
+	0x00, //scr Kg Kg
+	0xff, //scr Wb Wr
+	0x00, //scr Kb Kr
+	0x00, //curve 1 b
+	0x20, //curve 1 a
+	0x00, //curve 2 b
+	0x20, //curve 2 a
+	0x00, //curve 3 b
+	0x20, //curve 3 a
+	0x00, //curve 4 b
+	0x20, //curve 4 a
+	0x00, //curve 5 b
+	0x20, //curve 5 a
+	0x00, //curve 6 b
+	0x20, //curve 6 a
+	0x00, //curve 7 b
+	0x20, //curve 7 a
+	0x00, //curve 8 b
+	0x20, //curve 8 a
+	0x00, //curve 9 b
+	0x20, //curve 9 a
+	0x00, //curve10 b
+	0x20, //curve10 a
+	0x00, //curve11 b
+	0x20, //curve11 a
+	0x00, //curve12 b
+	0x20, //curve12 a
+	0x00, //curve13 b
+	0x20, //curve13 a
+	0x00, //curve14 b
+	0x20, //curve14 a
+	0x00, //curve15 b
+	0x20, //curve15 a
+	0x00, //curve16 b
+	0x20, //curve16 a
+	0x00, //curve17 b
+	0x20, //curve17 a
+	0x00, //curve18 b
+	0x20, //curve18 a
+	0x00, //curve19 b
+	0x20, //curve19 a
+	0x00, //curve20 b
+	0x20, //curve20 a
+	0x00, //curve21 b
+	0x20, //curve21 a
+	0x00, //curve22 b
+	0x20, //curve22 a
+	0x00, //curve23 b
+	0x20, //curve23 a
+	0x00, //curve24 b
+	0xFF, //curve24 a
+	0x01, //cs gain
+	0x00,
+};
+
+char GRAYSCALE_NEGATIVE_1[] = {
+	0xEB,
+	0x01, //mdnie_en
+	0x00, //mask 000
+	0x30, //scr_roi 1 scr algo_roi 1 algo 00 1 0 00 1 0
+	0x00, //data_width sharpen cs gamma 00 00 0 0
+};
+
+char GRAYSCALE_NEGATIVE_2[] = {
+	0xEC,
+	0x00, //roi ctrl
+	0x00, //roi1 y end
+	0x00,
+	0x00, //roi1 y start
+	0x00,
+	0x00, //roi1 x end
+	0x00,
+	0x00, //roi1 x strat
+	0x00,
+	0x00, //roi0 y end
+	0x00,
+	0x00, //roi0 y start
+	0x00,
+	0x00, //roi0 x end
+	0x00,
+	0x00, //roi0 x start
+	0x00,
+	0x4c, //scr Cr Yb
+	0xb3, //scr Rr Bb
+	0x4c, //scr Cg Yg
+	0xb3, //scr Rg Bg
+	0x4c, //scr Cb Yr
+	0xb3, //scr Rb Br
+	0x96, //scr Mr Mb
+	0x69, //scr Gr Gb
+	0x96, //scr Mg Mg
+	0x69, //scr Gg Gg
+	0x96, //scr Mb Mr
+	0x69, //scr Gb Gr
+	0x1d, //scr Yr Cb
+	0xe2, //scr Br Rb
+	0x1d, //scr Yg Cg
+	0xe2, //scr Bg Rg
+	0x1d, //scr Yb Cr
+	0xe2, //scr Bb Rr
+	0x00, //scr Wr Wb
+	0xff, //scr Kr Kb
+	0x00, //scr Wg Wg
+	0xff, //scr Kg Kg
+	0x00, //scr Wb Wr
+	0xff, //scr Kb Kr
+	0x00, //curve 1 b
+	0x20, //curve 1 a
+	0x00, //curve 2 b
+	0x20, //curve 2 a
+	0x00, //curve 3 b
+	0x20, //curve 3 a
+	0x00, //curve 4 b
+	0x20, //curve 4 a
+	0x00, //curve 5 b
+	0x20, //curve 5 a
+	0x00, //curve 6 b
+	0x20, //curve 6 a
+	0x00, //curve 7 b
+	0x20, //curve 7 a
+	0x00, //curve 8 b
+	0x20, //curve 8 a
+	0x00, //curve 9 b
+	0x20, //curve 9 a
+	0x00, //curve10 b
+	0x20, //curve10 a
+	0x00, //curve11 b
+	0x20, //curve11 a
+	0x00, //curve12 b
+	0x20, //curve12 a
+	0x00, //curve13 b
+	0x20, //curve13 a
+	0x00, //curve14 b
+	0x20, //curve14 a
+	0x00, //curve15 b
+	0x20, //curve15 a
+	0x00, //curve16 b
+	0x20, //curve16 a
+	0x00, //curve17 b
+	0x20, //curve17 a
+	0x00, //curve18 b
+	0x20, //curve18 a
+	0x00, //curve19 b
+	0x20, //curve19 a
+	0x00, //curve20 b
+	0x20, //curve20 a
+	0x00, //curve21 b
+	0x20, //curve21 a
+	0x00, //curve22 b
+	0x20, //curve22 a
+	0x00, //curve23 b
+	0x20, //curve23 a
+	0x00, //curve24 b
+	0xFF, //curve24 a
+	0x01, //cs gain
+	0x00,
+};
+
 ////////////////// SCREEN CURTAIN//////////////////
 
 static char SCREEN_CURTAIN_1[] = {
@@ -3964,6 +4170,8 @@
 		{NEGATIVE_1, NEGATIVE_2},
 		{COLOR_BLIND_1, COLOR_BLIND_2},
 		{SCREEN_CURTAIN_1, SCREEN_CURTAIN_2},
+		{GRAYSCALE_1, GRAYSCALE_2},
+		{GRAYSCALE_NEGATIVE_1, GRAYSCALE_NEGATIVE_2}
 };
 
 char *mdnie_tune_value[MAX_mDNIe_MODE][MAX_BACKGROUND_MODE][MAX_OUTDOOR_MODE][2] = {
diff -Nur a/drivers/video/msm/mdss/mdnie_lite_tuning_data_patek.h b/drivers/video/msm/mdss/mdnie_lite_tuning_data_patek.h
--- a/drivers/video/msm/mdss/mdnie_lite_tuning_data_patek.h	1969-12-31 19:00:00.000000000 -0500
+++ b/drivers/video/msm/mdss/mdnie_lite_tuning_data_patek.h	2015-12-01 05:57:13.000000000 -0500
@@ -0,0 +1,4341 @@
+/* Copyright (c) 2009-2011, Code Aurora Forum. All rights reserved.
+ *
+ * This program is free software; you can redistribute it and/or modify
+ * it under the terms of the GNU General Public License version 2 and
+ * only version 2 as published by the Free Software Foundation.
+ *
+ * This program is distributed in the hope that it will be useful,
+ * but WITHOUT ANY WARRANTY; without even the implied warranty of
+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
+ * GNU General Public License for more details.
+ *
+ * You should have received a copy of the GNU General Public License
+ * along with this program; if not, write to the Free Software
+ * Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA
+ * 02110-1301, USA.
+ *
+ */
+
+#ifndef _MDNIE_LITE_TUNING_DATA_H_
+#define _MDNIE_LITE_TUNING_DATA_H_
+
+/* 2015.07.02 */
+
+char GRAYSCALE_1[] = {
+	//start
+	0xEB,
+	0x01, //mdnie_en
+	0x00, //mask 000
+	0x30, //scr_roi 1 scr algo_roi 1 algo 00 1 0 00 1 0
+	0x00, //data_width sharpen cs gamma 00 00 0 0
+};
+
+char GRAYSCALE_2[] = {
+	0xEC,
+	0x00, //roi ctrl
+	0x00, //roi0 x start
+	0x00,
+	0x00, //roi0 x end
+	0x00,
+	0x00, //roi0 y start
+	0x00,
+	0x00, //roi0 y end
+	0x00,
+	0x00, //roi1 x strat
+	0x00,
+	0x00, //roi1 x end
+	0x00,
+	0x00, //roi1 y start
+	0x00,
+	0x00, //roi1 y end
+	0x00,
+	0xb3, //scr Cr Yb
+	0x4c, //scr Rr Bb
+	0xb3, //scr Cg Yg
+	0x4c, //scr Rg Bg
+	0xb3, //scr Cb Yr
+	0x4c, //scr Rb Br
+	0x69, //scr Mr Mb
+	0x96, //scr Gr Gb
+	0x69, //scr Mg Mg
+	0x96, //scr Gg Gg
+	0x69, //scr Mb Mr
+	0x96, //scr Gb Gr
+	0xe2, //scr Yr Cb
+	0x1d, //scr Br Rb
+	0xe2, //scr Yg Cg
+	0x1d, //scr Bg Rg
+	0xe2, //scr Yb Cr
+	0x1d, //scr Bb Rr
+	0xff, //scr Wr Wb
+	0x00, //scr Kr Kb
+	0xff, //scr Wg Wg
+	0x00, //scr Kg Kg
+	0xff, //scr Wb Wr
+	0x00, //scr Kb Kr
+	0x00, //curve 1 b
+	0x20, //curve 1 a
+	0x00, //curve 2 b
+	0x20, //curve 2 a
+	0x00, //curve 3 b
+	0x20, //curve 3 a
+	0x00, //curve 4 b
+	0x20, //curve 4 a
+	0x02, //curve 5 b
+	0x1b, //curve 5 a
+	0x02, //curve 6 b
+	0x1b, //curve 6 a
+	0x02, //curve 7 b
+	0x1b, //curve 7 a
+	0x02, //curve 8 b
+	0x1b, //curve 8 a
+	0x09, //curve 9 b
+	0xa6, //curve 9 a
+	0x09, //curve10 b
+	0xa6, //curve10 a
+	0x09, //curve11 b
+	0xa6, //curve11 a
+	0x09, //curve12 b
+	0xa6, //curve12 a
+	0x00, //curve13 b
+	0x20, //curve13 a
+	0x00, //curve14 b
+	0x20, //curve14 a
+	0x00, //curve15 b
+	0x20, //curve15 a
+	0x00, //curve16 b
+	0x20, //curve16 a
+	0x00, //curve17 b
+	0x20, //curve17 a
+	0x00, //curve18 b
+	0x20, //curve18 a
+	0x00, //curve19 b
+	0x20, //curve19 a
+	0x00, //curve20 b
+	0x20, //curve20 a
+	0x00, //curve21 b
+	0x20, //curve21 a
+	0x00, //curve22 b
+	0x20, //curve22 a
+	0x00, //curve23 b
+	0x20, //curve23 a
+	0x00, //curve24 b
+	0xFF, //curve24 a
+	0x01, //cs gain
+	0x00,
+	//end
+};
+
+char GRAYSCALE_NEGATIVE_1[] = {
+	//start
+	0xEB,
+	0x01, //mdnie_en
+	0x00, //mask 000
+	0x30, //scr_roi 1 scr algo_roi 1 algo 00 1 0 00 1 0
+	0x00, //data_width sharpen cs gamma 00 00 0 0
+};
+
+char GRAYSCALE_NEGATIVE_2[] = {
+	0xEC,
+	0x00, //roi ctrl
+	0x00, //roi0 x start
+	0x00,
+	0x00, //roi0 x end
+	0x00,
+	0x00, //roi0 y start
+	0x00,
+	0x00, //roi0 y end
+	0x00,
+	0x00, //roi1 x strat
+	0x00,
+	0x00, //roi1 x end
+	0x00,
+	0x00, //roi1 y start
+	0x00,
+	0x00, //roi1 y end
+	0x00,
+	0x4c, //scr Cr Yb
+	0xb3, //scr Rr Bb
+	0x4c, //scr Cg Yg
+	0xb3, //scr Rg Bg
+	0x4c, //scr Cb Yr
+	0xb3, //scr Rb Br
+	0x96, //scr Mr Mb
+	0x69, //scr Gr Gb
+	0x96, //scr Mg Mg
+	0x69, //scr Gg Gg
+	0x96, //scr Mb Mr
+	0x69, //scr Gb Gr
+	0x1d, //scr Yr Cb
+	0xe2, //scr Br Rb
+	0x1d, //scr Yg Cg
+	0xe2, //scr Bg Rg
+	0x1d, //scr Yb Cr
+	0xe2, //scr Bb Rr
+	0x00, //scr Wr Wb
+	0xff, //scr Kr Kb
+	0x00, //scr Wg Wg
+	0xff, //scr Kg Kg
+	0x00, //scr Wb Wr
+	0xff, //scr Kb Kr
+	0x00, //curve 1 b
+	0x20, //curve 1 a
+	0x00, //curve 2 b
+	0x20, //curve 2 a
+	0x00, //curve 3 b
+	0x20, //curve 3 a
+	0x00, //curve 4 b
+	0x20, //curve 4 a
+	0x02, //curve 5 b
+	0x1b, //curve 5 a
+	0x02, //curve 6 b
+	0x1b, //curve 6 a
+	0x02, //curve 7 b
+	0x1b, //curve 7 a
+	0x02, //curve 8 b
+	0x1b, //curve 8 a
+	0x09, //curve 9 b
+	0xa6, //curve 9 a
+	0x09, //curve10 b
+	0xa6, //curve10 a
+	0x09, //curve11 b
+	0xa6, //curve11 a
+	0x09, //curve12 b
+	0xa6, //curve12 a
+	0x00, //curve13 b
+	0x20, //curve13 a
+	0x00, //curve14 b
+	0x20, //curve14 a
+	0x00, //curve15 b
+	0x20, //curve15 a
+	0x00, //curve16 b
+	0x20, //curve16 a
+	0x00, //curve17 b
+	0x20, //curve17 a
+	0x00, //curve18 b
+	0x20, //curve18 a
+	0x00, //curve19 b
+	0x20, //curve19 a
+	0x00, //curve20 b
+	0x20, //curve20 a
+	0x00, //curve21 b
+	0x20, //curve21 a
+	0x00, //curve22 b
+	0x20, //curve22 a
+	0x00, //curve23 b
+	0x20, //curve23 a
+	0x00, //curve24 b
+	0xFF, //curve24 a
+	0x01, //cs gain
+	0x00,
+	//end
+};
+
+////////////////// SCREEN CURTAIN//////////////////
+
+static char SCREEN_CURTAIN_1[] = {
+	//start
+	0xEB,
+	0x01, //mdnie_en
+	0x00, //mask 000
+	0x30, //scr_roi 1 scr algo_roi 1 algo 00 1 0 00 1 0
+	0x00, //data_width sharpen cs gamma 00 00 0 0
+};
+
+static char SCREEN_CURTAIN_2[] = {
+	0xEC,
+	0x00, //roi ctrl
+	0x00, //roi0 x start
+	0x00,
+	0x00, //roi0 x end
+	0x00,
+	0x00, //roi0 y start
+	0x00,
+	0x00, //roi0 y end
+	0x00,
+	0x00, //roi1 x strat
+	0x00,
+	0x00, //roi1 x end
+	0x00,
+	0x00, //roi1 y start
+	0x00,
+	0x00, //roi1 y end
+	0x00,
+	0x00, //scr Cr Yb
+	0x00, //scr Rr Bb
+	0x00, //scr Cg Yg
+	0x00, //scr Rg Bg
+	0x00, //scr Cb Yr
+	0x00, //scr Rb Br
+	0x00, //scr Mr Mb
+	0x00, //scr Gr Gb
+	0x00, //scr Mg Mg
+	0x00, //scr Gg Gg
+	0x00, //scr Mb Mr
+	0x00, //scr Gb Gr
+	0x00, //scr Yr Cb
+	0x00, //scr Br Rb
+	0x00, //scr Yg Cg
+	0x00, //scr Bg Rg
+	0x00, //scr Yb Cr
+	0x00, //scr Bb Rr
+	0x00, //scr Wr Wb
+	0x00, //scr Kr Kb
+	0x00, //scr Wg Wg
+	0x00, //scr Kg Kg
+	0x00, //scr Wb Wr
+	0x00, //scr Kb Kr
+	0x00, //curve 1 b
+	0x20, //curve 1 a
+	0x00, //curve 2 b
+	0x20, //curve 2 a
+	0x00, //curve 3 b
+	0x20, //curve 3 a
+	0x00, //curve 4 b
+	0x20, //curve 4 a
+	0x00, //curve 5 b
+	0x20, //curve 5 a
+	0x00, //curve 6 b
+	0x20, //curve 6 a
+	0x00, //curve 7 b
+	0x20, //curve 7 a
+	0x00, //curve 8 b
+	0x20, //curve 8 a
+	0x00, //curve 9 b
+	0x20, //curve 9 a
+	0x00, //curve10 b
+	0x20, //curve10 a
+	0x00, //curve11 b
+	0x20, //curve11 a
+	0x00, //curve12 b
+	0x20, //curve12 a
+	0x00, //curve13 b
+	0x20, //curve13 a
+	0x00, //curve14 b
+	0x20, //curve14 a
+	0x00, //curve15 b
+	0x20, //curve15 a
+	0x00, //curve16 b
+	0x20, //curve16 a
+	0x00, //curve17 b
+	0x20, //curve17 a
+	0x00, //curve18 b
+	0x20, //curve18 a
+	0x00, //curve19 b
+	0x20, //curve19 a
+	0x00, //curve20 b
+	0x20, //curve20 a
+	0x00, //curve21 b
+	0x20, //curve21 a
+	0x00, //curve22 b
+	0x20, //curve22 a
+	0x00, //curve23 b
+	0x20, //curve23 a
+	0x00, //curve24 b
+	0xFF, //curve24 a
+	0x01, //cs gain
+	0x00,
+	//end
+};
+
+////////////////// UI /// /////////////////////
+
+static char STANDARD_UI_1[] = {
+	//start
+	0xEB,
+	0x01, //mdnie_en
+	0x00, //mask 000
+	0x33, //scr_roi 1 scr algo_roi 1 algo 00 1 0 00 1 0
+	0x01, //data_width sharpen cs gamma 00 00 0 0
+};
+
+static char STANDARD_UI_2[] = {
+	0xEC,
+	0x00, //roi ctrl
+	0x00, //roi0 x start
+	0x00,
+	0x00, //roi0 x end
+	0x00,
+	0x00, //roi0 y start
+	0x00,
+	0x00, //roi0 y end
+	0x00,
+	0x00, //roi1 x strat
+	0x00,
+	0x00, //roi1 x end
+	0x00,
+	0x00, //roi1 y start
+	0x00,
+	0x00, //roi1 y end
+	0x00,
+	0x00, //scr Cr Yb
+	0xff, //scr Rr Bb
+	0xea, //scr Cg Yg
+	0x08, //scr Rg Bg
+	0xe0, //scr Cb Yr
+	0x06, //scr Rb Br
+	0xff, //scr Mr Mb
+	0x00, //scr Gr Gb
+	0x00, //scr Mg Mg
+	0xe0, //scr Gg Gg
+	0xdc, //scr Mb Mr
+	0x00, //scr Gb Gr
+	0xf2, //scr Yr Cb
+	0x14, //scr Br Rb
+	0xef, //scr Yg Cg
+	0x04, //scr Bg Rg
+	0x23, //scr Yb Cr
+	0xf3, //scr Bb Rr
+	0xff, //scr Wr Wb
+	0x00, //scr Kr Kb
+	0xf6, //scr Wg Wg
+	0x00, //scr Kg Kg
+	0xed, //scr Wb Wr
+	0x00, //scr Kb Kr
+	0x00, //curve 1 b
+	0x20, //curve 1 a
+	0x00, //curve 2 b
+	0x20, //curve 2 a
+	0x00, //curve 3 b
+	0x20, //curve 3 a
+	0x00, //curve 4 b
+	0x20, //curve 4 a
+	0x02, //curve 5 b
+	0x1b, //curve 5 a
+	0x02, //curve 6 b
+	0x1b, //curve 6 a
+	0x02, //curve 7 b
+	0x1b, //curve 7 a
+	0x02, //curve 8 b
+	0x1b, //curve 8 a
+	0x09, //curve 9 b
+	0xa6, //curve 9 a
+	0x09, //curve10 b
+	0xa6, //curve10 a
+	0x09, //curve11 b
+	0xa6, //curve11 a
+	0x09, //curve12 b
+	0xa6, //curve12 a
+	0x00, //curve13 b
+	0x20, //curve13 a
+	0x00, //curve14 b
+	0x20, //curve14 a
+	0x00, //curve15 b
+	0x20, //curve15 a
+	0x00, //curve16 b
+	0x20, //curve16 a
+	0x00, //curve17 b
+	0x20, //curve17 a
+	0x00, //curve18 b
+	0x20, //curve18 a
+	0x00, //curve19 b
+	0x20, //curve19 a
+	0x00, //curve20 b
+	0x20, //curve20 a
+	0x00, //curve21 b
+	0x20, //curve21 a
+	0x00, //curve22 b
+	0x20, //curve22 a
+	0x00, //curve23 b
+	0x20, //curve23 a
+	0x00, //curve24 b
+	0xFF, //curve24 a
+	0x01, //cs gain
+	0x00,
+	//end
+};
+
+static char NATURAL_UI_1[] = {
+	//start
+	0xEB,
+	0x01, //mdnie_en
+	0x00, //mask 000
+	0x33, //scr_roi 1 scr algo_roi 1 algo 00 1 0 00 1 0
+	0x03, //data_width sharpen cs gamma 00 00 0 0
+};
+
+static char NATURAL_UI_2[] = {
+	0xEC,
+	0x00, //roi ctrl
+	0x00, //roi0 x start
+	0x00,
+	0x00, //roi0 x end
+	0x00,
+	0x00, //roi0 y start
+	0x00,
+	0x00, //roi0 y end
+	0x00,
+	0x00, //roi1 x strat
+	0x00,
+	0x00, //roi1 x end
+	0x00,
+	0x00, //roi1 y start
+	0x00,
+	0x00, //roi1 y end
+	0x00,
+	0x84, //scr Cr Yb
+	0xe1, //scr Rr Bb
+	0xf3, //scr Cg Yg
+	0x20, //scr Rg Bg
+	0xec, //scr Cb Yr
+	0x1c, //scr Rb Br
+	0xe8, //scr Mr Mb
+	0x63, //scr Gr Gb
+	0x2d, //scr Mg Mg
+	0xed, //scr Gg Gg
+	0xe8, //scr Mb Mr
+	0x37, //scr Gb Gr
+	0xf2, //scr Yr Cb
+	0x28, //scr Br Rb
+	0xf0, //scr Yg Cg
+	0x16, //scr Bg Rg
+	0x5a, //scr Yb Cr
+	0xe9, //scr Bb Rr
+	0xff, //scr Wr Wb
+	0x00, //scr Kr Kb
+	0xf7, //scr Wg Wg
+	0x00, //scr Kg Kg
+	0xed, //scr Wb Wr
+	0x00, //scr Kb Kr
+	0x00, //curve 1 b
+	0x20, //curve 1 a
+	0x00, //curve 2 b
+	0x20, //curve 2 a
+	0x00, //curve 3 b
+	0x20, //curve 3 a
+	0x00, //curve 4 b
+	0x20, //curve 4 a
+	0x02, //curve 5 b
+	0x1b, //curve 5 a
+	0x02, //curve 6 b
+	0x1b, //curve 6 a
+	0x02, //curve 7 b
+	0x1b, //curve 7 a
+	0x02, //curve 8 b
+	0x1b, //curve 8 a
+	0x09, //curve 9 b
+	0xa6, //curve 9 a
+	0x09, //curve10 b
+	0xa6, //curve10 a
+	0x09, //curve11 b
+	0xa6, //curve11 a
+	0x09, //curve12 b
+	0xa6, //curve12 a
+	0x00, //curve13 b
+	0x20, //curve13 a
+	0x00, //curve14 b
+	0x20, //curve14 a
+	0x00, //curve15 b
+	0x20, //curve15 a
+	0x00, //curve16 b
+	0x20, //curve16 a
+	0x00, //curve17 b
+	0x20, //curve17 a
+	0x00, //curve18 b
+	0x20, //curve18 a
+	0x00, //curve19 b
+	0x20, //curve19 a
+	0x00, //curve20 b
+	0x20, //curve20 a
+	0x00, //curve21 b
+	0x20, //curve21 a
+	0x00, //curve22 b
+	0x20, //curve22 a
+	0x00, //curve23 b
+	0x20, //curve23 a
+	0x00, //curve24 b
+	0xFF, //curve24 a
+	0x01, //cs gain
+	0x40,
+	//end
+};
+
+static char DYNAMIC_UI_1[] = {
+	//start
+	0xEB,
+	0x01, //mdnie_en
+	0x00, //mask 000
+	0x33, //scr_roi 1 scr algo_roi 1 algo 00 1 0 00 1 0
+	0x03, //data_width sharpen cs gamma 00 00 0 0
+};
+
+static char DYNAMIC_UI_2[] = {
+	0xEC,
+	0x00, //roi ctrl
+	0x00, //roi0 x start
+	0x00,
+	0x00, //roi0 x end
+	0x00,
+	0x00, //roi0 y start
+	0x00,
+	0x00, //roi0 y end
+	0x00,
+	0x00, //roi1 x strat
+	0x00,
+	0x00, //roi1 x end
+	0x00,
+	0x00, //roi1 y start
+	0x00,
+	0x00, //roi1 y end
+	0x00,
+	0x00, //scr Cr Yb
+	0xff, //scr Rr Bb
+	0xff, //scr Cg Yg
+	0x20, //scr Rg Bg
+	0xff, //scr Cb Yr
+	0x20, //scr Rb Br
+	0xff, //scr Mr Mb
+	0x00, //scr Gr Gb
+	0x00, //scr Mg Mg
+	0xff, //scr Gg Gg
+	0xff, //scr Mb Mr
+	0x00, //scr Gb Gr
+	0xff, //scr Yr Cb
+	0x00, //scr Br Rb
+	0xff, //scr Yg Cg
+	0x00, //scr Bg Rg
+	0x00, //scr Yb Cr
+	0xff, //scr Bb Rr
+	0xff, //scr Wr Wb
+	0x00, //scr Kr Kb
+	0xff, //scr Wg Wg
+	0x00, //scr Kg Kg
+	0xff, //scr Wb Wr
+	0x00, //scr Kb Kr
+	0x00, //curve 1 b
+	0x14, //curve 1 a
+	0x00, //curve 2 b
+	0x14, //curve 2 a
+	0x00, //curve 3 b
+	0x14, //curve 3 a
+	0x00, //curve 4 b
+	0x14, //curve 4 a
+	0x03, //curve 5 b
+	0x9a, //curve 5 a
+	0x03, //curve 6 b
+	0x9a, //curve 6 a
+	0x03, //curve 7 b
+	0x9a, //curve 7 a
+	0x03, //curve 8 b
+	0x9a, //curve 8 a
+	0x07, //curve 9 b
+	0x9e, //curve 9 a
+	0x07, //curve10 b
+	0x9e, //curve10 a
+	0x07, //curve11 b
+	0x9e, //curve11 a
+	0x07, //curve12 b
+	0x9e, //curve12 a
+	0x0a, //curve13 b
+	0xa0, //curve13 a
+	0x0a, //curve14 b
+	0xa0, //curve14 a
+	0x0a, //curve15 b
+	0xa0, //curve15 a
+	0x0a, //curve16 b
+	0xa0, //curve16 a
+	0x16, //curve17 b
+	0xa6, //curve17 a
+	0x16, //curve18 b
+	0xa6, //curve18 a
+	0x16, //curve19 b
+	0xa6, //curve19 a
+	0x16, //curve20 b
+	0xa6, //curve20 a
+	0x05, //curve21 b
+	0x21, //curve21 a
+	0x0b, //curve22 b
+	0x20, //curve22 a
+	0x87, //curve23 b
+	0x0f, //curve23 a
+	0x00, //curve24 b
+	0xFF, //curve24 a
+	0x01, //cs gain
+	0x20,
+	//end
+};
+
+static char MOVIE_UI_1[] = {
+	0xEB,
+	0x01, //mdnie_en
+	0x00, //mask 000
+	0x33, //scr_roi 1 scr algo_roi 1 algo 00 1 0 00 1 0
+	0x03, //data_width sharpen cs gamma 00 00 0 0
+};
+
+static char MOVIE_UI_2[] = {
+	0xEC,
+	0x00, //roi ctrl
+	0x00, //roi1 y end
+	0x00,
+	0x00, //roi1 y start
+	0x00,
+	0x00, //roi1 x end
+	0x00,
+	0x00, //roi1 x strat
+	0x00,
+	0x00, //roi0 y end
+	0x00,
+	0x00, //roi0 y start
+	0x00,
+	0x00, //roi0 x end
+	0x00,
+	0x00, //roi0 x start
+	0x00,
+	0x87, //scr Cr Yb
+	0xe7, //scr Rr Bb
+	0xff, //scr Cg Yg
+	0x1e, //scr Rg Bg
+	0xf2, //scr Cb Yr
+	0x1e, //scr Rb Br
+	0xf5, //scr Mr Mb
+	0x73, //scr Gr Gb
+	0x2a, //scr Mg Mg
+	0xf7, //scr Gg Gg
+	0xf0, //scr Mb Mr
+	0x37, //scr Gb Gr
+	0xfa, //scr Yr Cb
+	0x2e, //scr Br Rb
+	0xf5, //scr Yg Cg
+	0x14, //scr Bg Rg
+	0x3c, //scr Yb Cr
+	0xed, //scr Bb Rr
+	0xff, //scr Wr Wb
+	0x00, //scr Kr Kb
+	0xf6, //scr Wg Wg
+	0x00, //scr Kg Kg
+	0xee, //scr Wb Wr
+	0x00, //scr Kb Kr
+	0x00, //curve_1_b
+	0x20, //curve_1_a
+	0x00, //curve_2_b
+	0x20, //curve_2_a
+	0x00, //curve_3_b
+	0x20, //curve_3_a
+	0x00, //curve_4_b
+	0x20, //curve_4_a
+	0x02, //curve_5_b
+	0x1b, //curve_5_a
+	0x02, //curve_6_b
+	0x1b, //curve_6_a
+	0x02, //curve_7_b
+	0x1b, //curve_7_a
+	0x02, //curve_8_b
+	0x1b, //curve_8_a
+	0x09, //curve_9_b
+	0xa6, //curve_9_a
+	0x09, //curve10_b
+	0xa6, //curve10_a
+	0x09, //curve11_b
+	0xa6, //curve11_a
+	0x09, //curve12_b
+	0xa6, //curve12_a
+	0x00, //curve13_b
+	0x20, //curve13_a
+	0x00, //curve14_b
+	0x20, //curve14_a
+	0x00, //curve15_b
+	0x20, //curve15_a
+	0x00, //curve16_b
+	0x20, //curve16_a
+	0x00, //curve17_b
+	0x20, //curve17_a
+	0x00, //curve18_b
+	0x20, //curve18_a
+	0x00, //curve19_b
+	0x20, //curve19_a
+	0x00, //curve20_b
+	0x20, //curve20_a
+	0x00, //curve21_b
+	0x20, //curve21_a
+	0x00, //curve22_b
+	0x20, //curve22_a
+	0x00, //curve23_b
+	0x20, //curve23_a
+	0x00, //curve24_b
+	0xFF, //curve24_a
+	0x01, //cs gain
+	0x20,
+};
+
+char AUTO_UI_1[] = {
+	//start
+	0xEB,
+	0x01, //mdnie_en
+	0x00, //mask 000
+	0x33, //scr_roi 1 scr algo_roi 1 algo 00 1 0 00 1 0
+	0x01, //data_width sharpen cs gamma 00 00 0 0
+};
+
+char AUTO_UI_2[] = {
+	0xEC,
+	0x00, //roi ctrl
+	0x00, //roi0 x start
+	0x00,
+	0x00, //roi0 x end
+	0x00,
+	0x00, //roi0 y start
+	0x00,
+	0x00, //roi0 y end
+	0x00,
+	0x00, //roi1 x strat
+	0x00,
+	0x00, //roi1 x end
+	0x00,
+	0x00, //roi1 y start
+	0x00,
+	0x00, //roi1 y end
+	0x00,
+	0x00, //scr Cr Yb
+	0xff, //scr Rr Bb
+	0xff, //scr Cg Yg
+	0x00, //scr Rg Bg
+	0xff, //scr Cb Yr
+	0x00, //scr Rb Br
+	0xff, //scr Mr Mb
+	0x00, //scr Gr Gb
+	0x00, //scr Mg Mg
+	0xff, //scr Gg Gg
+	0xff, //scr Mb Mr
+	0x00, //scr Gb Gr
+	0xff, //scr Yr Cb
+	0x00, //scr Br Rb
+	0xff, //scr Yg Cg
+	0x00, //scr Bg Rg
+	0x00, //scr Yb Cr
+	0xff, //scr Bb Rr
+	0xff, //scr Wr Wb
+	0x00, //scr Kr Kb
+	0xff, //scr Wg Wg
+	0x00, //scr Kg Kg
+	0xff, //scr Wb Wr
+	0x00, //scr Kb Kr
+	0x00, //curve 1 b
+	0x20, //curve 1 a
+	0x00, //curve 2 b
+	0x20, //curve 2 a
+	0x00, //curve 3 b
+	0x20, //curve 3 a
+	0x00, //curve 4 b
+	0x20, //curve 4 a
+	0x02, //curve 5 b
+	0x1b, //curve 5 a
+	0x02, //curve 6 b
+	0x1b, //curve 6 a
+	0x02, //curve 7 b
+	0x1b, //curve 7 a
+	0x02, //curve 8 b
+	0x1b, //curve 8 a
+	0x09, //curve 9 b
+	0xa6, //curve 9 a
+	0x09, //curve10 b
+	0xa6, //curve10 a
+	0x09, //curve11 b
+	0xa6, //curve11 a
+	0x09, //curve12 b
+	0xa6, //curve12 a
+	0x00, //curve13 b
+	0x20, //curve13 a
+	0x00, //curve14 b
+	0x20, //curve14 a
+	0x00, //curve15 b
+	0x20, //curve15 a
+	0x00, //curve16 b
+	0x20, //curve16 a
+	0x00, //curve17 b
+	0x20, //curve17 a
+	0x00, //curve18 b
+	0x20, //curve18 a
+	0x00, //curve19 b
+	0x20, //curve19 a
+	0x00, //curve20 b
+	0x20, //curve20 a
+	0x00, //curve21 b
+	0x20, //curve21 a
+	0x00, //curve22 b
+	0x20, //curve22 a
+	0x00, //curve23 b
+	0x20, //curve23 a
+	0x00, //curve24 b
+	0xFF, //curve24 a
+	0x01, //cs gain
+	0x00,
+	//end
+};
+
+////////////////// GALLERY /////////////////////
+static char STANDARD_GALLERY_1[] = {
+	//start
+	0xEB,
+	0x01, //mdnie_en
+	0x00, //mask 000
+	0x33, //scr_roi 1 scr algo_roi 1 algo 00 1 0 00 1 0
+	0x01, //data_width sharpen cs gamma 00 00 0 0
+};
+
+static char STANDARD_GALLERY_2[] = {
+	0xEC,
+	0x00, //roi ctrl
+	0x00, //roi0 x start
+	0x00,
+	0x00, //roi0 x end
+	0x00,
+	0x00, //roi0 y start
+	0x00,
+	0x00, //roi0 y end
+	0x00,
+	0x00, //roi1 x strat
+	0x00,
+	0x00, //roi1 x end
+	0x00,
+	0x00, //roi1 y start
+	0x00,
+	0x00, //roi1 y end
+	0x00,
+	0x00, //scr Cr Yb
+	0xff, //scr Rr Bb
+	0xea, //scr Cg Yg
+	0x08, //scr Rg Bg
+	0xe0, //scr Cb Yr
+	0x06, //scr Rb Br
+	0xff, //scr Mr Mb
+	0x00, //scr Gr Gb
+	0x00, //scr Mg Mg
+	0xe0, //scr Gg Gg
+	0xdc, //scr Mb Mr
+	0x00, //scr Gb Gr
+	0xf2, //scr Yr Cb
+	0x14, //scr Br Rb
+	0xef, //scr Yg Cg
+	0x04, //scr Bg Rg
+	0x23, //scr Yb Cr
+	0xf3, //scr Bb Rr
+	0xff, //scr Wr Wb
+	0x00, //scr Kr Kb
+	0xf6, //scr Wg Wg
+	0x00, //scr Kg Kg
+	0xed, //scr Wb Wr
+	0x00, //scr Kb Kr
+	0x00, //curve 1 b
+	0x20, //curve 1 a
+	0x00, //curve 2 b
+	0x20, //curve 2 a
+	0x00, //curve 3 b
+	0x20, //curve 3 a
+	0x00, //curve 4 b
+	0x20, //curve 4 a
+	0x02, //curve 5 b
+	0x1b, //curve 5 a
+	0x02, //curve 6 b
+	0x1b, //curve 6 a
+	0x02, //curve 7 b
+	0x1b, //curve 7 a
+	0x02, //curve 8 b
+	0x1b, //curve 8 a
+	0x09, //curve 9 b
+	0xa6, //curve 9 a
+	0x09, //curve10 b
+	0xa6, //curve10 a
+	0x09, //curve11 b
+	0xa6, //curve11 a
+	0x09, //curve12 b
+	0xa6, //curve12 a
+	0x00, //curve13 b
+	0x20, //curve13 a
+	0x00, //curve14 b
+	0x20, //curve14 a
+	0x00, //curve15 b
+	0x20, //curve15 a
+	0x00, //curve16 b
+	0x20, //curve16 a
+	0x00, //curve17 b
+	0x20, //curve17 a
+	0x00, //curve18 b
+	0x20, //curve18 a
+	0x00, //curve19 b
+	0x20, //curve19 a
+	0x00, //curve20 b
+	0x20, //curve20 a
+	0x00, //curve21 b
+	0x20, //curve21 a
+	0x00, //curve22 b
+	0x20, //curve22 a
+	0x00, //curve23 b
+	0x20, //curve23 a
+	0x00, //curve24 b
+	0xFF, //curve24 a
+	0x01, //cs gain
+	0x00,
+	//end
+};
+
+static char NATURAL_GALLERY_1[] = {
+	//start
+	0xEB,
+	0x01, //mdnie_en
+	0x00, //mask 000
+	0x33, //scr_roi 1 scr algo_roi 1 algo 00 1 0 00 1 0
+	0x03, //data_width sharpen cs gamma 00 00 0 0
+};
+
+static char NATURAL_GALLERY_2[] = {
+	0xEC,
+	0x00, //roi ctrl
+	0x00, //roi0 x start
+	0x00,
+	0x00, //roi0 x end
+	0x00,
+	0x00, //roi0 y start
+	0x00,
+	0x00, //roi0 y end
+	0x00,
+	0x00, //roi1 x strat
+	0x00,
+	0x00, //roi1 x end
+	0x00,
+	0x00, //roi1 y start
+	0x00,
+	0x00, //roi1 y end
+	0x00,
+	0x84, //scr Cr Yb
+	0xe1, //scr Rr Bb
+	0xf3, //scr Cg Yg
+	0x20, //scr Rg Bg
+	0xec, //scr Cb Yr
+	0x1c, //scr Rb Br
+	0xe8, //scr Mr Mb
+	0x63, //scr Gr Gb
+	0x2d, //scr Mg Mg
+	0xed, //scr Gg Gg
+	0xe8, //scr Mb Mr
+	0x37, //scr Gb Gr
+	0xf2, //scr Yr Cb
+	0x28, //scr Br Rb
+	0xf0, //scr Yg Cg
+	0x16, //scr Bg Rg
+	0x5a, //scr Yb Cr
+	0xe9, //scr Bb Rr
+	0xff, //scr Wr Wb
+	0x00, //scr Kr Kb
+	0xf7, //scr Wg Wg
+	0x00, //scr Kg Kg
+	0xed, //scr Wb Wr
+	0x00, //scr Kb Kr
+	0x00, //curve 1 b
+	0x20, //curve 1 a
+	0x00, //curve 2 b
+	0x20, //curve 2 a
+	0x00, //curve 3 b
+	0x20, //curve 3 a
+	0x00, //curve 4 b
+	0x20, //curve 4 a
+	0x02, //curve 5 b
+	0x1b, //curve 5 a
+	0x02, //curve 6 b
+	0x1b, //curve 6 a
+	0x02, //curve 7 b
+	0x1b, //curve 7 a
+	0x02, //curve 8 b
+	0x1b, //curve 8 a
+	0x09, //curve 9 b
+	0xa6, //curve 9 a
+	0x09, //curve10 b
+	0xa6, //curve10 a
+	0x09, //curve11 b
+	0xa6, //curve11 a
+	0x09, //curve12 b
+	0xa6, //curve12 a
+	0x00, //curve13 b
+	0x20, //curve13 a
+	0x00, //curve14 b
+	0x20, //curve14 a
+	0x00, //curve15 b
+	0x20, //curve15 a
+	0x00, //curve16 b
+	0x20, //curve16 a
+	0x00, //curve17 b
+	0x20, //curve17 a
+	0x00, //curve18 b
+	0x20, //curve18 a
+	0x00, //curve19 b
+	0x20, //curve19 a
+	0x00, //curve20 b
+	0x20, //curve20 a
+	0x00, //curve21 b
+	0x20, //curve21 a
+	0x00, //curve22 b
+	0x20, //curve22 a
+	0x00, //curve23 b
+	0x20, //curve23 a
+	0x00, //curve24 b
+	0xFF, //curve24 a
+	0x01, //cs gain
+	0x40,
+	//end
+};
+
+static char DYNAMIC_GALLERY_1[] = {
+	//start
+	0xEB,
+	0x01, //mdnie_en
+	0x00, //mask 000
+	0x33, //scr_roi 1 scr algo_roi 1 algo 00 1 0 00 1 0
+	0x03, //data_width sharpen cs gamma 00 00 0 0
+};
+
+static char DYNAMIC_GALLERY_2[] = {
+	0xEC,
+	0x00, //roi ctrl
+	0x00, //roi0 x start
+	0x00,
+	0x00, //roi0 x end
+	0x00,
+	0x00, //roi0 y start
+	0x00,
+	0x00, //roi0 y end
+	0x00,
+	0x00, //roi1 x strat
+	0x00,
+	0x00, //roi1 x end
+	0x00,
+	0x00, //roi1 y start
+	0x00,
+	0x00, //roi1 y end
+	0x00,
+	0x00, //scr Cr Yb
+	0xff, //scr Rr Bb
+	0xff, //scr Cg Yg
+	0x20, //scr Rg Bg
+	0xff, //scr Cb Yr
+	0x20, //scr Rb Br
+	0xff, //scr Mr Mb
+	0x00, //scr Gr Gb
+	0x00, //scr Mg Mg
+	0xff, //scr Gg Gg
+	0xff, //scr Mb Mr
+	0x00, //scr Gb Gr
+	0xff, //scr Yr Cb
+	0x00, //scr Br Rb
+	0xff, //scr Yg Cg
+	0x00, //scr Bg Rg
+	0x00, //scr Yb Cr
+	0xff, //scr Bb Rr
+	0xff, //scr Wr Wb
+	0x00, //scr Kr Kb
+	0xff, //scr Wg Wg
+	0x00, //scr Kg Kg
+	0xff, //scr Wb Wr
+	0x00, //scr Kb Kr
+	0x00, //curve 1 b
+	0x14, //curve 1 a
+	0x00, //curve 2 b
+	0x14, //curve 2 a
+	0x00, //curve 3 b
+	0x14, //curve 3 a
+	0x00, //curve 4 b
+	0x14, //curve 4 a
+	0x03, //curve 5 b
+	0x9a, //curve 5 a
+	0x03, //curve 6 b
+	0x9a, //curve 6 a
+	0x03, //curve 7 b
+	0x9a, //curve 7 a
+	0x03, //curve 8 b
+	0x9a, //curve 8 a
+	0x07, //curve 9 b
+	0x9e, //curve 9 a
+	0x07, //curve10 b
+	0x9e, //curve10 a
+	0x07, //curve11 b
+	0x9e, //curve11 a
+	0x07, //curve12 b
+	0x9e, //curve12 a
+	0x0a, //curve13 b
+	0xa0, //curve13 a
+	0x0a, //curve14 b
+	0xa0, //curve14 a
+	0x0a, //curve15 b
+	0xa0, //curve15 a
+	0x0a, //curve16 b
+	0xa0, //curve16 a
+	0x16, //curve17 b
+	0xa6, //curve17 a
+	0x16, //curve18 b
+	0xa6, //curve18 a
+	0x16, //curve19 b
+	0xa6, //curve19 a
+	0x16, //curve20 b
+	0xa6, //curve20 a
+	0x05, //curve21 b
+	0x21, //curve21 a
+	0x0b, //curve22 b
+	0x20, //curve22 a
+	0x87, //curve23 b
+	0x0f, //curve23 a
+	0x00, //curve24 b
+	0xFF, //curve24 a
+	0x01, //cs gain
+	0x20,
+	//end
+};
+
+static char MOVIE_GALLERY_1[] = {
+	0xEB,
+	0x01, //mdnie_en
+	0x00, //mask 000
+	0x33, //scr_roi 1 scr algo_roi 1 algo 00 1 0 00 1 0
+	0x03, //data_width sharpen cs gamma 00 00 0 0
+};
+
+static char MOVIE_GALLERY_2[] = {
+	0xEC,
+	0x00, //roi ctrl
+	0x00, //roi1 y end
+	0x00,
+	0x00, //roi1 y start
+	0x00,
+	0x00, //roi1 x end
+	0x00,
+	0x00, //roi1 x strat
+	0x00,
+	0x00, //roi0 y end
+	0x00,
+	0x00, //roi0 y start
+	0x00,
+	0x00, //roi0 x end
+	0x00,
+	0x00, //roi0 x start
+	0x00,
+	0x87, //scr Cr Yb
+	0xe7, //scr Rr Bb
+	0xff, //scr Cg Yg
+	0x1e, //scr Rg Bg
+	0xf2, //scr Cb Yr
+	0x1e, //scr Rb Br
+	0xf5, //scr Mr Mb
+	0x73, //scr Gr Gb
+	0x2a, //scr Mg Mg
+	0xf7, //scr Gg Gg
+	0xf0, //scr Mb Mr
+	0x37, //scr Gb Gr
+	0xfa, //scr Yr Cb
+	0x2e, //scr Br Rb
+	0xf5, //scr Yg Cg
+	0x14, //scr Bg Rg
+	0x3c, //scr Yb Cr
+	0xed, //scr Bb Rr
+	0xff, //scr Wr Wb
+	0x00, //scr Kr Kb
+	0xf6, //scr Wg Wg
+	0x00, //scr Kg Kg
+	0xee, //scr Wb Wr
+	0x00, //scr Kb Kr
+	0x00, //curve_1_b
+	0x20, //curve_1_a
+	0x00, //curve_2_b
+	0x20, //curve_2_a
+	0x00, //curve_3_b
+	0x20, //curve_3_a
+	0x00, //curve_4_b
+	0x20, //curve_4_a
+	0x02, //curve_5_b
+	0x1b, //curve_5_a
+	0x02, //curve_6_b
+	0x1b, //curve_6_a
+	0x02, //curve_7_b
+	0x1b, //curve_7_a
+	0x02, //curve_8_b
+	0x1b, //curve_8_a
+	0x09, //curve_9_b
+	0xa6, //curve_9_a
+	0x09, //curve10_b
+	0xa6, //curve10_a
+	0x09, //curve11_b
+	0xa6, //curve11_a
+	0x09, //curve12_b
+	0xa6, //curve12_a
+	0x00, //curve13_b
+	0x20, //curve13_a
+	0x00, //curve14_b
+	0x20, //curve14_a
+	0x00, //curve15_b
+	0x20, //curve15_a
+	0x00, //curve16_b
+	0x20, //curve16_a
+	0x00, //curve17_b
+	0x20, //curve17_a
+	0x00, //curve18_b
+	0x20, //curve18_a
+	0x00, //curve19_b
+	0x20, //curve19_a
+	0x00, //curve20_b
+	0x20, //curve20_a
+	0x00, //curve21_b
+	0x20, //curve21_a
+	0x00, //curve22_b
+	0x20, //curve22_a
+	0x00, //curve23_b
+	0x20, //curve23_a
+	0x00, //curve24_b
+	0xFF, //curve24_a
+	0x01, //cs gain
+	0x20,
+};
+
+char AUTO_GALLERY_1[] = {
+	//start
+	0xEB,
+	0x01, //mdnie_en
+	0x00, //mask 000
+	0x33, //scr_roi 1 scr algo_roi 1 algo 00 1 0 00 1 0
+	0x01, //data_width sharpen cs gamma 00 00 0 0
+};
+
+char AUTO_GALLERY_2[] = {
+	0xEC,
+	0x00, //roi ctrl
+	0x00, //roi0 x start
+	0x00,
+	0x00, //roi0 x end
+	0x00,
+	0x00, //roi0 y start
+	0x00,
+	0x00, //roi0 y end
+	0x00,
+	0x00, //roi1 x strat
+	0x00,
+	0x00, //roi1 x end
+	0x00,
+	0x00, //roi1 y start
+	0x00,
+	0x00, //roi1 y end
+	0x00,
+	0x00, //scr Cr Yb
+	0xff, //scr Rr Bb
+	0xff, //scr Cg Yg
+	0x1c, //scr Rg Bg
+	0xff, //scr Cb Yr
+	0x1c, //scr Rb Br
+	0xff, //scr Mr Mb
+	0x00, //scr Gr Gb
+	0x00, //scr Mg Mg
+	0xff, //scr Gg Gg
+	0xff, //scr Mb Mr
+	0x00, //scr Gb Gr
+	0xff, //scr Yr Cb
+	0x00, //scr Br Rb
+	0xff, //scr Yg Cg
+	0x00, //scr Bg Rg
+	0x00, //scr Yb Cr
+	0xff, //scr Bb Rr
+	0xff, //scr Wr Wb
+	0x00, //scr Kr Kb
+	0xff, //scr Wg Wg
+	0x00, //scr Kg Kg
+	0xff, //scr Wb Wr
+	0x00, //scr Kb Kr
+	0x00, //curve 1 b
+	0x20, //curve 1 a
+	0x00, //curve 2 b
+	0x20, //curve 2 a
+	0x00, //curve 3 b
+	0x20, //curve 3 a
+	0x00, //curve 4 b
+	0x20, //curve 4 a
+	0x02, //curve 5 b
+	0x1b, //curve 5 a
+	0x02, //curve 6 b
+	0x1b, //curve 6 a
+	0x02, //curve 7 b
+	0x1b, //curve 7 a
+	0x02, //curve 8 b
+	0x1b, //curve 8 a
+	0x09, //curve 9 b
+	0xa6, //curve 9 a
+	0x09, //curve10 b
+	0xa6, //curve10 a
+	0x09, //curve11 b
+	0xa6, //curve11 a
+	0x09, //curve12 b
+	0xa6, //curve12 a
+	0x00, //curve13 b
+	0x20, //curve13 a
+	0x00, //curve14 b
+	0x20, //curve14 a
+	0x00, //curve15 b
+	0x20, //curve15 a
+	0x00, //curve16 b
+	0x20, //curve16 a
+	0x00, //curve17 b
+	0x20, //curve17 a
+	0x00, //curve18 b
+	0x20, //curve18 a
+	0x00, //curve19 b
+	0x20, //curve19 a
+	0x00, //curve20 b
+	0x20, //curve20 a
+	0x00, //curve21 b
+	0x20, //curve21 a
+	0x00, //curve22 b
+	0x20, //curve22 a
+	0x00, //curve23 b
+	0x20, //curve23 a
+	0x00, //curve24 b
+	0xFF, //curve24 a
+	0x01, //cs gain
+	0x00,
+	//end
+};
+
+////////////////// VIDEO /////////////////////
+
+static char STANDARD_VIDEO_1[] = {
+	//start
+	0xEB,
+	0x01, //mdnie_en
+	0x00, //mask 000
+	0x33, //scr_roi 1 scr algo_roi 1 algo 00 1 0 00 1 0
+	0x01, //data_width sharpen cs gamma 00 00 0 0
+};
+
+static char STANDARD_VIDEO_2[] = {
+	0xEC,
+	0x00, //roi ctrl
+	0x00, //roi0 x start
+	0x00,
+	0x00, //roi0 x end
+	0x00,
+	0x00, //roi0 y start
+	0x00,
+	0x00, //roi0 y end
+	0x00,
+	0x00, //roi1 x strat
+	0x00,
+	0x00, //roi1 x end
+	0x00,
+	0x00, //roi1 y start
+	0x00,
+	0x00, //roi1 y end
+	0x00,
+	0x00, //scr Cr Yb
+	0xff, //scr Rr Bb
+	0xea, //scr Cg Yg
+	0x08, //scr Rg Bg
+	0xe0, //scr Cb Yr
+	0x06, //scr Rb Br
+	0xff, //scr Mr Mb
+	0x00, //scr Gr Gb
+	0x00, //scr Mg Mg
+	0xe0, //scr Gg Gg
+	0xdc, //scr Mb Mr
+	0x00, //scr Gb Gr
+	0xf2, //scr Yr Cb
+	0x14, //scr Br Rb
+	0xef, //scr Yg Cg
+	0x04, //scr Bg Rg
+	0x23, //scr Yb Cr
+	0xf3, //scr Bb Rr
+	0xff, //scr Wr Wb
+	0x00, //scr Kr Kb
+	0xf6, //scr Wg Wg
+	0x00, //scr Kg Kg
+	0xed, //scr Wb Wr
+	0x00, //scr Kb Kr
+	0x00, //curve 1 b
+	0x20, //curve 1 a
+	0x00, //curve 2 b
+	0x20, //curve 2 a
+	0x00, //curve 3 b
+	0x20, //curve 3 a
+	0x00, //curve 4 b
+	0x20, //curve 4 a
+	0x02, //curve 5 b
+	0x1b, //curve 5 a
+	0x02, //curve 6 b
+	0x1b, //curve 6 a
+	0x02, //curve 7 b
+	0x1b, //curve 7 a
+	0x02, //curve 8 b
+	0x1b, //curve 8 a
+	0x09, //curve 9 b
+	0xa6, //curve 9 a
+	0x09, //curve10 b
+	0xa6, //curve10 a
+	0x09, //curve11 b
+	0xa6, //curve11 a
+	0x09, //curve12 b
+	0xa6, //curve12 a
+	0x00, //curve13 b
+	0x20, //curve13 a
+	0x00, //curve14 b
+	0x20, //curve14 a
+	0x00, //curve15 b
+	0x20, //curve15 a
+	0x00, //curve16 b
+	0x20, //curve16 a
+	0x00, //curve17 b
+	0x20, //curve17 a
+	0x00, //curve18 b
+	0x20, //curve18 a
+	0x00, //curve19 b
+	0x20, //curve19 a
+	0x00, //curve20 b
+	0x20, //curve20 a
+	0x00, //curve21 b
+	0x20, //curve21 a
+	0x00, //curve22 b
+	0x20, //curve22 a
+	0x00, //curve23 b
+	0x20, //curve23 a
+	0x00, //curve24 b
+	0xFF, //curve24 a
+	0x01, //cs gain
+	0x00,
+	//end
+};
+
+static char NATURAL_VIDEO_1[] = {
+	//start
+	0xEB,
+	0x01, //mdnie_en
+	0x00, //mask 000
+	0x33, //scr_roi 1 scr algo_roi 1 algo 00 1 0 00 1 0
+	0x03, //data_width sharpen cs gamma 00 00 0 0
+};
+
+static char NATURAL_VIDEO_2[] = {
+	0xEC,
+	0x00, //roi ctrl
+	0x00, //roi0 x start
+	0x00,
+	0x00, //roi0 x end
+	0x00,
+	0x00, //roi0 y start
+	0x00,
+	0x00, //roi0 y end
+	0x00,
+	0x00, //roi1 x strat
+	0x00,
+	0x00, //roi1 x end
+	0x00,
+	0x00, //roi1 y start
+	0x00,
+	0x00, //roi1 y end
+	0x00,
+	0x84, //scr Cr Yb
+	0xe1, //scr Rr Bb
+	0xf3, //scr Cg Yg
+	0x20, //scr Rg Bg
+	0xec, //scr Cb Yr
+	0x1c, //scr Rb Br
+	0xe8, //scr Mr Mb
+	0x63, //scr Gr Gb
+	0x2d, //scr Mg Mg
+	0xed, //scr Gg Gg
+	0xe8, //scr Mb Mr
+	0x37, //scr Gb Gr
+	0xf2, //scr Yr Cb
+	0x28, //scr Br Rb
+	0xf0, //scr Yg Cg
+	0x16, //scr Bg Rg
+	0x5a, //scr Yb Cr
+	0xe9, //scr Bb Rr
+	0xff, //scr Wr Wb
+	0x00, //scr Kr Kb
+	0xf7, //scr Wg Wg
+	0x00, //scr Kg Kg
+	0xed, //scr Wb Wr
+	0x00, //scr Kb Kr
+	0x00, //curve 1 b
+	0x20, //curve 1 a
+	0x00, //curve 2 b
+	0x20, //curve 2 a
+	0x00, //curve 3 b
+	0x20, //curve 3 a
+	0x00, //curve 4 b
+	0x20, //curve 4 a
+	0x02, //curve 5 b
+	0x1b, //curve 5 a
+	0x02, //curve 6 b
+	0x1b, //curve 6 a
+	0x02, //curve 7 b
+	0x1b, //curve 7 a
+	0x02, //curve 8 b
+	0x1b, //curve 8 a
+	0x09, //curve 9 b
+	0xa6, //curve 9 a
+	0x09, //curve10 b
+	0xa6, //curve10 a
+	0x09, //curve11 b
+	0xa6, //curve11 a
+	0x09, //curve12 b
+	0xa6, //curve12 a
+	0x00, //curve13 b
+	0x20, //curve13 a
+	0x00, //curve14 b
+	0x20, //curve14 a
+	0x00, //curve15 b
+	0x20, //curve15 a
+	0x00, //curve16 b
+	0x20, //curve16 a
+	0x00, //curve17 b
+	0x20, //curve17 a
+	0x00, //curve18 b
+	0x20, //curve18 a
+	0x00, //curve19 b
+	0x20, //curve19 a
+	0x00, //curve20 b
+	0x20, //curve20 a
+	0x00, //curve21 b
+	0x20, //curve21 a
+	0x00, //curve22 b
+	0x20, //curve22 a
+	0x00, //curve23 b
+	0x20, //curve23 a
+	0x00, //curve24 b
+	0xFF, //curve24 a
+	0x01, //cs gain
+	0x40,
+	//end
+};
+
+static char DYNAMIC_VIDEO_1[] = {
+	//start
+	0xEB,
+	0x01, //mdnie_en
+	0x00, //mask 000
+	0x33, //scr_roi 1 scr algo_roi 1 algo 00 1 0 00 1 0
+	0x03, //data_width sharpen cs gamma 00 00 0 0
+};
+
+static char DYNAMIC_VIDEO_2[] = {
+	0xEC,
+	0x00, //roi ctrl
+	0x00, //roi0 x start
+	0x00,
+	0x00, //roi0 x end
+	0x00,
+	0x00, //roi0 y start
+	0x00,
+	0x00, //roi0 y end
+	0x00,
+	0x00, //roi1 x strat
+	0x00,
+	0x00, //roi1 x end
+	0x00,
+	0x00, //roi1 y start
+	0x00,
+	0x00, //roi1 y end
+	0x00,
+	0x00, //scr Cr Yb
+	0xff, //scr Rr Bb
+	0xff, //scr Cg Yg
+	0x20, //scr Rg Bg
+	0xff, //scr Cb Yr
+	0x20, //scr Rb Br
+	0xff, //scr Mr Mb
+	0x00, //scr Gr Gb
+	0x00, //scr Mg Mg
+	0xff, //scr Gg Gg
+	0xff, //scr Mb Mr
+	0x00, //scr Gb Gr
+	0xff, //scr Yr Cb
+	0x00, //scr Br Rb
+	0xff, //scr Yg Cg
+	0x00, //scr Bg Rg
+	0x00, //scr Yb Cr
+	0xff, //scr Bb Rr
+	0xff, //scr Wr Wb
+	0x00, //scr Kr Kb
+	0xff, //scr Wg Wg
+	0x00, //scr Kg Kg
+	0xff, //scr Wb Wr
+	0x00, //scr Kb Kr
+	0x00, //curve 1 b
+	0x14, //curve 1 a
+	0x00, //curve 2 b
+	0x14, //curve 2 a
+	0x00, //curve 3 b
+	0x14, //curve 3 a
+	0x00, //curve 4 b
+	0x14, //curve 4 a
+	0x03, //curve 5 b
+	0x9a, //curve 5 a
+	0x03, //curve 6 b
+	0x9a, //curve 6 a
+	0x03, //curve 7 b
+	0x9a, //curve 7 a
+	0x03, //curve 8 b
+	0x9a, //curve 8 a
+	0x07, //curve 9 b
+	0x9e, //curve 9 a
+	0x07, //curve10 b
+	0x9e, //curve10 a
+	0x07, //curve11 b
+	0x9e, //curve11 a
+	0x07, //curve12 b
+	0x9e, //curve12 a
+	0x0a, //curve13 b
+	0xa0, //curve13 a
+	0x0a, //curve14 b
+	0xa0, //curve14 a
+	0x0a, //curve15 b
+	0xa0, //curve15 a
+	0x0a, //curve16 b
+	0xa0, //curve16 a
+	0x16, //curve17 b
+	0xa6, //curve17 a
+	0x16, //curve18 b
+	0xa6, //curve18 a
+	0x16, //curve19 b
+	0xa6, //curve19 a
+	0x16, //curve20 b
+	0xa6, //curve20 a
+	0x05, //curve21 b
+	0x21, //curve21 a
+	0x0b, //curve22 b
+	0x20, //curve22 a
+	0x87, //curve23 b
+	0x0f, //curve23 a
+	0x00, //curve24 b
+	0xFF, //curve24 a
+	0x01, //cs gain
+	0x20,
+	//end
+};
+
+static char MOVIE_VIDEO_1[] = {
+	0xEB,
+	0x01, //mdnie_en
+	0x00, //mask 000
+	0x33, //scr_roi 1 scr algo_roi 1 algo 00 1 0 00 1 0
+	0x03, //data_width sharpen cs gamma 00 00 0 0
+};
+
+static char MOVIE_VIDEO_2[] = {
+	0xEC,
+	0x00, //roi ctrl
+	0x00, //roi1 y end
+	0x00,
+	0x00, //roi1 y start
+	0x00,
+	0x00, //roi1 x end
+	0x00,
+	0x00, //roi1 x strat
+	0x00,
+	0x00, //roi0 y end
+	0x00,
+	0x00, //roi0 y start
+	0x00,
+	0x00, //roi0 x end
+	0x00,
+	0x00, //roi0 x start
+	0x00,
+	0x87, //scr Cr Yb
+	0xe7, //scr Rr Bb
+	0xff, //scr Cg Yg
+	0x1e, //scr Rg Bg
+	0xf2, //scr Cb Yr
+	0x1e, //scr Rb Br
+	0xf5, //scr Mr Mb
+	0x73, //scr Gr Gb
+	0x2a, //scr Mg Mg
+	0xf7, //scr Gg Gg
+	0xf0, //scr Mb Mr
+	0x37, //scr Gb Gr
+	0xfa, //scr Yr Cb
+	0x2e, //scr Br Rb
+	0xf5, //scr Yg Cg
+	0x14, //scr Bg Rg
+	0x3c, //scr Yb Cr
+	0xed, //scr Bb Rr
+	0xff, //scr Wr Wb
+	0x00, //scr Kr Kb
+	0xf6, //scr Wg Wg
+	0x00, //scr Kg Kg
+	0xee, //scr Wb Wr
+	0x00, //scr Kb Kr
+	0x00, //curve_1_b
+	0x20, //curve_1_a
+	0x00, //curve_2_b
+	0x20, //curve_2_a
+	0x00, //curve_3_b
+	0x20, //curve_3_a
+	0x00, //curve_4_b
+	0x20, //curve_4_a
+	0x02, //curve_5_b
+	0x1b, //curve_5_a
+	0x02, //curve_6_b
+	0x1b, //curve_6_a
+	0x02, //curve_7_b
+	0x1b, //curve_7_a
+	0x02, //curve_8_b
+	0x1b, //curve_8_a
+	0x09, //curve_9_b
+	0xa6, //curve_9_a
+	0x09, //curve10_b
+	0xa6, //curve10_a
+	0x09, //curve11_b
+	0xa6, //curve11_a
+	0x09, //curve12_b
+	0xa6, //curve12_a
+	0x00, //curve13_b
+	0x20, //curve13_a
+	0x00, //curve14_b
+	0x20, //curve14_a
+	0x00, //curve15_b
+	0x20, //curve15_a
+	0x00, //curve16_b
+	0x20, //curve16_a
+	0x00, //curve17_b
+	0x20, //curve17_a
+	0x00, //curve18_b
+	0x20, //curve18_a
+	0x00, //curve19_b
+	0x20, //curve19_a
+	0x00, //curve20_b
+	0x20, //curve20_a
+	0x00, //curve21_b
+	0x20, //curve21_a
+	0x00, //curve22_b
+	0x20, //curve22_a
+	0x00, //curve23_b
+	0x20, //curve23_a
+	0x00, //curve24_b
+	0xFF, //curve24_a
+	0x01, //cs gain
+	0x20,
+};
+
+char AUTO_VIDEO_1[] = {
+	//start
+	0xEB,
+	0x01, //mdnie_en
+	0x00, //mask 000
+	0x33, //scr_roi 1 scr algo_roi 1 algo 00 1 0 00 1 0
+	0x03, //data_width sharpen cs gamma 00 00 0 0
+};
+
+char AUTO_VIDEO_2[] = {
+	0xEC,
+	0x00, //roi ctrl
+	0x00, //roi0 x start
+	0x00,
+	0x00, //roi0 x end
+	0x00,
+	0x00, //roi0 y start
+	0x00,
+	0x00, //roi0 y end
+	0x00,
+	0x00, //roi1 x strat
+	0x00,
+	0x00, //roi1 x end
+	0x00,
+	0x00, //roi1 y start
+	0x00,
+	0x00, //roi1 y end
+	0x00,
+	0x00, //scr Cr Yb
+	0xff, //scr Rr Bb
+	0xff, //scr Cg Yg
+	0x20, //scr Rg Bg
+	0xff, //scr Cb Yr
+	0x20, //scr Rb Br
+	0xff, //scr Mr Mb
+	0x00, //scr Gr Gb
+	0x00, //scr Mg Mg
+	0xff, //scr Gg Gg
+	0xff, //scr Mb Mr
+	0x00, //scr Gb Gr
+	0xff, //scr Yr Cb
+	0x00, //scr Br Rb
+	0xff, //scr Yg Cg
+	0x00, //scr Bg Rg
+	0x00, //scr Yb Cr
+	0xff, //scr Bb Rr
+	0xff, //scr Wr Wb
+	0x00, //scr Kr Kb
+	0xff, //scr Wg Wg
+	0x00, //scr Kg Kg
+	0xff, //scr Wb Wr
+	0x00, //scr Kb Kr
+	0x00, //curve 1 b
+	0x14, //curve 1 a
+	0x00, //curve 2 b
+	0x14, //curve 2 a
+	0x00, //curve 3 b
+	0x14, //curve 3 a
+	0x00, //curve 4 b
+	0x14, //curve 4 a
+	0x03, //curve 5 b
+	0x9a, //curve 5 a
+	0x03, //curve 6 b
+	0x9a, //curve 6 a
+	0x03, //curve 7 b
+	0x9a, //curve 7 a
+	0x03, //curve 8 b
+	0x9a, //curve 8 a
+	0x07, //curve 9 b
+	0x9e, //curve 9 a
+	0x07, //curve10 b
+	0x9e, //curve10 a
+	0x07, //curve11 b
+	0x9e, //curve11 a
+	0x07, //curve12 b
+	0x9e, //curve12 a
+	0x0a, //curve13 b
+	0xa0, //curve13 a
+	0x0a, //curve14 b
+	0xa0, //curve14 a
+	0x0a, //curve15 b
+	0xa0, //curve15 a
+	0x0a, //curve16 b
+	0xa0, //curve16 a
+	0x16, //curve17 b
+	0xa6, //curve17 a
+	0x16, //curve18 b
+	0xa6, //curve18 a
+	0x16, //curve19 b
+	0xa6, //curve19 a
+	0x16, //curve20 b
+	0xa6, //curve20 a
+	0x05, //curve21 b
+	0x21, //curve21 a
+	0x0b, //curve22 b
+	0x20, //curve22 a
+	0x87, //curve23 b
+	0x0f, //curve23 a
+	0x00, //curve24 b
+	0xFF, //curve24 a
+	0x01, //cs gain
+	0x20,
+	//end
+};
+
+////////////////// VT /////////////////////
+
+static char STANDARD_VT_1[] = {
+	//start
+	0xEB,
+	0x01, //mdnie_en
+	0x00, //mask 000
+	0x33, //scr_roi 1 scr algo_roi 1 algo 00 1 0 00 1 0
+	0x01, //data_width sharpen cs gamma 00 00 0 0
+};
+
+static char STANDARD_VT_2[] = {
+	0xEC,
+	0x00, //roi ctrl
+	0x00, //roi0 x start
+	0x00,
+	0x00, //roi0 x end
+	0x00,
+	0x00, //roi0 y start
+	0x00,
+	0x00, //roi0 y end
+	0x00,
+	0x00, //roi1 x strat
+	0x00,
+	0x00, //roi1 x end
+	0x00,
+	0x00, //roi1 y start
+	0x00,
+	0x00, //roi1 y end
+	0x00,
+	0x00, //scr Cr Yb
+	0xff, //scr Rr Bb
+	0xea, //scr Cg Yg
+	0x08, //scr Rg Bg
+	0xe0, //scr Cb Yr
+	0x06, //scr Rb Br
+	0xff, //scr Mr Mb
+	0x00, //scr Gr Gb
+	0x00, //scr Mg Mg
+	0xe0, //scr Gg Gg
+	0xdc, //scr Mb Mr
+	0x00, //scr Gb Gr
+	0xf2, //scr Yr Cb
+	0x14, //scr Br Rb
+	0xef, //scr Yg Cg
+	0x04, //scr Bg Rg
+	0x23, //scr Yb Cr
+	0xf3, //scr Bb Rr
+	0xff, //scr Wr Wb
+	0x00, //scr Kr Kb
+	0xf6, //scr Wg Wg
+	0x00, //scr Kg Kg
+	0xed, //scr Wb Wr
+	0x00, //scr Kb Kr
+	0x00, //curve 1 b
+	0x20, //curve 1 a
+	0x00, //curve 2 b
+	0x20, //curve 2 a
+	0x00, //curve 3 b
+	0x20, //curve 3 a
+	0x00, //curve 4 b
+	0x20, //curve 4 a
+	0x02, //curve 5 b
+	0x1b, //curve 5 a
+	0x02, //curve 6 b
+	0x1b, //curve 6 a
+	0x02, //curve 7 b
+	0x1b, //curve 7 a
+	0x02, //curve 8 b
+	0x1b, //curve 8 a
+	0x09, //curve 9 b
+	0xa6, //curve 9 a
+	0x09, //curve10 b
+	0xa6, //curve10 a
+	0x09, //curve11 b
+	0xa6, //curve11 a
+	0x09, //curve12 b
+	0xa6, //curve12 a
+	0x00, //curve13 b
+	0x20, //curve13 a
+	0x00, //curve14 b
+	0x20, //curve14 a
+	0x00, //curve15 b
+	0x20, //curve15 a
+	0x00, //curve16 b
+	0x20, //curve16 a
+	0x00, //curve17 b
+	0x20, //curve17 a
+	0x00, //curve18 b
+	0x20, //curve18 a
+	0x00, //curve19 b
+	0x20, //curve19 a
+	0x00, //curve20 b
+	0x20, //curve20 a
+	0x00, //curve21 b
+	0x20, //curve21 a
+	0x00, //curve22 b
+	0x20, //curve22 a
+	0x00, //curve23 b
+	0x20, //curve23 a
+	0x00, //curve24 b
+	0xFF, //curve24 a
+	0x01, //cs gain
+	0x00,
+	//end
+};
+
+static char NATURAL_VT_1[] = {
+	//start
+	0xEB,
+	0x01, //mdnie_en
+	0x00, //mask 000
+	0x33, //scr_roi 1 scr algo_roi 1 algo 00 1 0 00 1 0
+	0x03, //data_width sharpen cs gamma 00 00 0 0
+};
+
+static char NATURAL_VT_2[] = {
+	0xEC,
+	0x00, //roi ctrl
+	0x00, //roi0 x start
+	0x00,
+	0x00, //roi0 x end
+	0x00,
+	0x00, //roi0 y start
+	0x00,
+	0x00, //roi0 y end
+	0x00,
+	0x00, //roi1 x strat
+	0x00,
+	0x00, //roi1 x end
+	0x00,
+	0x00, //roi1 y start
+	0x00,
+	0x00, //roi1 y end
+	0x00,
+	0x84, //scr Cr Yb
+	0xe1, //scr Rr Bb
+	0xf3, //scr Cg Yg
+	0x20, //scr Rg Bg
+	0xec, //scr Cb Yr
+	0x1c, //scr Rb Br
+	0xe8, //scr Mr Mb
+	0x63, //scr Gr Gb
+	0x2d, //scr Mg Mg
+	0xed, //scr Gg Gg
+	0xe8, //scr Mb Mr
+	0x37, //scr Gb Gr
+	0xf2, //scr Yr Cb
+	0x28, //scr Br Rb
+	0xf0, //scr Yg Cg
+	0x16, //scr Bg Rg
+	0x5a, //scr Yb Cr
+	0xe9, //scr Bb Rr
+	0xff, //scr Wr Wb
+	0x00, //scr Kr Kb
+	0xf7, //scr Wg Wg
+	0x00, //scr Kg Kg
+	0xed, //scr Wb Wr
+	0x00, //scr Kb Kr
+	0x00, //curve 1 b
+	0x20, //curve 1 a
+	0x00, //curve 2 b
+	0x20, //curve 2 a
+	0x00, //curve 3 b
+	0x20, //curve 3 a
+	0x00, //curve 4 b
+	0x20, //curve 4 a
+	0x02, //curve 5 b
+	0x1b, //curve 5 a
+	0x02, //curve 6 b
+	0x1b, //curve 6 a
+	0x02, //curve 7 b
+	0x1b, //curve 7 a
+	0x02, //curve 8 b
+	0x1b, //curve 8 a
+	0x09, //curve 9 b
+	0xa6, //curve 9 a
+	0x09, //curve10 b
+	0xa6, //curve10 a
+	0x09, //curve11 b
+	0xa6, //curve11 a
+	0x09, //curve12 b
+	0xa6, //curve12 a
+	0x00, //curve13 b
+	0x20, //curve13 a
+	0x00, //curve14 b
+	0x20, //curve14 a
+	0x00, //curve15 b
+	0x20, //curve15 a
+	0x00, //curve16 b
+	0x20, //curve16 a
+	0x00, //curve17 b
+	0x20, //curve17 a
+	0x00, //curve18 b
+	0x20, //curve18 a
+	0x00, //curve19 b
+	0x20, //curve19 a
+	0x00, //curve20 b
+	0x20, //curve20 a
+	0x00, //curve21 b
+	0x20, //curve21 a
+	0x00, //curve22 b
+	0x20, //curve22 a
+	0x00, //curve23 b
+	0x20, //curve23 a
+	0x00, //curve24 b
+	0xFF, //curve24 a
+	0x01, //cs gain
+	0x40,
+	//end
+};
+
+static char DYNAMIC_VT_1[] = {
+	//start
+	0xEB,
+	0x01, //mdnie_en
+	0x00, //mask 000
+	0x33, //scr_roi 1 scr algo_roi 1 algo 00 1 0 00 1 0
+	0x03, //data_width sharpen cs gamma 00 00 0 0
+};
+
+static char DYNAMIC_VT_2[] = {
+	0xEC,
+	0x00, //roi ctrl
+	0x00, //roi0 x start
+	0x00,
+	0x00, //roi0 x end
+	0x00,
+	0x00, //roi0 y start
+	0x00,
+	0x00, //roi0 y end
+	0x00,
+	0x00, //roi1 x strat
+	0x00,
+	0x00, //roi1 x end
+	0x00,
+	0x00, //roi1 y start
+	0x00,
+	0x00, //roi1 y end
+	0x00,
+	0x00, //scr Cr Yb
+	0xff, //scr Rr Bb
+	0xff, //scr Cg Yg
+	0x20, //scr Rg Bg
+	0xff, //scr Cb Yr
+	0x20, //scr Rb Br
+	0xff, //scr Mr Mb
+	0x00, //scr Gr Gb
+	0x00, //scr Mg Mg
+	0xff, //scr Gg Gg
+	0xff, //scr Mb Mr
+	0x00, //scr Gb Gr
+	0xff, //scr Yr Cb
+	0x00, //scr Br Rb
+	0xff, //scr Yg Cg
+	0x00, //scr Bg Rg
+	0x00, //scr Yb Cr
+	0xff, //scr Bb Rr
+	0xff, //scr Wr Wb
+	0x00, //scr Kr Kb
+	0xff, //scr Wg Wg
+	0x00, //scr Kg Kg
+	0xff, //scr Wb Wr
+	0x00, //scr Kb Kr
+	0x00, //curve 1 b
+	0x14, //curve 1 a
+	0x00, //curve 2 b
+	0x14, //curve 2 a
+	0x00, //curve 3 b
+	0x14, //curve 3 a
+	0x00, //curve 4 b
+	0x14, //curve 4 a
+	0x03, //curve 5 b
+	0x9a, //curve 5 a
+	0x03, //curve 6 b
+	0x9a, //curve 6 a
+	0x03, //curve 7 b
+	0x9a, //curve 7 a
+	0x03, //curve 8 b
+	0x9a, //curve 8 a
+	0x07, //curve 9 b
+	0x9e, //curve 9 a
+	0x07, //curve10 b
+	0x9e, //curve10 a
+	0x07, //curve11 b
+	0x9e, //curve11 a
+	0x07, //curve12 b
+	0x9e, //curve12 a
+	0x0a, //curve13 b
+	0xa0, //curve13 a
+	0x0a, //curve14 b
+	0xa0, //curve14 a
+	0x0a, //curve15 b
+	0xa0, //curve15 a
+	0x0a, //curve16 b
+	0xa0, //curve16 a
+	0x16, //curve17 b
+	0xa6, //curve17 a
+	0x16, //curve18 b
+	0xa6, //curve18 a
+	0x16, //curve19 b
+	0xa6, //curve19 a
+	0x16, //curve20 b
+	0xa6, //curve20 a
+	0x05, //curve21 b
+	0x21, //curve21 a
+	0x0b, //curve22 b
+	0x20, //curve22 a
+	0x87, //curve23 b
+	0x0f, //curve23 a
+	0x00, //curve24 b
+	0xFF, //curve24 a
+	0x01, //cs gain
+	0x20,
+	//end
+};
+
+static char MOVIE_VT_1[] = {
+	0xEB,
+	0x01, //mdnie_en
+	0x00, //mask 000
+	0x33, //scr_roi 1 scr algo_roi 1 algo 00 1 0 00 1 0
+	0x03, //data_width sharpen cs gamma 00 00 0 0
+};
+
+static char MOVIE_VT_2[] = {
+	0xEC,
+	0x00, //roi ctrl
+	0x00, //roi1 y end
+	0x00,
+	0x00, //roi1 y start
+	0x00,
+	0x00, //roi1 x end
+	0x00,
+	0x00, //roi1 x strat
+	0x00,
+	0x00, //roi0 y end
+	0x00,
+	0x00, //roi0 y start
+	0x00,
+	0x00, //roi0 x end
+	0x00,
+	0x00, //roi0 x start
+	0x00,
+	0x87, //scr Cr Yb
+	0xe7, //scr Rr Bb
+	0xff, //scr Cg Yg
+	0x1e, //scr Rg Bg
+	0xf2, //scr Cb Yr
+	0x1e, //scr Rb Br
+	0xf5, //scr Mr Mb
+	0x73, //scr Gr Gb
+	0x2a, //scr Mg Mg
+	0xf7, //scr Gg Gg
+	0xf0, //scr Mb Mr
+	0x37, //scr Gb Gr
+	0xfa, //scr Yr Cb
+	0x2e, //scr Br Rb
+	0xf5, //scr Yg Cg
+	0x14, //scr Bg Rg
+	0x3c, //scr Yb Cr
+	0xed, //scr Bb Rr
+	0xff, //scr Wr Wb
+	0x00, //scr Kr Kb
+	0xf6, //scr Wg Wg
+	0x00, //scr Kg Kg
+	0xee, //scr Wb Wr
+	0x00, //scr Kb Kr
+	0x00, //curve_1_b
+	0x20, //curve_1_a
+	0x00, //curve_2_b
+	0x20, //curve_2_a
+	0x00, //curve_3_b
+	0x20, //curve_3_a
+	0x00, //curve_4_b
+	0x20, //curve_4_a
+	0x02, //curve_5_b
+	0x1b, //curve_5_a
+	0x02, //curve_6_b
+	0x1b, //curve_6_a
+	0x02, //curve_7_b
+	0x1b, //curve_7_a
+	0x02, //curve_8_b
+	0x1b, //curve_8_a
+	0x09, //curve_9_b
+	0xa6, //curve_9_a
+	0x09, //curve10_b
+	0xa6, //curve10_a
+	0x09, //curve11_b
+	0xa6, //curve11_a
+	0x09, //curve12_b
+	0xa6, //curve12_a
+	0x00, //curve13_b
+	0x20, //curve13_a
+	0x00, //curve14_b
+	0x20, //curve14_a
+	0x00, //curve15_b
+	0x20, //curve15_a
+	0x00, //curve16_b
+	0x20, //curve16_a
+	0x00, //curve17_b
+	0x20, //curve17_a
+	0x00, //curve18_b
+	0x20, //curve18_a
+	0x00, //curve19_b
+	0x20, //curve19_a
+	0x00, //curve20_b
+	0x20, //curve20_a
+	0x00, //curve21_b
+	0x20, //curve21_a
+	0x00, //curve22_b
+	0x20, //curve22_a
+	0x00, //curve23_b
+	0x20, //curve23_a
+	0x00, //curve24_b
+	0xFF, //curve24_a
+	0x01, //cs gain
+	0x20,
+};
+
+char AUTO_VT_1[] = {
+	//start
+	0xEB,
+	0x01, //mdnie_en
+	0x00, //mask 000
+	0x33, //scr_roi 1 scr algo_roi 1 algo 00 1 0 00 1 0
+	0x01, //data_width sharpen cs gamma 00 00 0 0
+};
+
+char AUTO_VT_2[] = {
+	0xEC,
+	0x00, //roi ctrl
+	0x00, //roi0 x start
+	0x00,
+	0x00, //roi0 x end
+	0x00,
+	0x00, //roi0 y start
+	0x00,
+	0x00, //roi0 y end
+	0x00,
+	0x00, //roi1 x strat
+	0x00,
+	0x00, //roi1 x end
+	0x00,
+	0x00, //roi1 y start
+	0x00,
+	0x00, //roi1 y end
+	0x00,
+	0x00, //scr Cr Yb
+	0xff, //scr Rr Bb
+	0xff, //scr Cg Yg
+	0x00, //scr Rg Bg
+	0xff, //scr Cb Yr
+	0x00, //scr Rb Br
+	0xff, //scr Mr Mb
+	0x00, //scr Gr Gb
+	0x00, //scr Mg Mg
+	0xff, //scr Gg Gg
+	0xff, //scr Mb Mr
+	0x00, //scr Gb Gr
+	0xff, //scr Yr Cb
+	0x00, //scr Br Rb
+	0xff, //scr Yg Cg
+	0x00, //scr Bg Rg
+	0x00, //scr Yb Cr
+	0xff, //scr Bb Rr
+	0xff, //scr Wr Wb
+	0x00, //scr Kr Kb
+	0xff, //scr Wg Wg
+	0x00, //scr Kg Kg
+	0xff, //scr Wb Wr
+	0x00, //scr Kb Kr
+	0x00, //curve 1 b
+	0x20, //curve 1 a
+	0x00, //curve 2 b
+	0x20, //curve 2 a
+	0x00, //curve 3 b
+	0x20, //curve 3 a
+	0x00, //curve 4 b
+	0x20, //curve 4 a
+	0x02, //curve 5 b
+	0x1b, //curve 5 a
+	0x02, //curve 6 b
+	0x1b, //curve 6 a
+	0x02, //curve 7 b
+	0x1b, //curve 7 a
+	0x02, //curve 8 b
+	0x1b, //curve 8 a
+	0x09, //curve 9 b
+	0xa6, //curve 9 a
+	0x09, //curve10 b
+	0xa6, //curve10 a
+	0x09, //curve11 b
+	0xa6, //curve11 a
+	0x09, //curve12 b
+	0xa6, //curve12 a
+	0x00, //curve13 b
+	0x20, //curve13 a
+	0x00, //curve14 b
+	0x20, //curve14 a
+	0x00, //curve15 b
+	0x20, //curve15 a
+	0x00, //curve16 b
+	0x20, //curve16 a
+	0x00, //curve17 b
+	0x20, //curve17 a
+	0x00, //curve18 b
+	0x20, //curve18 a
+	0x00, //curve19 b
+	0x20, //curve19 a
+	0x00, //curve20 b
+	0x20, //curve20 a
+	0x00, //curve21 b
+	0x20, //curve21 a
+	0x00, //curve22 b
+	0x20, //curve22 a
+	0x00, //curve23 b
+	0x20, //curve23 a
+	0x00, //curve24 b
+	0xFF, //curve24 a
+	0x01, //cs gain
+	0x00,
+	//end
+};
+
+////////////////// CAMERA /////////////////////
+
+static char CAMERA_1[] = {
+	//start
+	0xEB,
+	0x01, //mdnie_en
+	0x00, //mask 000
+	0x33, //scr_roi 1 scr algo_roi 1 algo 00 1 0 00 1 0
+	0x01, //data_width sharpen cs gamma 00 00 0 0
+};
+
+static char CAMERA_2[] = {
+	0xEC,
+	0x00, //roi ctrl
+	0x00, //roi0 x start
+	0x00,
+	0x00, //roi0 x end
+	0x00,
+	0x00, //roi0 y start
+	0x00,
+	0x00, //roi0 y end
+	0x00,
+	0x00, //roi1 x strat
+	0x00,
+	0x00, //roi1 x end
+	0x00,
+	0x00, //roi1 y start
+	0x00,
+	0x00, //roi1 y end
+	0x00,
+	0x00, //scr Cr Yb
+	0xff, //scr Rr Bb
+	0xff, //scr Cg Yg
+	0x00, //scr Rg Bg
+	0xff, //scr Cb Yr
+	0x00, //scr Rb Br
+	0xff, //scr Mr Mb
+	0x00, //scr Gr Gb
+	0x00, //scr Mg Mg
+	0xff, //scr Gg Gg
+	0xff, //scr Mb Mr
+	0x00, //scr Gb Gr
+	0xff, //scr Yr Cb
+	0x00, //scr Br Rb
+	0xff, //scr Yg Cg
+	0x00, //scr Bg Rg
+	0x00, //scr Yb Cr
+	0xff, //scr Bb Rr
+	0xff, //scr Wr Wb
+	0x00, //scr Kr Kb
+	0xff, //scr Wg Wg
+	0x00, //scr Kg Kg
+	0xff, //scr Wb Wr
+	0x00, //scr Kb Kr
+	0x00, //curve 1 b
+	0x20, //curve 1 a
+	0x00, //curve 2 b
+	0x20, //curve 2 a
+	0x00, //curve 3 b
+	0x20, //curve 3 a
+	0x00, //curve 4 b
+	0x20, //curve 4 a
+	0x02, //curve 5 b
+	0x1b, //curve 5 a
+	0x02, //curve 6 b
+	0x1b, //curve 6 a
+	0x02, //curve 7 b
+	0x1b, //curve 7 a
+	0x02, //curve 8 b
+	0x1b, //curve 8 a
+	0x09, //curve 9 b
+	0xa6, //curve 9 a
+	0x09, //curve10 b
+	0xa6, //curve10 a
+	0x09, //curve11 b
+	0xa6, //curve11 a
+	0x09, //curve12 b
+	0xa6, //curve12 a
+	0x00, //curve13 b
+	0x20, //curve13 a
+	0x00, //curve14 b
+	0x20, //curve14 a
+	0x00, //curve15 b
+	0x20, //curve15 a
+	0x00, //curve16 b
+	0x20, //curve16 a
+	0x00, //curve17 b
+	0x20, //curve17 a
+	0x00, //curve18 b
+	0x20, //curve18 a
+	0x00, //curve19 b
+	0x20, //curve19 a
+	0x00, //curve20 b
+	0x20, //curve20 a
+	0x00, //curve21 b
+	0x20, //curve21 a
+	0x00, //curve22 b
+	0x20, //curve22 a
+	0x00, //curve23 b
+	0x20, //curve23 a
+	0x00, //curve24 b
+	0xFF, //curve24 a
+	0x01, //cs gain
+	0x00,
+	//end
+};
+
+char AUTO_CAMERA_1[] = {
+	//start
+	0xEB,
+	0x01, //mdnie_en
+	0x00, //mask 000
+	0x33, //scr_roi 1 scr algo_roi 1 algo 00 1 0 00 1 0
+	0x01, //data_width sharpen cs gamma 00 00 0 0
+};
+
+char AUTO_CAMERA_2[] = {
+	0xEC,
+	0x00, //roi ctrl
+	0x00, //roi0 x start
+	0x00,
+	0x00, //roi0 x end
+	0x00,
+	0x00, //roi0 y start
+	0x00,
+	0x00, //roi0 y end
+	0x00,
+	0x00, //roi1 x strat
+	0x00,
+	0x00, //roi1 x end
+	0x00,
+	0x00, //roi1 y start
+	0x00,
+	0x00, //roi1 y end
+	0x00,
+	0x00, //scr Cr Yb
+	0xff, //scr Rr Bb
+	0xff, //scr Cg Yg
+	0x1c, //scr Rg Bg
+	0xff, //scr Cb Yr
+	0x1c, //scr Rb Br
+	0xff, //scr Mr Mb
+	0x00, //scr Gr Gb
+	0x00, //scr Mg Mg
+	0xff, //scr Gg Gg
+	0xff, //scr Mb Mr
+	0x00, //scr Gb Gr
+	0xff, //scr Yr Cb
+	0x00, //scr Br Rb
+	0xff, //scr Yg Cg
+	0x00, //scr Bg Rg
+	0x00, //scr Yb Cr
+	0xff, //scr Bb Rr
+	0xff, //scr Wr Wb
+	0x00, //scr Kr Kb
+	0xff, //scr Wg Wg
+	0x00, //scr Kg Kg
+	0xff, //scr Wb Wr
+	0x00, //scr Kb Kr
+	0x00, //curve 1 b
+	0x20, //curve 1 a
+	0x00, //curve 2 b
+	0x20, //curve 2 a
+	0x00, //curve 3 b
+	0x20, //curve 3 a
+	0x00, //curve 4 b
+	0x20, //curve 4 a
+	0x02, //curve 5 b
+	0x1b, //curve 5 a
+	0x02, //curve 6 b
+	0x1b, //curve 6 a
+	0x02, //curve 7 b
+	0x1b, //curve 7 a
+	0x02, //curve 8 b
+	0x1b, //curve 8 a
+	0x09, //curve 9 b
+	0xa6, //curve 9 a
+	0x09, //curve10 b
+	0xa6, //curve10 a
+	0x09, //curve11 b
+	0xa6, //curve11 a
+	0x09, //curve12 b
+	0xa6, //curve12 a
+	0x00, //curve13 b
+	0x20, //curve13 a
+	0x00, //curve14 b
+	0x20, //curve14 a
+	0x00, //curve15 b
+	0x20, //curve15 a
+	0x00, //curve16 b
+	0x20, //curve16 a
+	0x00, //curve17 b
+	0x20, //curve17 a
+	0x00, //curve18 b
+	0x20, //curve18 a
+	0x00, //curve19 b
+	0x20, //curve19 a
+	0x00, //curve20 b
+	0x20, //curve20 a
+	0x00, //curve21 b
+	0x20, //curve21 a
+	0x00, //curve22 b
+	0x20, //curve22 a
+	0x00, //curve23 b
+	0x20, //curve23 a
+	0x00, //curve24 b
+	0xFF, //curve24 a
+	0x01, //cs gain
+	0x00,
+	//end
+};
+
+static char NEGATIVE_1[] = {
+	//start
+	0xEB,
+	0x01, //mdnie_en
+	0x00, //mask 000
+	0x30, //scr_roi 1 scr algo_roi 1 algo 00 1 0 00 1 0
+	0x00, //data_width sharpen cs gamma 00 00 0 0
+};
+
+static char NEGATIVE_2[] = {
+	0xEC,
+	0x00, //roi ctrl
+	0x00, //roi0 x start
+	0x00,
+	0x00, //roi0 x end
+	0x00,
+	0x00, //roi0 y start
+	0x00,
+	0x00, //roi0 y end
+	0x00,
+	0x00, //roi1 x strat
+	0x00,
+	0x00, //roi1 x end
+	0x00,
+	0x00, //roi1 y start
+	0x00,
+	0x00, //roi1 y end
+	0x00,
+	0xff, //scr Cr Yb
+	0x00, //scr Rr Bb
+	0x00, //scr Cg Yg
+	0xff, //scr Rg Bg
+	0x00, //scr Cb Yr
+	0xff, //scr Rb Br
+	0x00, //scr Mr Mb
+	0xff, //scr Gr Gb
+	0xff, //scr Mg Mg
+	0x00, //scr Gg Gg
+	0x00, //scr Mb Mr
+	0xff, //scr Gb Gr
+	0x00, //scr Yr Cb
+	0xff, //scr Br Rb
+	0x00, //scr Yg Cg
+	0xff, //scr Bg Rg
+	0xff, //scr Yb Cr
+	0x00, //scr Bb Rr
+	0x00, //scr Wr Wb
+	0xff, //scr Kr Kb
+	0x00, //scr Wg Wg
+	0xff, //scr Kg Kg
+	0x00, //scr Wb Wr
+	0xff, //scr Kb Kr
+	0x00, //curve 1 b
+	0x20, //curve 1 a
+	0x00, //curve 2 b
+	0x20, //curve 2 a
+	0x00, //curve 3 b
+	0x20, //curve 3 a
+	0x00, //curve 4 b
+	0x20, //curve 4 a
+	0x00, //curve 5 b
+	0x20, //curve 5 a
+	0x00, //curve 6 b
+	0x20, //curve 6 a
+	0x00, //curve 7 b
+	0x20, //curve 7 a
+	0x00, //curve 8 b
+	0x20, //curve 8 a
+	0x00, //curve 9 b
+	0x20, //curve 9 a
+	0x00, //curve10 b
+	0x20, //curve10 a
+	0x00, //curve11 b
+	0x20, //curve11 a
+	0x00, //curve12 b
+	0x20, //curve12 a
+	0x00, //curve13 b
+	0x20, //curve13 a
+	0x00, //curve14 b
+	0x20, //curve14 a
+	0x00, //curve15 b
+	0x20, //curve15 a
+	0x00, //curve16 b
+	0x20, //curve16 a
+	0x00, //curve17 b
+	0x20, //curve17 a
+	0x00, //curve18 b
+	0x20, //curve18 a
+	0x00, //curve19 b
+	0x20, //curve19 a
+	0x00, //curve20 b
+	0x20, //curve20 a
+	0x00, //curve21 b
+	0x20, //curve21 a
+	0x00, //curve22 b
+	0x20, //curve22 a
+	0x00, //curve23 b
+	0x20, //curve23 a
+	0x00, //curve24 b
+	0xFF, //curve24 a
+	0x01, //cs gain
+	0x00,
+	//end
+};
+
+char COLOR_BLIND_1[] = {
+	//start
+	0xEB,
+	0x01, //mdnie_en
+	0x00, //mask 000
+	0x30, //scr_roi 1 scr algo_roi 1 algo 00 1 0 00 1 0
+	0x00, //data_width sharpen cs gamma 00 00 0 0
+};
+
+char COLOR_BLIND_2[] = {
+	0xEC,
+	0x00, //roi ctrl
+	0x00, //roi0 x start
+	0x00,
+	0x00, //roi0 x end
+	0x00,
+	0x00, //roi0 y start
+	0x00,
+	0x00, //roi0 y end
+	0x00,
+	0x00, //roi1 x strat
+	0x00,
+	0x00, //roi1 x end
+	0x00,
+	0x00, //roi1 y start
+	0x00,
+	0x00, //roi1 y end
+	0x00,
+	0x00, //scr Cr Yb
+	0xff, //scr Rr Bb
+	0xff, //scr Cg Yg
+	0x00, //scr Rg Bg
+	0xff, //scr Cb Yr
+	0x00, //scr Rb Br
+	0xff, //scr Mr Mb
+	0x00, //scr Gr Gb
+	0x00, //scr Mg Mg
+	0xff, //scr Gg Gg
+	0xff, //scr Mb Mr
+	0x00, //scr Gb Gr
+	0xff, //scr Yr Cb
+	0x00, //scr Br Rb
+	0xff, //scr Yg Cg
+	0x00, //scr Bg Rg
+	0x00, //scr Yb Cr
+	0xff, //scr Bb Rr
+	0xff, //scr Wr Wb
+	0x00, //scr Kr Kb
+	0xff, //scr Wg Wg
+	0x00, //scr Kg Kg
+	0xff, //scr Wb Wr
+	0x00, //scr Kb Kr
+	0x00, //curve 1 b
+	0x20, //curve 1 a
+	0x00, //curve 2 b
+	0x20, //curve 2 a
+	0x00, //curve 3 b
+	0x20, //curve 3 a
+	0x00, //curve 4 b
+	0x20, //curve 4 a
+	0x00, //curve 5 b
+	0x20, //curve 5 a
+	0x00, //curve 6 b
+	0x20, //curve 6 a
+	0x00, //curve 7 b
+	0x20, //curve 7 a
+	0x00, //curve 8 b
+	0x20, //curve 8 a
+	0x00, //curve 9 b
+	0x20, //curve 9 a
+	0x00, //curve10 b
+	0x20, //curve10 a
+	0x00, //curve11 b
+	0x20, //curve11 a
+	0x00, //curve12 b
+	0x20, //curve12 a
+	0x00, //curve13 b
+	0x20, //curve13 a
+	0x00, //curve14 b
+	0x20, //curve14 a
+	0x00, //curve15 b
+	0x20, //curve15 a
+	0x00, //curve16 b
+	0x20, //curve16 a
+	0x00, //curve17 b
+	0x20, //curve17 a
+	0x00, //curve18 b
+	0x20, //curve18 a
+	0x00, //curve19 b
+	0x20, //curve19 a
+	0x00, //curve20 b
+	0x20, //curve20 a
+	0x00, //curve21 b
+	0x20, //curve21 a
+	0x00, //curve22 b
+	0x20, //curve22 a
+	0x00, //curve23 b
+	0x20, //curve23 a
+	0x00, //curve24 b
+	0xFF, //curve24 a
+	0x01, //cs gain
+	0x00,
+	//end
+};
+
+////////////////// BROWSER /////////////////////
+
+char STANDARD_BROWSER_1[] = {
+	//start
+	0xEB,
+	0x01, //mdnie_en
+	0x00, //mask 000
+	0x33, //scr_roi 1 scr algo_roi 1 algo 00 1 0 00 1 0
+	0x01, //data_width sharpen cs gamma 00 00 0 0
+};
+
+char STANDARD_BROWSER_2[] = {
+	0xEC,
+	0x00, //roi ctrl
+	0x00, //roi0 x start
+	0x00,
+	0x00, //roi0 x end
+	0x00,
+	0x00, //roi0 y start
+	0x00,
+	0x00, //roi0 y end
+	0x00,
+	0x00, //roi1 x strat
+	0x00,
+	0x00, //roi1 x end
+	0x00,
+	0x00, //roi1 y start
+	0x00,
+	0x00, //roi1 y end
+	0x00,
+	0x00, //scr Cr Yb
+	0xff, //scr Rr Bb
+	0xea, //scr Cg Yg
+	0x08, //scr Rg Bg
+	0xe0, //scr Cb Yr
+	0x06, //scr Rb Br
+	0xff, //scr Mr Mb
+	0x00, //scr Gr Gb
+	0x00, //scr Mg Mg
+	0xe0, //scr Gg Gg
+	0xdc, //scr Mb Mr
+	0x00, //scr Gb Gr
+	0xf2, //scr Yr Cb
+	0x14, //scr Br Rb
+	0xef, //scr Yg Cg
+	0x04, //scr Bg Rg
+	0x23, //scr Yb Cr
+	0xf3, //scr Bb Rr
+	0xff, //scr Wr Wb
+	0x00, //scr Kr Kb
+	0xf6, //scr Wg Wg
+	0x00, //scr Kg Kg
+	0xed, //scr Wb Wr
+	0x00, //scr Kb Kr
+	0x00, //curve 1 b
+	0x20, //curve 1 a
+	0x00, //curve 2 b
+	0x20, //curve 2 a
+	0x00, //curve 3 b
+	0x20, //curve 3 a
+	0x00, //curve 4 b
+	0x20, //curve 4 a
+	0x02, //curve 5 b
+	0x1b, //curve 5 a
+	0x02, //curve 6 b
+	0x1b, //curve 6 a
+	0x02, //curve 7 b
+	0x1b, //curve 7 a
+	0x02, //curve 8 b
+	0x1b, //curve 8 a
+	0x09, //curve 9 b
+	0xa6, //curve 9 a
+	0x09, //curve10 b
+	0xa6, //curve10 a
+	0x09, //curve11 b
+	0xa6, //curve11 a
+	0x09, //curve12 b
+	0xa6, //curve12 a
+	0x00, //curve13 b
+	0x20, //curve13 a
+	0x00, //curve14 b
+	0x20, //curve14 a
+	0x00, //curve15 b
+	0x20, //curve15 a
+	0x00, //curve16 b
+	0x20, //curve16 a
+	0x00, //curve17 b
+	0x20, //curve17 a
+	0x00, //curve18 b
+	0x20, //curve18 a
+	0x00, //curve19 b
+	0x20, //curve19 a
+	0x00, //curve20 b
+	0x20, //curve20 a
+	0x00, //curve21 b
+	0x20, //curve21 a
+	0x00, //curve22 b
+	0x20, //curve22 a
+	0x00, //curve23 b
+	0x20, //curve23 a
+	0x00, //curve24 b
+	0xFF, //curve24 a
+	0x01, //cs gain
+	0x00,
+	//end
+};
+
+char NATURAL_BROWSER_1[] = {
+	//start
+	0xEB,
+	0x01, //mdnie_en
+	0x00, //mask 000
+	0x33, //scr_roi 1 scr algo_roi 1 algo 00 1 0 00 1 0
+	0x03, //data_width sharpen cs gamma 00 00 0 0
+};
+
+char NATURAL_BROWSER_2[] = {
+	0xEC,
+	0x00, //roi ctrl
+	0x00, //roi0 x start
+	0x00,
+	0x00, //roi0 x end
+	0x00,
+	0x00, //roi0 y start
+	0x00,
+	0x00, //roi0 y end
+	0x00,
+	0x00, //roi1 x strat
+	0x00,
+	0x00, //roi1 x end
+	0x00,
+	0x00, //roi1 y start
+	0x00,
+	0x00, //roi1 y end
+	0x00,
+	0x84, //scr Cr Yb
+	0xe1, //scr Rr Bb
+	0xf3, //scr Cg Yg
+	0x20, //scr Rg Bg
+	0xec, //scr Cb Yr
+	0x1c, //scr Rb Br
+	0xe8, //scr Mr Mb
+	0x63, //scr Gr Gb
+	0x2d, //scr Mg Mg
+	0xed, //scr Gg Gg
+	0xe8, //scr Mb Mr
+	0x37, //scr Gb Gr
+	0xf2, //scr Yr Cb
+	0x28, //scr Br Rb
+	0xf0, //scr Yg Cg
+	0x16, //scr Bg Rg
+	0x5a, //scr Yb Cr
+	0xe9, //scr Bb Rr
+	0xff, //scr Wr Wb
+	0x00, //scr Kr Kb
+	0xf7, //scr Wg Wg
+	0x00, //scr Kg Kg
+	0xed, //scr Wb Wr
+	0x00, //scr Kb Kr
+	0x00, //curve 1 b
+	0x20, //curve 1 a
+	0x00, //curve 2 b
+	0x20, //curve 2 a
+	0x00, //curve 3 b
+	0x20, //curve 3 a
+	0x00, //curve 4 b
+	0x20, //curve 4 a
+	0x02, //curve 5 b
+	0x1b, //curve 5 a
+	0x02, //curve 6 b
+	0x1b, //curve 6 a
+	0x02, //curve 7 b
+	0x1b, //curve 7 a
+	0x02, //curve 8 b
+	0x1b, //curve 8 a
+	0x09, //curve 9 b
+	0xa6, //curve 9 a
+	0x09, //curve10 b
+	0xa6, //curve10 a
+	0x09, //curve11 b
+	0xa6, //curve11 a
+	0x09, //curve12 b
+	0xa6, //curve12 a
+	0x00, //curve13 b
+	0x20, //curve13 a
+	0x00, //curve14 b
+	0x20, //curve14 a
+	0x00, //curve15 b
+	0x20, //curve15 a
+	0x00, //curve16 b
+	0x20, //curve16 a
+	0x00, //curve17 b
+	0x20, //curve17 a
+	0x00, //curve18 b
+	0x20, //curve18 a
+	0x00, //curve19 b
+	0x20, //curve19 a
+	0x00, //curve20 b
+	0x20, //curve20 a
+	0x00, //curve21 b
+	0x20, //curve21 a
+	0x00, //curve22 b
+	0x20, //curve22 a
+	0x00, //curve23 b
+	0x20, //curve23 a
+	0x00, //curve24 b
+	0xFF, //curve24 a
+	0x01, //cs gain
+	0x40,
+	//end
+};
+
+char DYNAMIC_BROWSER_1[] = {
+	//start
+	0xEB,
+	0x01, //mdnie_en
+	0x00, //mask 000
+	0x33, //scr_roi 1 scr algo_roi 1 algo 00 1 0 00 1 0
+	0x03, //data_width sharpen cs gamma 00 00 0 0
+};
+
+char DYNAMIC_BROWSER_2[] = {
+	0xEC,
+	0x00, //roi ctrl
+	0x00, //roi0 x start
+	0x00,
+	0x00, //roi0 x end
+	0x00,
+	0x00, //roi0 y start
+	0x00,
+	0x00, //roi0 y end
+	0x00,
+	0x00, //roi1 x strat
+	0x00,
+	0x00, //roi1 x end
+	0x00,
+	0x00, //roi1 y start
+	0x00,
+	0x00, //roi1 y end
+	0x00,
+	0x00, //scr Cr Yb
+	0xff, //scr Rr Bb
+	0xff, //scr Cg Yg
+	0x20, //scr Rg Bg
+	0xff, //scr Cb Yr
+	0x20, //scr Rb Br
+	0xff, //scr Mr Mb
+	0x00, //scr Gr Gb
+	0x00, //scr Mg Mg
+	0xff, //scr Gg Gg
+	0xff, //scr Mb Mr
+	0x00, //scr Gb Gr
+	0xff, //scr Yr Cb
+	0x00, //scr Br Rb
+	0xff, //scr Yg Cg
+	0x00, //scr Bg Rg
+	0x00, //scr Yb Cr
+	0xff, //scr Bb Rr
+	0xff, //scr Wr Wb
+	0x00, //scr Kr Kb
+	0xff, //scr Wg Wg
+	0x00, //scr Kg Kg
+	0xff, //scr Wb Wr
+	0x00, //scr Kb Kr
+	0x00, //curve 1 b
+	0x14, //curve 1 a
+	0x00, //curve 2 b
+	0x14, //curve 2 a
+	0x00, //curve 3 b
+	0x14, //curve 3 a
+	0x00, //curve 4 b
+	0x14, //curve 4 a
+	0x03, //curve 5 b
+	0x9a, //curve 5 a
+	0x03, //curve 6 b
+	0x9a, //curve 6 a
+	0x03, //curve 7 b
+	0x9a, //curve 7 a
+	0x03, //curve 8 b
+	0x9a, //curve 8 a
+	0x07, //curve 9 b
+	0x9e, //curve 9 a
+	0x07, //curve10 b
+	0x9e, //curve10 a
+	0x07, //curve11 b
+	0x9e, //curve11 a
+	0x07, //curve12 b
+	0x9e, //curve12 a
+	0x0a, //curve13 b
+	0xa0, //curve13 a
+	0x0a, //curve14 b
+	0xa0, //curve14 a
+	0x0a, //curve15 b
+	0xa0, //curve15 a
+	0x0a, //curve16 b
+	0xa0, //curve16 a
+	0x16, //curve17 b
+	0xa6, //curve17 a
+	0x16, //curve18 b
+	0xa6, //curve18 a
+	0x16, //curve19 b
+	0xa6, //curve19 a
+	0x16, //curve20 b
+	0xa6, //curve20 a
+	0x05, //curve21 b
+	0x21, //curve21 a
+	0x0b, //curve22 b
+	0x20, //curve22 a
+	0x87, //curve23 b
+	0x0f, //curve23 a
+	0x00, //curve24 b
+	0xFF, //curve24 a
+	0x01, //cs gain
+	0x20,
+	//end
+};
+
+char MOVIE_BROWSER_1[] = {
+	0xEB,
+	0x01, //mdnie_en
+	0x00, //mask 000
+	0x33, //scr_roi 1 scr algo_roi 1 algo 00 1 0 00 1 0
+	0x03, //data_width sharpen cs gamma 00 00 0 0
+};
+
+char MOVIE_BROWSER_2[] = {
+	0xEC,
+	0x00, //roi ctrl
+	0x00, //roi1 y end
+	0x00,
+	0x00, //roi1 y start
+	0x00,
+	0x00, //roi1 x end
+	0x00,
+	0x00, //roi1 x strat
+	0x00,
+	0x00, //roi0 y end
+	0x00,
+	0x00, //roi0 y start
+	0x00,
+	0x00, //roi0 x end
+	0x00,
+	0x00, //roi0 x start
+	0x00,
+	0x87, //scr Cr Yb
+	0xe7, //scr Rr Bb
+	0xff, //scr Cg Yg
+	0x1e, //scr Rg Bg
+	0xf2, //scr Cb Yr
+	0x1e, //scr Rb Br
+	0xf5, //scr Mr Mb
+	0x73, //scr Gr Gb
+	0x2a, //scr Mg Mg
+	0xf7, //scr Gg Gg
+	0xf0, //scr Mb Mr
+	0x37, //scr Gb Gr
+	0xfa, //scr Yr Cb
+	0x2e, //scr Br Rb
+	0xf5, //scr Yg Cg
+	0x14, //scr Bg Rg
+	0x3c, //scr Yb Cr
+	0xed, //scr Bb Rr
+	0xff, //scr Wr Wb
+	0x00, //scr Kr Kb
+	0xf6, //scr Wg Wg
+	0x00, //scr Kg Kg
+	0xee, //scr Wb Wr
+	0x00, //scr Kb Kr
+	0x00, //curve_1_b
+	0x20, //curve_1_a
+	0x00, //curve_2_b
+	0x20, //curve_2_a
+	0x00, //curve_3_b
+	0x20, //curve_3_a
+	0x00, //curve_4_b
+	0x20, //curve_4_a
+	0x02, //curve_5_b
+	0x1b, //curve_5_a
+	0x02, //curve_6_b
+	0x1b, //curve_6_a
+	0x02, //curve_7_b
+	0x1b, //curve_7_a
+	0x02, //curve_8_b
+	0x1b, //curve_8_a
+	0x09, //curve_9_b
+	0xa6, //curve_9_a
+	0x09, //curve10_b
+	0xa6, //curve10_a
+	0x09, //curve11_b
+	0xa6, //curve11_a
+	0x09, //curve12_b
+	0xa6, //curve12_a
+	0x00, //curve13_b
+	0x20, //curve13_a
+	0x00, //curve14_b
+	0x20, //curve14_a
+	0x00, //curve15_b
+	0x20, //curve15_a
+	0x00, //curve16_b
+	0x20, //curve16_a
+	0x00, //curve17_b
+	0x20, //curve17_a
+	0x00, //curve18_b
+	0x20, //curve18_a
+	0x00, //curve19_b
+	0x20, //curve19_a
+	0x00, //curve20_b
+	0x20, //curve20_a
+	0x00, //curve21_b
+	0x20, //curve21_a
+	0x00, //curve22_b
+	0x20, //curve22_a
+	0x00, //curve23_b
+	0x20, //curve23_a
+	0x00, //curve24_b
+	0xFF, //curve24_a
+	0x01, //cs gain
+	0x20,
+};
+
+char AUTO_BROWSER_1[] = {
+	//start
+	0xEB,
+	0x01, //mdnie_en
+	0x00, //mask 000
+	0x33, //scr_roi 1 scr algo_roi 1 algo 00 1 0 00 1 0
+	0x01, //data_width sharpen cs gamma 00 00 0 0
+};
+
+char AUTO_BROWSER_2[] = {
+	0xEC,
+	0x00, //roi ctrl
+	0x00, //roi0 x start
+	0x00,
+	0x00, //roi0 x end
+	0x00,
+	0x00, //roi0 y start
+	0x00,
+	0x00, //roi0 y end
+	0x00,
+	0x00, //roi1 x strat
+	0x00,
+	0x00, //roi1 x end
+	0x00,
+	0x00, //roi1 y start
+	0x00,
+	0x00, //roi1 y end
+	0x00,
+	0x00, //scr Cr Yb
+	0xff, //scr Rr Bb
+	0xff, //scr Cg Yg
+	0x1c, //scr Rg Bg
+	0xff, //scr Cb Yr
+	0x1c, //scr Rb Br
+	0xff, //scr Mr Mb
+	0x00, //scr Gr Gb
+	0x00, //scr Mg Mg
+	0xff, //scr Gg Gg
+	0xff, //scr Mb Mr
+	0x00, //scr Gb Gr
+	0xff, //scr Yr Cb
+	0x00, //scr Br Rb
+	0xff, //scr Yg Cg
+	0x00, //scr Bg Rg
+	0x00, //scr Yb Cr
+	0xff, //scr Bb Rr
+	0xff, //scr Wr Wb
+	0x00, //scr Kr Kb
+	0xff, //scr Wg Wg
+	0x00, //scr Kg Kg
+	0xff, //scr Wb Wr
+	0x00, //scr Kb Kr
+	0x00, //curve 1 b
+	0x20, //curve 1 a
+	0x00, //curve 2 b
+	0x20, //curve 2 a
+	0x00, //curve 3 b
+	0x20, //curve 3 a
+	0x00, //curve 4 b
+	0x20, //curve 4 a
+	0x02, //curve 5 b
+	0x1b, //curve 5 a
+	0x02, //curve 6 b
+	0x1b, //curve 6 a
+	0x02, //curve 7 b
+	0x1b, //curve 7 a
+	0x02, //curve 8 b
+	0x1b, //curve 8 a
+	0x09, //curve 9 b
+	0xa6, //curve 9 a
+	0x09, //curve10 b
+	0xa6, //curve10 a
+	0x09, //curve11 b
+	0xa6, //curve11 a
+	0x09, //curve12 b
+	0xa6, //curve12 a
+	0x00, //curve13 b
+	0x20, //curve13 a
+	0x00, //curve14 b
+	0x20, //curve14 a
+	0x00, //curve15 b
+	0x20, //curve15 a
+	0x00, //curve16 b
+	0x20, //curve16 a
+	0x00, //curve17 b
+	0x20, //curve17 a
+	0x00, //curve18 b
+	0x20, //curve18 a
+	0x00, //curve19 b
+	0x20, //curve19 a
+	0x00, //curve20 b
+	0x20, //curve20 a
+	0x00, //curve21 b
+	0x20, //curve21 a
+	0x00, //curve22 b
+	0x20, //curve22 a
+	0x00, //curve23 b
+	0x20, //curve23 a
+	0x00, //curve24 b
+	0xFF, //curve24 a
+	0x01, //cs gain
+	0x00,
+	//end
+};
+
+////////////////// eBOOK /////////////////////
+
+char AUTO_EBOOK_1[] = {
+	//start
+	0xEB,
+	0x01, //mdnie_en
+	0x00, //mask 000
+	0x30, //scr_roi 1 scr algo_roi 1 algo 00 1 0 00 1 0
+	0x00, //data_width sharpen cs gamma 00 00 0 0
+};
+
+char AUTO_EBOOK_2[] = {
+	0xEC,
+	0x00, //roi ctrl
+	0x00, //roi0 x start
+	0x00,
+	0x00, //roi0 x end
+	0x00,
+	0x00, //roi0 y start
+	0x00,
+	0x00, //roi0 y end
+	0x00,
+	0x00, //roi1 x strat
+	0x00,
+	0x00, //roi1 x end
+	0x00,
+	0x00, //roi1 y start
+	0x00,
+	0x00, //roi1 y end
+	0x00,
+	0x00, //scr Cr Yb
+	0xff, //scr Rr Bb
+	0xff, //scr Cg Yg
+	0x00, //scr Rg Bg
+	0xff, //scr Cb Yr
+	0x00, //scr Rb Br
+	0xff, //scr Mr Mb
+	0x00, //scr Gr Gb
+	0x00, //scr Mg Mg
+	0xff, //scr Gg Gg
+	0xff, //scr Mb Mr
+	0x00, //scr Gb Gr
+	0xff, //scr Yr Cb
+	0x00, //scr Br Rb
+	0xff, //scr Yg Cg
+	0x00, //scr Bg Rg
+	0x00, //scr Yb Cr
+	0xff, //scr Bb Rr
+	0xff, //scr Wr Wb
+	0x00, //scr Kr Kb
+	0xf3, //scr Wg Wg
+	0x00, //scr Kg Kg
+	0xe4, //scr Wb Wr
+	0x00, //scr Kb Kr
+	0x00, //curve 1 b
+	0x20, //curve 1 a
+	0x00, //curve 2 b
+	0x20, //curve 2 a
+	0x00, //curve 3 b
+	0x20, //curve 3 a
+	0x00, //curve 4 b
+	0x20, //curve 4 a
+	0x02, //curve 5 b
+	0x1b, //curve 5 a
+	0x02, //curve 6 b
+	0x1b, //curve 6 a
+	0x02, //curve 7 b
+	0x1b, //curve 7 a
+	0x02, //curve 8 b
+	0x1b, //curve 8 a
+	0x09, //curve 9 b
+	0xa6, //curve 9 a
+	0x09, //curve10 b
+	0xa6, //curve10 a
+	0x09, //curve11 b
+	0xa6, //curve11 a
+	0x09, //curve12 b
+	0xa6, //curve12 a
+	0x00, //curve13 b
+	0x20, //curve13 a
+	0x00, //curve14 b
+	0x20, //curve14 a
+	0x00, //curve15 b
+	0x20, //curve15 a
+	0x00, //curve16 b
+	0x20, //curve16 a
+	0x00, //curve17 b
+	0x20, //curve17 a
+	0x00, //curve18 b
+	0x20, //curve18 a
+	0x00, //curve19 b
+	0x20, //curve19 a
+	0x00, //curve20 b
+	0x20, //curve20 a
+	0x00, //curve21 b
+	0x20, //curve21 a
+	0x00, //curve22 b
+	0x20, //curve22 a
+	0x00, //curve23 b
+	0x20, //curve23 a
+	0x00, //curve24 b
+	0xFF, //curve24 a
+	0x01, //cs gain
+	0x00,
+	//end
+};
+
+char STANDARD_EBOOK_1[] = {
+	//start
+	0xEB,
+	0x01, //mdnie_en
+	0x00, //mask 000
+	0x33, //scr_roi 1 scr algo_roi 1 algo 00 1 0 00 1 0
+	0x01, //data_width sharpen cs gamma 00 00 0 0
+};
+
+char STANDARD_EBOOK_2[] = {
+	0xEC,
+	0x00, //roi ctrl
+	0x00, //roi0 x start
+	0x00,
+	0x00, //roi0 x end
+	0x00,
+	0x00, //roi0 y start
+	0x00,
+	0x00, //roi0 y end
+	0x00,
+	0x00, //roi1 x strat
+	0x00,
+	0x00, //roi1 x end
+	0x00,
+	0x00, //roi1 y start
+	0x00,
+	0x00, //roi1 y end
+	0x00,
+	0x00, //scr Cr Yb
+	0xff, //scr Rr Bb
+	0xea, //scr Cg Yg
+	0x08, //scr Rg Bg
+	0xe0, //scr Cb Yr
+	0x06, //scr Rb Br
+	0xff, //scr Mr Mb
+	0x00, //scr Gr Gb
+	0x00, //scr Mg Mg
+	0xe0, //scr Gg Gg
+	0xdc, //scr Mb Mr
+	0x00, //scr Gb Gr
+	0xf2, //scr Yr Cb
+	0x14, //scr Br Rb
+	0xef, //scr Yg Cg
+	0x04, //scr Bg Rg
+	0x23, //scr Yb Cr
+	0xf3, //scr Bb Rr
+	0xff, //scr Wr Wb
+	0x00, //scr Kr Kb
+	0xf6, //scr Wg Wg
+	0x00, //scr Kg Kg
+	0xed, //scr Wb Wr
+	0x00, //scr Kb Kr
+	0x00, //curve 1 b
+	0x20, //curve 1 a
+	0x00, //curve 2 b
+	0x20, //curve 2 a
+	0x00, //curve 3 b
+	0x20, //curve 3 a
+	0x00, //curve 4 b
+	0x20, //curve 4 a
+	0x02, //curve 5 b
+	0x1b, //curve 5 a
+	0x02, //curve 6 b
+	0x1b, //curve 6 a
+	0x02, //curve 7 b
+	0x1b, //curve 7 a
+	0x02, //curve 8 b
+	0x1b, //curve 8 a
+	0x09, //curve 9 b
+	0xa6, //curve 9 a
+	0x09, //curve10 b
+	0xa6, //curve10 a
+	0x09, //curve11 b
+	0xa6, //curve11 a
+	0x09, //curve12 b
+	0xa6, //curve12 a
+	0x00, //curve13 b
+	0x20, //curve13 a
+	0x00, //curve14 b
+	0x20, //curve14 a
+	0x00, //curve15 b
+	0x20, //curve15 a
+	0x00, //curve16 b
+	0x20, //curve16 a
+	0x00, //curve17 b
+	0x20, //curve17 a
+	0x00, //curve18 b
+	0x20, //curve18 a
+	0x00, //curve19 b
+	0x20, //curve19 a
+	0x00, //curve20 b
+	0x20, //curve20 a
+	0x00, //curve21 b
+	0x20, //curve21 a
+	0x00, //curve22 b
+	0x20, //curve22 a
+	0x00, //curve23 b
+	0x20, //curve23 a
+	0x00, //curve24 b
+	0xFF, //curve24 a
+	0x01, //cs gain
+	0x00,
+	//end
+};
+
+char DYNAMIC_EBOOK_1[] = {
+	//start
+	0xEB,
+	0x01, //mdnie_en
+	0x00, //mask 000
+	0x33, //scr_roi 1 scr algo_roi 1 algo 00 1 0 00 1 0
+	0x03, //data_width sharpen cs gamma 00 00 0 0
+};
+
+char DYNAMIC_EBOOK_2[] = {
+	0xEC,
+	0x00, //roi ctrl
+	0x00, //roi0 x start
+	0x00,
+	0x00, //roi0 x end
+	0x00,
+	0x00, //roi0 y start
+	0x00,
+	0x00, //roi0 y end
+	0x00,
+	0x00, //roi1 x strat
+	0x00,
+	0x00, //roi1 x end
+	0x00,
+	0x00, //roi1 y start
+	0x00,
+	0x00, //roi1 y end
+	0x00,
+	0x00, //scr Cr Yb
+	0xff, //scr Rr Bb
+	0xff, //scr Cg Yg
+	0x20, //scr Rg Bg
+	0xff, //scr Cb Yr
+	0x20, //scr Rb Br
+	0xff, //scr Mr Mb
+	0x00, //scr Gr Gb
+	0x00, //scr Mg Mg
+	0xff, //scr Gg Gg
+	0xff, //scr Mb Mr
+	0x00, //scr Gb Gr
+	0xff, //scr Yr Cb
+	0x00, //scr Br Rb
+	0xff, //scr Yg Cg
+	0x00, //scr Bg Rg
+	0x00, //scr Yb Cr
+	0xff, //scr Bb Rr
+	0xff, //scr Wr Wb
+	0x00, //scr Kr Kb
+	0xff, //scr Wg Wg
+	0x00, //scr Kg Kg
+	0xff, //scr Wb Wr
+	0x00, //scr Kb Kr
+	0x00, //curve 1 b
+	0x14, //curve 1 a
+	0x00, //curve 2 b
+	0x14, //curve 2 a
+	0x00, //curve 3 b
+	0x14, //curve 3 a
+	0x00, //curve 4 b
+	0x14, //curve 4 a
+	0x03, //curve 5 b
+	0x9a, //curve 5 a
+	0x03, //curve 6 b
+	0x9a, //curve 6 a
+	0x03, //curve 7 b
+	0x9a, //curve 7 a
+	0x03, //curve 8 b
+	0x9a, //curve 8 a
+	0x07, //curve 9 b
+	0x9e, //curve 9 a
+	0x07, //curve10 b
+	0x9e, //curve10 a
+	0x07, //curve11 b
+	0x9e, //curve11 a
+	0x07, //curve12 b
+	0x9e, //curve12 a
+	0x0a, //curve13 b
+	0xa0, //curve13 a
+	0x0a, //curve14 b
+	0xa0, //curve14 a
+	0x0a, //curve15 b
+	0xa0, //curve15 a
+	0x0a, //curve16 b
+	0xa0, //curve16 a
+	0x16, //curve17 b
+	0xa6, //curve17 a
+	0x16, //curve18 b
+	0xa6, //curve18 a
+	0x16, //curve19 b
+	0xa6, //curve19 a
+	0x16, //curve20 b
+	0xa6, //curve20 a
+	0x05, //curve21 b
+	0x21, //curve21 a
+	0x0b, //curve22 b
+	0x20, //curve22 a
+	0x87, //curve23 b
+	0x0f, //curve23 a
+	0x00, //curve24 b
+	0xFF, //curve24 a
+	0x01, //cs gain
+	0x20,
+	//end
+};
+
+char NATURAL_EBOOK_1[] = {
+	//start
+	0xEB,
+	0x01, //mdnie_en
+	0x00, //mask 000
+	0x33, //scr_roi 1 scr algo_roi 1 algo 00 1 0 00 1 0
+	0x03, //data_width sharpen cs gamma 00 00 0 0
+};
+
+char NATURAL_EBOOK_2[] = {
+	0xEC,
+	0x00, //roi ctrl
+	0x00, //roi0 x start
+	0x00,
+	0x00, //roi0 x end
+	0x00,
+	0x00, //roi0 y start
+	0x00,
+	0x00, //roi0 y end
+	0x00,
+	0x00, //roi1 x strat
+	0x00,
+	0x00, //roi1 x end
+	0x00,
+	0x00, //roi1 y start
+	0x00,
+	0x00, //roi1 y end
+	0x00,
+	0x84, //scr Cr Yb
+	0xe1, //scr Rr Bb
+	0xf3, //scr Cg Yg
+	0x20, //scr Rg Bg
+	0xec, //scr Cb Yr
+	0x1c, //scr Rb Br
+	0xe8, //scr Mr Mb
+	0x63, //scr Gr Gb
+	0x2d, //scr Mg Mg
+	0xed, //scr Gg Gg
+	0xe8, //scr Mb Mr
+	0x37, //scr Gb Gr
+	0xf2, //scr Yr Cb
+	0x28, //scr Br Rb
+	0xf0, //scr Yg Cg
+	0x16, //scr Bg Rg
+	0x5a, //scr Yb Cr
+	0xe9, //scr Bb Rr
+	0xff, //scr Wr Wb
+	0x00, //scr Kr Kb
+	0xf7, //scr Wg Wg
+	0x00, //scr Kg Kg
+	0xed, //scr Wb Wr
+	0x00, //scr Kb Kr
+	0x00, //curve 1 b
+	0x20, //curve 1 a
+	0x00, //curve 2 b
+	0x20, //curve 2 a
+	0x00, //curve 3 b
+	0x20, //curve 3 a
+	0x00, //curve 4 b
+	0x20, //curve 4 a
+	0x02, //curve 5 b
+	0x1b, //curve 5 a
+	0x02, //curve 6 b
+	0x1b, //curve 6 a
+	0x02, //curve 7 b
+	0x1b, //curve 7 a
+	0x02, //curve 8 b
+	0x1b, //curve 8 a
+	0x09, //curve 9 b
+	0xa6, //curve 9 a
+	0x09, //curve10 b
+	0xa6, //curve10 a
+	0x09, //curve11 b
+	0xa6, //curve11 a
+	0x09, //curve12 b
+	0xa6, //curve12 a
+	0x00, //curve13 b
+	0x20, //curve13 a
+	0x00, //curve14 b
+	0x20, //curve14 a
+	0x00, //curve15 b
+	0x20, //curve15 a
+	0x00, //curve16 b
+	0x20, //curve16 a
+	0x00, //curve17 b
+	0x20, //curve17 a
+	0x00, //curve18 b
+	0x20, //curve18 a
+	0x00, //curve19 b
+	0x20, //curve19 a
+	0x00, //curve20 b
+	0x20, //curve20 a
+	0x00, //curve21 b
+	0x20, //curve21 a
+	0x00, //curve22 b
+	0x20, //curve22 a
+	0x00, //curve23 b
+	0x20, //curve23 a
+	0x00, //curve24 b
+	0xFF, //curve24 a
+	0x01, //cs gain
+	0x40,
+	//end
+};
+
+char MOVIE_EBOOK_1[] = {
+	0xEB,
+	0x01, //mdnie_en
+	0x00, //mask 000
+	0x33, //scr_roi 1 scr algo_roi 1 algo 00 1 0 00 1 0
+	0x03, //data_width sharpen cs gamma 00 00 0 0
+};
+
+char MOVIE_EBOOK_2[] = {
+	0xEC,
+	0x00, //roi ctrl
+	0x00, //roi1 y end
+	0x00,
+	0x00, //roi1 y start
+	0x00,
+	0x00, //roi1 x end
+	0x00,
+	0x00, //roi1 x strat
+	0x00,
+	0x00, //roi0 y end
+	0x00,
+	0x00, //roi0 y start
+	0x00,
+	0x00, //roi0 x end
+	0x00,
+	0x00, //roi0 x start
+	0x00,
+	0x87, //scr Cr Yb
+	0xe7, //scr Rr Bb
+	0xff, //scr Cg Yg
+	0x1e, //scr Rg Bg
+	0xf2, //scr Cb Yr
+	0x1e, //scr Rb Br
+	0xf5, //scr Mr Mb
+	0x73, //scr Gr Gb
+	0x2a, //scr Mg Mg
+	0xf7, //scr Gg Gg
+	0xf0, //scr Mb Mr
+	0x37, //scr Gb Gr
+	0xfa, //scr Yr Cb
+	0x2e, //scr Br Rb
+	0xf5, //scr Yg Cg
+	0x14, //scr Bg Rg
+	0x3c, //scr Yb Cr
+	0xed, //scr Bb Rr
+	0xff, //scr Wr Wb
+	0x00, //scr Kr Kb
+	0xf6, //scr Wg Wg
+	0x00, //scr Kg Kg
+	0xee, //scr Wb Wr
+	0x00, //scr Kb Kr
+	0x00, //curve_1_b
+	0x20, //curve_1_a
+	0x00, //curve_2_b
+	0x20, //curve_2_a
+	0x00, //curve_3_b
+	0x20, //curve_3_a
+	0x00, //curve_4_b
+	0x20, //curve_4_a
+	0x02, //curve_5_b
+	0x1b, //curve_5_a
+	0x02, //curve_6_b
+	0x1b, //curve_6_a
+	0x02, //curve_7_b
+	0x1b, //curve_7_a
+	0x02, //curve_8_b
+	0x1b, //curve_8_a
+	0x09, //curve_9_b
+	0xa6, //curve_9_a
+	0x09, //curve10_b
+	0xa6, //curve10_a
+	0x09, //curve11_b
+	0xa6, //curve11_a
+	0x09, //curve12_b
+	0xa6, //curve12_a
+	0x00, //curve13_b
+	0x20, //curve13_a
+	0x00, //curve14_b
+	0x20, //curve14_a
+	0x00, //curve15_b
+	0x20, //curve15_a
+	0x00, //curve16_b
+	0x20, //curve16_a
+	0x00, //curve17_b
+	0x20, //curve17_a
+	0x00, //curve18_b
+	0x20, //curve18_a
+	0x00, //curve19_b
+	0x20, //curve19_a
+	0x00, //curve20_b
+	0x20, //curve20_a
+	0x00, //curve21_b
+	0x20, //curve21_a
+	0x00, //curve22_b
+	0x20, //curve22_a
+	0x00, //curve23_b
+	0x20, //curve23_a
+	0x00, //curve24_b
+	0xFF, //curve24_a
+	0x01, //cs gain
+	0x20,
+};
+
+char AUTO_EMAIL_1[] = {
+	//start
+	0xEB,
+	0x01, //mdnie_en
+	0x00, //mask 000
+	0x30, //scr_roi 1 scr algo_roi 1 algo 00 1 0 00 1 0
+	0x00, //data_width sharpen cs gamma 00 00 0 0
+};
+
+char AUTO_EMAIL_2[] = {
+	0xEC,
+	0x00, //roi ctrl
+	0x00, //roi0 x start
+	0x00,
+	0x00, //roi0 x end
+	0x00,
+	0x00, //roi0 y start
+	0x00,
+	0x00, //roi0 y end
+	0x00,
+	0x00, //roi1 x strat
+	0x00,
+	0x00, //roi1 x end
+	0x00,
+	0x00, //roi1 y start
+	0x00,
+	0x00, //roi1 y end
+	0x00,
+	0x00, //scr Cr Yb
+	0xff, //scr Rr Bb
+	0xff, //scr Cg Yg
+	0x00, //scr Rg Bg
+	0xff, //scr Cb Yr
+	0x00, //scr Rb Br
+	0xff, //scr Mr Mb
+	0x00, //scr Gr Gb
+	0x00, //scr Mg Mg
+	0xff, //scr Gg Gg
+	0xff, //scr Mb Mr
+	0x00, //scr Gb Gr
+	0xff, //scr Yr Cb
+	0x00, //scr Br Rb
+	0xff, //scr Yg Cg
+	0x00, //scr Bg Rg
+	0x00, //scr Yb Cr
+	0xff, //scr Bb Rr
+	0xff, //scr Wr Wb
+	0x00, //scr Kr Kb
+	0xf9, //scr Wg Wg
+	0x00, //scr Kg Kg
+	0xec, //scr Wb Wr
+	0x00, //scr Kb Kr
+	0x00, //curve 1 b
+	0x20, //curve 1 a
+	0x00, //curve 2 b
+	0x20, //curve 2 a
+	0x00, //curve 3 b
+	0x20, //curve 3 a
+	0x00, //curve 4 b
+	0x20, //curve 4 a
+	0x00, //curve 5 b
+	0x20, //curve 5 a
+	0x00, //curve 6 b
+	0x20, //curve 6 a
+	0x00, //curve 7 b
+	0x20, //curve 7 a
+	0x00, //curve 8 b
+	0x20, //curve 8 a
+	0x00, //curve 9 b
+	0x20, //curve 9 a
+	0x00, //curve10 b
+	0x20, //curve10 a
+	0x00, //curve11 b
+	0x20, //curve11 a
+	0x00, //curve12 b
+	0x20, //curve12 a
+	0x00, //curve13 b
+	0x20, //curve13 a
+	0x00, //curve14 b
+	0x20, //curve14 a
+	0x00, //curve15 b
+	0x20, //curve15 a
+	0x00, //curve16 b
+	0x20, //curve16 a
+	0x00, //curve17 b
+	0x20, //curve17 a
+	0x00, //curve18 b
+	0x20, //curve18 a
+	0x00, //curve19 b
+	0x20, //curve19 a
+	0x00, //curve20 b
+	0x20, //curve20 a
+	0x00, //curve21 b
+	0x20, //curve21 a
+	0x00, //curve22 b
+	0x20, //curve22 a
+	0x00, //curve23 b
+	0x20, //curve23 a
+	0x00, //curve24 b
+	0xFF, //curve24 a
+	0x01, //cs gain
+	0x00,
+	//end
+};
+
+char LOCAL_CE_1[] = {
+	//start
+	0xEB,
+	0x01, //mdnie_en
+	0x00, //mask 000
+	0x33, //scr_roi 1 scr algo_roi 1 algo 00 1 0 00 1 0
+	0x03, //data_width sharpen cs gamma 00 00 0 0
+};
+
+char LOCAL_CE_2[] = {
+	0xEC,
+	0x00, //roi ctrl
+	0x00, //roi0 x start
+	0x00,
+	0x00, //roi0 x end
+	0x00,
+	0x00, //roi0 y start
+	0x00,
+	0x00, //roi0 y end
+	0x00,
+	0x00, //roi1 x strat
+	0x00,
+	0x00, //roi1 x end
+	0x00,
+	0x00, //roi1 y start
+	0x00,
+	0x00, //roi1 y end
+	0x00,
+	0x00, //scr Cr Yb
+	0xff, //scr Rr Bb
+	0xff, //scr Cg Yg
+	0x1c, //scr Rg Bg
+	0xff, //scr Cb Yr
+	0x1c, //scr Rb Br
+	0xff, //scr Mr Mb
+	0x00, //scr Gr Gb
+	0x00, //scr Mg Mg
+	0xff, //scr Gg Gg
+	0xff, //scr Mb Mr
+	0x00, //scr Gb Gr
+	0xff, //scr Yr Cb
+	0x00, //scr Br Rb
+	0xff, //scr Yg Cg
+	0x00, //scr Bg Rg
+	0x00, //scr Yb Cr
+	0xff, //scr Bb Rr
+	0xff, //scr Wr Wb
+	0x00, //scr Kr Kb
+	0xff, //scr Wg Wg
+	0x00, //scr Kg Kg
+	0xff, //scr Wb Wr
+	0x00, //scr Kb Kr
+	0x00, //curve_1_b
+	0x7f, //curve_1_a
+	0x05, //curve_2_b
+	0x58, //curve_2_a
+	0x0f, //curve_3_b
+	0x30, //curve_3_a
+	0x0f, //curve_4_b
+	0x30, //curve_4_a
+	0x0f, //curve_5_b
+	0x30, //curve_5_a
+	0x0f, //curve_6_b
+	0x30, //curve_6_a
+	0x0f, //curve_7_b
+	0x30, //curve_7_a
+	0x0f, //curve_8_b
+	0x30, //curve_8_a
+	0x0f, //curve_9_b
+	0x30, //curve_9_a
+	0x0f, //curve10_b
+	0x30, //curve10_a
+	0x0f, //curve11_b
+	0x30, //curve11_a
+	0x0f, //curve12_b
+	0x30, //curve12_a
+	0x0f, //curve13_b
+	0x30, //curve13_a
+	0x0f, //curve14_b
+	0x30, //curve14_a
+	0x0f, //curve15_b
+	0x30, //curve15_a
+	0x0f, //curve16_b
+	0x30, //curve16_a
+	0x0f, //curve17_b
+	0x30, //curve17_a
+	0x34, //curve18_b
+	0x20, //curve18_a
+	0x34, //curve19_b
+	0x20, //curve19_a
+	0x67, //curve20_b
+	0x13, //curve20_a
+	0x77, //curve21_b
+	0x10, //curve21_a
+	0x77, //curve22_b
+	0x10, //curve22_a
+	0x77, //curve23_b
+	0x10, //curve23_a
+	0x00, //curve24_b
+	0xFF, //curve24_a
+	0x01, //cs gain
+	0x60,
+	//end
+};
+
+char LOCAL_CE_1_TEXT[] = {
+	//start
+	0xEB,
+	0x01, //mdnie_en
+	0x00, //mask 000
+	0x33, //scr_roi 1 scr algo_roi 1 algo 00 1 0 00 1 0
+	0x03, //data_width sharpen cs gamma 00 00 0 0
+};
+
+char LOCAL_CE_2_TEXT[] = {
+	0xEC,
+	0x00, //roi ctrl
+	0x00, //roi0 x start
+	0x00,
+	0x00, //roi0 x end
+	0x00,
+	0x00, //roi0 y start
+	0x00,
+	0x00, //roi0 y end
+	0x00,
+	0x00, //roi1 x strat
+	0x00,
+	0x00, //roi1 x end
+	0x00,
+	0x00, //roi1 y start
+	0x00,
+	0x00, //roi1 y end
+	0x00,
+	0x00, //scr Cr Yb
+	0xff, //scr Rr Bb
+	0xff, //scr Cg Yg
+	0x1c, //scr Rg Bg
+	0xff, //scr Cb Yr
+	0x1c, //scr Rb Br
+	0xff, //scr Mr Mb
+	0x00, //scr Gr Gb
+	0x00, //scr Mg Mg
+	0xff, //scr Gg Gg
+	0xff, //scr Mb Mr
+	0x00, //scr Gb Gr
+	0xff, //scr Yr Cb
+	0x00, //scr Br Rb
+	0xff, //scr Yg Cg
+	0x00, //scr Bg Rg
+	0x00, //scr Yb Cr
+	0xff, //scr Bb Rr
+	0xff, //scr Wr Wb
+	0x00, //scr Kr Kb
+	0xff, //scr Wg Wg
+	0x00, //scr Kg Kg
+	0xff, //scr Wb Wr
+	0x00, //scr Kb Kr
+	0x00, //curve 1 b
+	0x20, //curve 1 a
+	0x00, //curve 2 b
+	0x20, //curve 2 a
+	0x00, //curve 3 b
+	0x20, //curve 3 a
+	0x00, //curve 4 b
+	0x20, //curve 4 a
+	0x02, //curve 5 b
+	0x1b, //curve 5 a
+	0x02, //curve 6 b
+	0x1b, //curve 6 a
+	0x02, //curve 7 b
+	0x1b, //curve 7 a
+	0x02, //curve 8 b
+	0x1b, //curve 8 a
+	0x09, //curve 9 b
+	0xa6, //curve 9 a
+	0x09, //curve10 b
+	0xa6, //curve10 a
+	0x09, //curve11 b
+	0xa6, //curve11 a
+	0x09, //curve12 b
+	0xa6, //curve12 a
+	0x00, //curve13 b
+	0x20, //curve13 a
+	0x00, //curve14 b
+	0x20, //curve14 a
+	0x00, //curve15 b
+	0x20, //curve15 a
+	0x00, //curve16 b
+	0x20, //curve16 a
+	0x00, //curve17 b
+	0x20, //curve17 a
+	0x00, //curve18 b
+	0x20, //curve18 a
+	0x00, //curve19 b
+	0x20, //curve19 a
+	0x00, //curve20 b
+	0x20, //curve20 a
+	0x00, //curve21 b
+	0x20, //curve21 a
+	0x00, //curve22 b
+	0x20, //curve22 a
+	0x00, //curve23 b
+	0x20, //curve23 a
+	0x00, //curve24 b
+	0xFF, //curve24 a
+	0x01, //cs gain
+	0x40,
+	//end
+};
+
+char *blind_tune_value[ACCESSIBILITY_MAX][2] = {
+		/*
+			ACCESSIBILITY_OFF,
+			NEGATIVE,
+			COLOR_BLIND,
+			SCREEN_CURTAIN,
+		*/
+		{NULL, NULL},
+		{NEGATIVE_1, NEGATIVE_2},
+		{COLOR_BLIND_1, COLOR_BLIND_2},
+		{SCREEN_CURTAIN_1, SCREEN_CURTAIN_2},
+		{GRAYSCALE_1, GRAYSCALE_2},
+		{GRAYSCALE_NEGATIVE_1, GRAYSCALE_NEGATIVE_2}
+};
+
+char *mdnie_tune_value[MAX_mDNIe_MODE][MAX_BACKGROUND_MODE][MAX_OUTDOOR_MODE][2] = {
+		/*
+			DYNAMIC_MODE (outdoor off/on)
+			STANDARD_MODE (outdoor off/on)
+			NATURAL_MODE (outdoor off/on)
+			MOVIE_MODE (outdoor off/on)
+			AUTO_MODE (outdoor off/on)
+		*/
+		// UI_APP
+		{
+			{{DYNAMIC_UI_1, DYNAMIC_UI_2}, {NULL, NULL}},
+			{{STANDARD_UI_1, STANDARD_UI_2}, {NULL, NULL}},
+			{{NATURAL_UI_1, NATURAL_UI_2}, {NULL, NULL}},
+			{{MOVIE_UI_1, MOVIE_UI_2}, {NULL, NULL}},
+			{{AUTO_UI_1, AUTO_UI_2}, {NULL, NULL}},
+		},
+		// VIDEO_APP
+		{
+			{{DYNAMIC_VIDEO_1, DYNAMIC_VIDEO_2}, {NULL, NULL}},
+			{{STANDARD_VIDEO_1, STANDARD_VIDEO_2}, {NULL, NULL}},
+			{{NATURAL_VIDEO_1, NATURAL_VIDEO_2}, {NULL, NULL}},
+			{{MOVIE_VIDEO_1, MOVIE_VIDEO_2}, {NULL, NULL}},
+			{{AUTO_VIDEO_1, AUTO_VIDEO_2}, {NULL, NULL}},
+		},
+		// VIDEO_WARM_APP
+		{
+			{{NULL, NULL}, {NULL, NULL}},
+			{{NULL, NULL}, {NULL, NULL}},
+			{{NULL, NULL}, {NULL, NULL}},
+			{{NULL, NULL}, {NULL, NULL}},
+			{{NULL, NULL}, {NULL, NULL}},
+		},
+		// VIDEO_COLD_APP
+		{
+			{{NULL, NULL}, {NULL, NULL}},
+			{{NULL, NULL}, {NULL, NULL}},
+			{{NULL, NULL}, {NULL, NULL}},
+			{{NULL, NULL}, {NULL, NULL}},
+			{{NULL, NULL}, {NULL, NULL}},
+
+		},
+		// CAMERA_APP
+		{
+			{{CAMERA_1, CAMERA_2}, {NULL, NULL}},
+			{{CAMERA_1, CAMERA_2}, {NULL, NULL}},
+			{{CAMERA_1, CAMERA_2}, {NULL, NULL}},
+			{{CAMERA_1, CAMERA_2}, {NULL, NULL}},
+			{{AUTO_CAMERA_1, AUTO_CAMERA_2}, {NULL, NULL}},
+		},
+		// NAVI_APP
+		{
+			{{NULL, NULL}, {NULL, NULL}},
+			{{NULL, NULL}, {NULL, NULL}},
+			{{NULL, NULL}, {NULL, NULL}},
+			{{NULL, NULL}, {NULL, NULL}},
+			{{NULL, NULL}, {NULL, NULL}},
+		},
+		// GALLERY_APP
+		{
+			{{DYNAMIC_GALLERY_1, DYNAMIC_GALLERY_2}, {NULL,NULL}},
+			{{STANDARD_GALLERY_1, STANDARD_GALLERY_2}, {NULL,NULL}},
+			{{NATURAL_GALLERY_1, NATURAL_GALLERY_2}, {NULL,NULL}},
+			{{MOVIE_GALLERY_1, MOVIE_GALLERY_2}, {NULL,NULL}},
+			{{AUTO_GALLERY_1, AUTO_GALLERY_2}, {NULL,NULL}},
+		},
+		// VT_APP
+		{
+			{{DYNAMIC_VT_1, DYNAMIC_VT_2}, {NULL, NULL}},
+			{{STANDARD_VT_1, STANDARD_VT_2}, {NULL, NULL}},
+			{{NATURAL_VT_1, NATURAL_VT_2}, {NULL, NULL}},
+			{{MOVIE_VT_1, MOVIE_VT_2}, {NULL, NULL}},
+			{{AUTO_VT_1, AUTO_VT_2}, {NULL, NULL}},
+		},
+		// BROWSER_APP
+		{
+			{{DYNAMIC_BROWSER_1, DYNAMIC_BROWSER_2}, {NULL, NULL}},
+			{{STANDARD_BROWSER_1, STANDARD_BROWSER_2}, {NULL, NULL}},
+			{{NATURAL_BROWSER_1, NATURAL_BROWSER_2}, {NULL, NULL}},
+			{{MOVIE_BROWSER_1, MOVIE_BROWSER_2}, {NULL, NULL}},
+			{{AUTO_BROWSER_1, AUTO_BROWSER_2}, {NULL, NULL}},
+		},
+		// eBOOK_APP
+		{
+			{{DYNAMIC_EBOOK_1, DYNAMIC_EBOOK_2}, {NULL, NULL}},
+			{{STANDARD_EBOOK_1, STANDARD_EBOOK_2}, {NULL, NULL}},
+			{{NATURAL_EBOOK_1, NATURAL_EBOOK_2}, {NULL, NULL}},
+			{{MOVIE_EBOOK_1, MOVIE_EBOOK_2}, {NULL, NULL}},
+			{{AUTO_EBOOK_1, AUTO_EBOOK_2}, {NULL, NULL}},
+		},
+		// EMAIL_APP
+		{
+			{{AUTO_EMAIL_1, AUTO_EMAIL_2}, {NULL, NULL}},
+			{{AUTO_EMAIL_1, AUTO_EMAIL_2}, {NULL, NULL}},
+			{{AUTO_EMAIL_1, AUTO_EMAIL_2}, {NULL, NULL}},
+			{{AUTO_EMAIL_1, AUTO_EMAIL_2}, {NULL, NULL}},
+			{{AUTO_EMAIL_1, AUTO_EMAIL_2}, {NULL, NULL}},
+		},
+};
+
+#endif
diff -Nur a/drivers/video/msm/mdss/mdnie_lite_tuning_data_slte_hd_ea8064g.h b/drivers/video/msm/mdss/mdnie_lite_tuning_data_slte_hd_ea8064g.h
--- a/drivers/video/msm/mdss/mdnie_lite_tuning_data_slte_hd_ea8064g.h	2016-01-10 16:25:37.420141000 -0500
+++ b/drivers/video/msm/mdss/mdnie_lite_tuning_data_slte_hd_ea8064g.h	2015-12-01 05:57:13.000000000 -0500
@@ -19,10 +19,332 @@
 #ifndef _MDNIE_LITE_TUNING_DATA_S_HD_
 #define _MDNIE_LITE_TUNING_DATA_S_HD_
 
+/* 2014.07.28 */
+
 #define ADDRESS_SCR_WHITE_RED   0x7A
 #define ADDRESS_SCR_WHITE_GREEN 0x7C
 #define ADDRESS_SCR_WHITE_BLUE  0x7E
 
+char GRAYSCALE_1[] = {
+	//start
+	0xEB,
+	0x01, //mdnie_en
+	0x00, //data_width mask 00 0000
+	0x03, //ascr_roi 1 ascr 00 1 0
+	0x02, //algo_roi 1 algo lce_roi 1 lce 00 1 0 00 1 0
+	0x00, //roi_ctrl 00
+	0x00, //roi0_x_start 12
+	0x00,
+	0x00, //roi0_x_end
+	0x00,
+	0x00, //roi0_y_start
+	0x00,
+	0x00, //roi0_y_end
+	0x00,
+	0x00, //roi1_x_strat
+	0x00,
+	0x00, //roi1_x_end
+	0x00,
+	0x00, //roi1_y_start
+	0x00,
+	0x00, //roi1_y_end
+	0x00,
+
+};
+
+char GRAYSCALE_2[] = {
+	0xEC,
+	0x18, //lce_gain 00 0000
+	0x24, //lce_color_gain 00 0000
+	0x10, //lce_scene_change_on scene_trans 0 0000
+	0x14, //lce_min_diff
+	0xb3, //lce_illum_gain
+	0x01, //lce_ref_offset 9
+	0x0e,
+	0x01, //lce_ref_gain 9
+	0x00,
+	0x66, //lce_block_size h v 0000 0000
+	0xfa, //lce_bright_th
+	0x2d, //lce_bin_size_ratio
+	0x03, //lce_dark_th 000
+	0x96, //lce_min_ref_offset
+	0x00, //nr sharp cs gamma 0000
+	0xff, //nr_mask_th
+	0x00, //sharpen_weight 10
+	0x40,
+	0x00, //sharpen_maxplus 11
+	0xa0,
+	0x00, //sharpen_maxminus 11
+	0xa0,
+	0x01, //cs_gain 10
+	0x00,
+	0x00, //curve_1_b
+	0x20, //curve_1_a
+	0x00, //curve_2_b
+	0x20, //curve_2_a
+	0x00, //curve_3_b
+	0x20, //curve_3_a
+	0x00, //curve_4_b
+	0x20, //curve_4_a
+	0x02, //curve_5_b
+	0x1b, //curve_5_a
+	0x02, //curve_6_b
+	0x1b, //curve_6_a
+	0x02, //curve_7_b
+	0x1b, //curve_7_a
+	0x02, //curve_8_b
+	0x1b, //curve_8_a
+	0x09, //curve_9_b
+	0xa6, //curve_9_a
+	0x09, //curve10_b
+	0xa6, //curve10_a
+	0x09, //curve11_b
+	0xa6, //curve11_a
+	0x09, //curve12_b
+	0xa6, //curve12_a
+	0x00, //curve13_b
+	0x20, //curve13_a
+	0x00, //curve14_b
+	0x20, //curve14_a
+	0x00, //curve15_b
+	0x20, //curve15_a
+	0x00, //curve16_b
+	0x20, //curve16_a
+	0x00, //curve17_b
+	0x20, //curve17_a
+	0x00, //curve18_b
+	0x20, //curve18_a
+	0x00, //curve19_b
+	0x20, //curve19_a
+	0x00, //curve20_b
+	0x20, //curve20_a
+	0x00, //curve21_b
+	0x20, //curve21_a
+	0x00, //curve22_b
+	0x20, //curve22_a
+	0x00, //curve23_b
+	0x20, //curve23_a
+	0x00, //curve24_b
+	0xFF, //curve24_a
+	0x20, //ascr_skin_on strength 0 00000
+	0x67, //ascr_skin_cb
+	0xa9, //ascr_skin_cr
+	0x17, //ascr_dist_up
+	0x29, //ascr_dist_down
+	0x19, //ascr_dist_right
+	0x27, //ascr_dist_left
+	0x00, //ascr_div_up 20
+	0x59,
+	0x0b,
+	0x00, //ascr_div_down
+	0x31,
+	0xf4,
+	0x00, //ascr_div_right
+	0x51,
+	0xec,
+	0x00, //ascr_div_left
+	0x34,
+	0x83,
+	0xff, //ascr_skin_Rr
+	0x00, //ascr_skin_Rg
+	0x00, //ascr_skin_Rb
+	0xff, //ascr_skin_Yr
+	0xff, //ascr_skin_Yg
+	0x00, //ascr_skin_Yb
+	0xff, //ascr_skin_Mr
+	0x00, //ascr_skin_Mg
+	0xff, //ascr_skin_Mb
+	0xff, //ascr_skin_Wr
+	0xff, //ascr_skin_Wg
+	0xff, //ascr_skin_Wb
+	0xb3, //ascr_Cr
+	0x4c, //ascr_Rr
+	0xb3, //ascr_Cg
+	0x4c, //ascr_Rg
+	0xb3, //ascr_Cb
+	0x4c, //ascr_Rb
+	0x69, //ascr_Mr
+	0x96, //ascr_Gr
+	0x69, //ascr_Mg
+	0x96, //ascr_Gg
+	0x69, //ascr_Mb
+	0x96, //ascr_Gb
+	0xe2, //ascr_Yr
+	0x1d, //ascr_Br
+	0xe2, //ascr_Yg
+	0x1d, //ascr_Bg
+	0xe2, //ascr_Yb
+	0x1d, //ascr_Bb
+	0xff, //ascr_Wr
+	0x00, //ascr_Kr
+	0xff, //ascr_Wg
+	0x00, //ascr_Kg
+	0xff, //ascr_Wb
+	0x00, //ascr_Kb
+	//end
+
+};
+
+char GRAYSCALE_NEGATIVE_1[] = {
+	//start
+	0xEB,
+	0x01, //mdnie_en
+	0x00, //data_width mask 00 0000
+	0x03, //ascr_roi 1 ascr 00 1 0
+	0x02, //algo_roi 1 algo lce_roi 1 lce 00 1 0 00 1 0
+	0x00, //roi_ctrl 00
+	0x00, //roi0_x_start 12
+	0x00,
+	0x00, //roi0_x_end
+	0x00,
+	0x00, //roi0_y_start
+	0x00,
+	0x00, //roi0_y_end
+	0x00,
+	0x00, //roi1_x_strat
+	0x00,
+	0x00, //roi1_x_end
+	0x00,
+	0x00, //roi1_y_start
+	0x00,
+	0x00, //roi1_y_end
+	0x00,
+
+};
+
+char GRAYSCALE_NEGATIVE_2[] = {
+	0xEC,
+	0x18, //lce_gain 00 0000
+	0x24, //lce_color_gain 00 0000
+	0x10, //lce_scene_change_on scene_trans 0 0000
+	0x14, //lce_min_diff
+	0xb3, //lce_illum_gain
+	0x01, //lce_ref_offset 9
+	0x0e,
+	0x01, //lce_ref_gain 9
+	0x00,
+	0x66, //lce_block_size h v 0000 0000
+	0xfa, //lce_bright_th
+	0x2d, //lce_bin_size_ratio
+	0x03, //lce_dark_th 000
+	0x96, //lce_min_ref_offset
+	0x00, //nr sharp cs gamma 0000
+	0xff, //nr_mask_th
+	0x00, //sharpen_weight 10
+	0x40,
+	0x00, //sharpen_maxplus 11
+	0xa0,
+	0x00, //sharpen_maxminus 11
+	0xa0,
+	0x01, //cs_gain 10
+	0x00,
+	0x00, //curve_1_b
+	0x20, //curve_1_a
+	0x00, //curve_2_b
+	0x20, //curve_2_a
+	0x00, //curve_3_b
+	0x20, //curve_3_a
+	0x00, //curve_4_b
+	0x20, //curve_4_a
+	0x02, //curve_5_b
+	0x1b, //curve_5_a
+	0x02, //curve_6_b
+	0x1b, //curve_6_a
+	0x02, //curve_7_b
+	0x1b, //curve_7_a
+	0x02, //curve_8_b
+	0x1b, //curve_8_a
+	0x09, //curve_9_b
+	0xa6, //curve_9_a
+	0x09, //curve10_b
+	0xa6, //curve10_a
+	0x09, //curve11_b
+	0xa6, //curve11_a
+	0x09, //curve12_b
+	0xa6, //curve12_a
+	0x00, //curve13_b
+	0x20, //curve13_a
+	0x00, //curve14_b
+	0x20, //curve14_a
+	0x00, //curve15_b
+	0x20, //curve15_a
+	0x00, //curve16_b
+	0x20, //curve16_a
+	0x00, //curve17_b
+	0x20, //curve17_a
+	0x00, //curve18_b
+	0x20, //curve18_a
+	0x00, //curve19_b
+	0x20, //curve19_a
+	0x00, //curve20_b
+	0x20, //curve20_a
+	0x00, //curve21_b
+	0x20, //curve21_a
+	0x00, //curve22_b
+	0x20, //curve22_a
+	0x00, //curve23_b
+	0x20, //curve23_a
+	0x00, //curve24_b
+	0xFF, //curve24_a
+	0x20, //ascr_skin_on strength 0 00000
+	0x67, //ascr_skin_cb
+	0xa9, //ascr_skin_cr
+	0x17, //ascr_dist_up
+	0x29, //ascr_dist_down
+	0x19, //ascr_dist_right
+	0x27, //ascr_dist_left
+	0x00, //ascr_div_up 20
+	0x59,
+	0x0b,
+	0x00, //ascr_div_down
+	0x31,
+	0xf4,
+	0x00, //ascr_div_right
+	0x51,
+	0xec,
+	0x00, //ascr_div_left
+	0x34,
+	0x83,
+	0xff, //ascr_skin_Rr
+	0x00, //ascr_skin_Rg
+	0x00, //ascr_skin_Rb
+	0xff, //ascr_skin_Yr
+	0xff, //ascr_skin_Yg
+	0x00, //ascr_skin_Yb
+	0xff, //ascr_skin_Mr
+	0x00, //ascr_skin_Mg
+	0xff, //ascr_skin_Mb
+	0xff, //ascr_skin_Wr
+	0xff, //ascr_skin_Wg
+	0xff, //ascr_skin_Wb
+	0x4c, //ascr_Cr
+	0xb3, //ascr_Rr
+	0x4c, //ascr_Cg
+	0xb3, //ascr_Rg
+	0x4c, //ascr_Cb
+	0xb3, //ascr_Rb
+	0x96, //ascr_Mr
+	0x69, //ascr_Gr
+	0x96, //ascr_Mg
+	0x69, //ascr_Gg
+	0x96, //ascr_Mb
+	0x69, //ascr_Gb
+	0x1d, //ascr_Yr
+	0xe2, //ascr_Br
+	0x1d, //ascr_Yg
+	0xe2, //ascr_Bg
+	0x1d, //ascr_Yb
+	0xe2, //ascr_Bb
+	0x00, //ascr_Wr
+	0xff, //ascr_Kr
+	0x00, //ascr_Wg
+	0xff, //ascr_Kg
+	0x00, //ascr_Wb
+	0xff, //ascr_Kb
+	//end
+
+};
+
 ////////////////// UI /// /////////////////////
 static char SCREEN_CURTAIN_1[] = {
 	//start
@@ -620,8 +942,8 @@
 	0x1c,
 	0xd8,
 	0xff, //ascr_skin_Rr
-	0x62, //ascr_skin_Rg
-	0x6c, //ascr_skin_Rb
+	0x48, //ascr_skin_Rg
+	0x50, //ascr_skin_Rb
 	0xff, //ascr_skin_Yr
 	0xff, //ascr_skin_Yg
 	0x00, //ascr_skin_Yb
@@ -630,7 +952,7 @@
 	0xff, //ascr_skin_Mb
 	0xff, //ascr_skin_Wr
 	0xf4, //ascr_skin_Wg
-	0xff, //ascr_skin_Wb
+	0xf4, //ascr_skin_Wb
 	0x00, //ascr_Cr
 	0xff, //ascr_Rr
 	0xff, //ascr_Cg
@@ -938,8 +1260,8 @@
 	0x1c,
 	0xd8,
 	0xff, //ascr_skin_Rr
-	0x62, //ascr_skin_Rg
-	0x6c, //ascr_skin_Rb
+	0x48, //ascr_skin_Rg
+	0x50, //ascr_skin_Rb
 	0xff, //ascr_skin_Yr
 	0xff, //ascr_skin_Yg
 	0x00, //ascr_skin_Yb
@@ -948,7 +1270,7 @@
 	0xff, //ascr_skin_Mb
 	0xff, //ascr_skin_Wr
 	0xf4, //ascr_skin_Wg
-	0xff, //ascr_skin_Wb
+	0xf4, //ascr_skin_Wb
 	0x00, //ascr_Cr
 	0xff, //ascr_Rr
 	0xff, //ascr_Cg
@@ -1416,8 +1738,8 @@
 	0x1c,
 	0xd8,
 	0xff, //ascr_skin_Rr
-	0x62, //ascr_skin_Rg
-	0x6c, //ascr_skin_Rb
+	0x48, //ascr_skin_Rg
+	0x50, //ascr_skin_Rb
 	0xff, //ascr_skin_Yr
 	0xff, //ascr_skin_Yg
 	0x00, //ascr_skin_Yb
@@ -1426,7 +1748,7 @@
 	0xff, //ascr_skin_Mb
 	0xff, //ascr_skin_Wr
 	0xf4, //ascr_skin_Wg
-	0xff, //ascr_skin_Wb
+	0xf4, //ascr_skin_Wb
 	0x00, //ascr_Cr
 	0xff, //ascr_Rr
 	0xff, //ascr_Cg
@@ -1735,8 +2057,8 @@
 	0x34,
 	0x83,
 	0xff, //ascr_skin_Rr
-	0x5c, //ascr_skin_Rg
-	0x68, //ascr_skin_Rb
+	0x38, //ascr_skin_Rg
+	0x40, //ascr_skin_Rb
 	0xff, //ascr_skin_Yr
 	0xff, //ascr_skin_Yg
 	0x00, //ascr_skin_Yb
@@ -1745,7 +2067,7 @@
 	0xff, //ascr_skin_Mb
 	0xff, //ascr_skin_Wr
 	0xf8, //ascr_skin_Wg
-	0xff, //ascr_skin_Wb
+	0xf8, //ascr_skin_Wb
 	0x00, //ascr_Cr
 	0xff, //ascr_Rr
 	0xff, //ascr_Cg
@@ -2214,8 +2536,8 @@
 	0x1c,
 	0xd8,
 	0xff, //ascr_skin_Rr
-	0x62, //ascr_skin_Rg
-	0x6c, //ascr_skin_Rb
+	0x48, //ascr_skin_Rg
+	0x50, //ascr_skin_Rb
 	0xff, //ascr_skin_Yr
 	0xff, //ascr_skin_Yg
 	0x00, //ascr_skin_Yb
@@ -2224,7 +2546,7 @@
 	0xff, //ascr_skin_Mb
 	0xff, //ascr_skin_Wr
 	0xf4, //ascr_skin_Wg
-	0xff, //ascr_skin_Wb
+	0xf4, //ascr_skin_Wb
 	0x00, //ascr_Cr
 	0xff, //ascr_Rr
 	0xff, //ascr_Cg
@@ -2532,8 +2854,8 @@
 	0x1c,
 	0xd8,
 	0xff, //ascr_skin_Rr
-	0x62, //ascr_skin_Rg
-	0x6c, //ascr_skin_Rb
+	0x48, //ascr_skin_Rg
+	0x50, //ascr_skin_Rb
 	0xff, //ascr_skin_Yr
 	0xff, //ascr_skin_Yg
 	0x00, //ascr_skin_Yb
@@ -2542,7 +2864,7 @@
 	0xff, //ascr_skin_Mb
 	0xff, //ascr_skin_Wr
 	0xf4, //ascr_skin_Wg
-	0xff, //ascr_skin_Wb
+	0xf4, //ascr_skin_Wb
 	0x00, //ascr_Cr
 	0xff, //ascr_Rr
 	0xff, //ascr_Cg
@@ -3011,8 +3333,8 @@
 	0x1c,
 	0xd8,
 	0xff, //ascr_skin_Rr
-	0x62, //ascr_skin_Rg
-	0x6c, //ascr_skin_Rb
+	0x48, //ascr_skin_Rg
+	0x50, //ascr_skin_Rb
 	0xff, //ascr_skin_Yr
 	0xff, //ascr_skin_Yg
 	0x00, //ascr_skin_Yb
@@ -3021,7 +3343,7 @@
 	0xff, //ascr_skin_Mb
 	0xff, //ascr_skin_Wr
 	0xf4, //ascr_skin_Wg
-	0xff, //ascr_skin_Wb
+	0xf4, //ascr_skin_Wb
 	0x00, //ascr_Cr
 	0xff, //ascr_Rr
 	0xff, //ascr_Cg
@@ -3808,8 +4130,8 @@
 	0x34,
 	0x83,
 	0xff, //ascr_skin_Rr
-	0x5c, //ascr_skin_Rg
-	0x68, //ascr_skin_Rb
+	0x38, //ascr_skin_Rg
+	0x40, //ascr_skin_Rb
 	0xff, //ascr_skin_Yr
 	0xff, //ascr_skin_Yg
 	0x00, //ascr_skin_Yb
@@ -3818,7 +4140,7 @@
 	0xff, //ascr_skin_Mb
 	0xff, //ascr_skin_Wr
 	0xf8, //ascr_skin_Wg
-	0xff, //ascr_skin_Wb
+	0xf8, //ascr_skin_Wb
 	0x00, //ascr_Cr
 	0xff, //ascr_Rr
 	0xff, //ascr_Cg
@@ -5561,8 +5883,8 @@
 	0x1c,
 	0xd8,
 	0xff, //ascr_skin_Rr
-	0x62, //ascr_skin_Rg
-	0x6c, //ascr_skin_Rb
+	0x48, //ascr_skin_Rg
+	0x50, //ascr_skin_Rb
 	0xff, //ascr_skin_Yr
 	0xff, //ascr_skin_Yg
 	0x00, //ascr_skin_Yb
@@ -5571,7 +5893,7 @@
 	0xff, //ascr_skin_Mb
 	0xff, //ascr_skin_Wr
 	0xf4, //ascr_skin_Wg
-	0xff, //ascr_skin_Wb
+	0xf4, //ascr_skin_Wb
 	0x00, //ascr_Cr
 	0xff, //ascr_Rr
 	0xff, //ascr_Cg
@@ -5879,8 +6201,8 @@
 	0x34,
 	0x83,
 	0xff, //ascr_skin_Rr
-	0x5c, //ascr_skin_Rg
-	0x68, //ascr_skin_Rb
+	0x38, //ascr_skin_Rg
+	0x40, //ascr_skin_Rb
 	0xff, //ascr_skin_Yr
 	0xff, //ascr_skin_Yg
 	0x00, //ascr_skin_Yb
@@ -5889,7 +6211,7 @@
 	0xff, //ascr_skin_Mb
 	0xff, //ascr_skin_Wr
 	0xf8, //ascr_skin_Wg
-	0xff, //ascr_skin_Wb
+	0xf8, //ascr_skin_Wb
 	0x00, //ascr_Cr
 	0xff, //ascr_Rr
 	0xff, //ascr_Cg
@@ -6040,8 +6362,8 @@
 	0x1c,
 	0xd8,
 	0xff, //ascr_skin_Rr
-	0x62, //ascr_skin_Rg
-	0x6c, //ascr_skin_Rb
+	0x48, //ascr_skin_Rg
+	0x50, //ascr_skin_Rb
 	0xff, //ascr_skin_Yr
 	0xff, //ascr_skin_Yg
 	0x00, //ascr_skin_Yb
@@ -6050,7 +6372,7 @@
 	0xff, //ascr_skin_Mb
 	0xff, //ascr_skin_Wr
 	0xf4, //ascr_skin_Wg
-	0xff, //ascr_skin_Wb
+	0xf4, //ascr_skin_Wb
 	0x00, //ascr_Cr
 	0xff, //ascr_Rr
 	0xff, //ascr_Cg
@@ -7196,7 +7518,7 @@
 	0xEB,
 	0x01, //mdnie_en
 	0x00, //data_width mask 00 0000
-	0x03, //ascr_roi 1 ascr 00 1 0
+	0x00, //ascr_roi 1 ascr 00 1 0
 	0x33, //algo_roi 1 algo lce_roi 1 lce 00 1 0 00 1 0
 	0x00, //roi_ctrl 00
 	0x00, //roi0_x_start 12
@@ -7223,7 +7545,7 @@
 	0x30, //lce_color_gain 00 0000
 	0x00, //lce_scene_change_on scene_trans 0 0000
 	0x14, //lce_min_diff
-	0x90, //lce_illum_gain
+	0x79, //lce_illum_gain
 	0x01, //lce_ref_offset 9
 	0xbf,
 	0x00, //lce_ref_gain 9
@@ -7233,16 +7555,16 @@
 	0x7f, //lce_bin_size_ratio
 	0x00, //lce_dark_th 000
 	0x40, //lce_min_ref_offset
-	0x07, //nr sharp cs gamma 0000
+	0x01, //nr sharp cs gamma 0000
 	0xff, //nr_mask_th
 	0x00, //sharpen_weight 10
-	0x20,
+	0x40,
 	0x00, //sharpen_maxplus 11
 	0xa0,
 	0x00, //sharpen_maxminus 11
 	0xa0,
 	0x01, //cs_gain 10
-	0x40,
+	0x90,
 	0x00, //curve_1_b
 	0x7b, //curve_1_a
 	0x03, //curve_2_b
@@ -7269,38 +7591,38 @@
 	0x28, //curve12_a
 	0x19, //curve13_b
 	0x22, //curve13_a
-	0x70, //curve14_b
-	0xf7, //curve14_a
-	0x70, //curve15_b
-	0xf7, //curve15_a
-	0x70, //curve16_b
-	0xf7, //curve16_a
-	0x70, //curve17_b
-	0xf7, //curve17_a
-	0x66, //curve18_b
-	0x1a, //curve18_a
-	0x76, //curve19_b
-	0x14, //curve19_a
-	0x82, //curve20_b
-	0x11, //curve20_a
-	0x92, //curve21_b
-	0x0e, //curve21_a
-	0x98, //curve22_b
-	0x0d, //curve22_a
-	0x9f, //curve23_b
-	0x0c, //curve23_a
-	0x00, //curve24_b
-	0xff, //curve24_a
-	0x30, //ascr_skin_on strength 0 0 0000
+	0x19, //curve14_b
+	0x22, //curve14_a
+	0x19, //curve15_b
+	0x22, //curve15_a
+	0x19, //curve16_b
+	0x22, //curve16_a
+	0x19, //curve17_b
+	0x22, //curve17_a
+	0x19, //curve18_b
+	0x22, //curve18_a
+	0x23, //curve19_b
+	0x1e, //curve19_a
+	0x2e, //curve20_b
+	0x1b, //curve20_a
+	0x33, //curve21_b
+	0x1a, //curve21_a
+	0x40, //curve22_b
+	0x18, //curve22_a
+	0x48, //curve23_b
+	0x17, //curve23_a
+	0x04, //curve24_b
+	0xFF, //curve24_a
+	0x2f, //ascr_skin_on strength 0 00000
 	0x67, //ascr_skin_cb
 	0xa9, //ascr_skin_cr
-	0x17, //ascr_dist_up
+	0x4e, //ascr_dist_up
 	0x29, //ascr_dist_down
 	0x19, //ascr_dist_right
-	0x27, //ascr_dist_left
+	0x5f, //ascr_dist_left
 	0x00, //ascr_div_up 20
-	0x59,
-	0x0b,
+	0x1a,
+	0x74,
 	0x00, //ascr_div_down
 	0x31,
 	0xf4,
@@ -7308,11 +7630,11 @@
 	0x51,
 	0xec,
 	0x00, //ascr_div_left
-	0x34,
-	0x83,
+	0x15,
+	0x8f,
 	0xff, //ascr_skin_Rr
-	0x50, //ascr_skin_Rg
-	0x60, //ascr_skin_Rb
+	0x20, //ascr_skin_Rg
+	0x20, //ascr_skin_Rb
 	0xff, //ascr_skin_Yr
 	0xff, //ascr_skin_Yg
 	0x00, //ascr_skin_Yb
@@ -7349,6 +7671,163 @@
 	//end
 };
 
+char LOCAL_CE_1_TEXT[] = {
+	//start
+	0xEB,
+	0x01, //mdnie_en
+	0x00, //data_width mask 00 0000
+	0x00, //ascr_roi 1 ascr 00 1 0
+	0x33, //algo_roi 1 algo lce_roi 1 lce 00 1 0 00 1 0
+	0x00, //roi_ctrl 00
+	0x00, //roi0_x_start 12
+	0x00,
+	0x00, //roi0_x_end
+	0x00,
+	0x00, //roi0_y_start
+	0x00,
+	0x00, //roi0_y_end
+	0x00,
+	0x00, //roi1_x_strat
+	0x00,
+	0x00, //roi1_x_end
+	0x00,
+	0x00, //roi1_y_start
+	0x00,
+	0x00, //roi1_y_end
+	0x00,
+};
+
+char LOCAL_CE_2_TEXT[] = {
+	0xEC,
+	0x86, //lce_gain 00 0000
+	0x30, //lce_color_gain 00 0000
+	0x00, //lce_scene_change_on scene_trans 0 0000
+	0x14, //lce_min_diff
+	0x79, //lce_illum_gain
+	0x01, //lce_ref_offset 9
+	0xbf,
+	0x00, //lce_ref_gain 9
+	0xb0,
+	0x77, //lce_block_size h v 0000 0000
+	0xfa, //lce_bright_th
+	0x7f, //lce_bin_size_ratio
+	0x00, //lce_dark_th 000
+	0x40, //lce_min_ref_offset
+	0x01, //nr sharp cs gamma 0000
+	0xff, //nr_mask_th
+	0x00, //sharpen_weight 10
+	0x40,
+	0x00, //sharpen_maxplus 11
+	0xa0,
+	0x00, //sharpen_maxminus 11
+	0xa0,
+	0x01, //cs_gain 10
+	0x90,
+	0x00, //curve_1_b
+	0x7b, //curve_1_a
+	0x03, //curve_2_b
+	0x48, //curve_2_a
+	0x08, //curve_3_b
+	0x32, //curve_3_a
+	0x08, //curve_4_b
+	0x32, //curve_4_a
+	0x08, //curve_5_b
+	0x32, //curve_5_a
+	0x08, //curve_6_b
+	0x32, //curve_6_a
+	0x08, //curve_7_b
+	0x32, //curve_7_a
+	0x10, //curve_8_b
+	0x28, //curve_8_a
+	0x10, //curve_9_b
+	0x28, //curve_9_a
+	0x10, //curve10_b
+	0x28, //curve10_a
+	0x10, //curve11_b
+	0x28, //curve11_a
+	0x10, //curve12_b
+	0x28, //curve12_a
+	0x19, //curve13_b
+	0x22, //curve13_a
+	0x19, //curve14_b
+	0x22, //curve14_a
+	0x19, //curve15_b
+	0x22, //curve15_a
+	0x19, //curve16_b
+	0x22, //curve16_a
+	0x19, //curve17_b
+	0x22, //curve17_a
+	0x19, //curve18_b
+	0x22, //curve18_a
+	0x23, //curve19_b
+	0x1e, //curve19_a
+	0x2e, //curve20_b
+	0x1b, //curve20_a
+	0x33, //curve21_b
+	0x1a, //curve21_a
+	0x40, //curve22_b
+	0x18, //curve22_a
+	0x48, //curve23_b
+	0x17, //curve23_a
+	0x04, //curve24_b
+	0xFF, //curve24_a
+	0x2f, //ascr_skin_on strength 0 00000
+	0x67, //ascr_skin_cb
+	0xa9, //ascr_skin_cr
+	0x4e, //ascr_dist_up
+	0x29, //ascr_dist_down
+	0x19, //ascr_dist_right
+	0x5f, //ascr_dist_left
+	0x00, //ascr_div_up 20
+	0x1a,
+	0x74,
+	0x00, //ascr_div_down
+	0x31,
+	0xf4,
+	0x00, //ascr_div_right
+	0x51,
+	0xec,
+	0x00, //ascr_div_left
+	0x15,
+	0x8f,
+	0xff, //ascr_skin_Rr
+	0x20, //ascr_skin_Rg
+	0x20, //ascr_skin_Rb
+	0xff, //ascr_skin_Yr
+	0xff, //ascr_skin_Yg
+	0x00, //ascr_skin_Yb
+	0xff, //ascr_skin_Mr
+	0x00, //ascr_skin_Mg
+	0xff, //ascr_skin_Mb
+	0xff, //ascr_skin_Wr
+	0xff, //ascr_skin_Wg
+	0xff, //ascr_skin_Wb
+	0x00, //ascr_Cr
+	0xff, //ascr_Rr
+	0xff, //ascr_Cg
+	0x00, //ascr_Rg
+	0xff, //ascr_Cb
+	0x00, //ascr_Rb
+	0xff, //ascr_Mr
+	0x00, //ascr_Gr
+	0x00, //ascr_Mg
+	0xff, //ascr_Gg
+	0xff, //ascr_Mb
+	0x00, //ascr_Gb
+	0xff, //ascr_Yr
+	0x00, //ascr_Br
+	0xff, //ascr_Yg
+	0x00, //ascr_Bg
+	0x00, //ascr_Yb
+	0xff, //ascr_Bb
+	0xff, //ascr_Wr
+	0x00, //ascr_Kr
+	0xff, //ascr_Wg
+	0x00, //ascr_Kg
+	0xff, //ascr_Wb
+	0x00, //ascr_Kb
+	//end
+};
 
 char *blind_tune_value[ACCESSIBILITY_MAX][2] = {
 		/*
@@ -7361,6 +7840,8 @@
 		{NEGATIVE_1, NEGATIVE_2},
 		{COLOR_BLIND_1, COLOR_BLIND_2},
 		{SCREEN_CURTAIN_1, SCREEN_CURTAIN_2},
+		{GRAYSCALE_1, GRAYSCALE_2},
+		{GRAYSCALE_NEGATIVE_1, GRAYSCALE_NEGATIVE_2}
 };
 
 char *mdnie_tune_value[MAX_mDNIe_MODE][MAX_BACKGROUND_MODE][MAX_OUTDOOR_MODE][2] = {
diff -Nur a/drivers/video/msm/mdss/mdnie_lite_tuning.h b/drivers/video/msm/mdss/mdnie_lite_tuning.h
--- a/drivers/video/msm/mdss/mdnie_lite_tuning.h	2016-01-10 16:25:37.417141000 -0500
+++ b/drivers/video/msm/mdss/mdnie_lite_tuning.h	2015-12-01 05:57:12.000000000 -0500
@@ -202,9 +202,16 @@
 #if defined(CONFIG_FB_MSM_MIPI_SAMSUNG_OCTA_CMD_WQHD_PT_PANEL) || \
 	defined(CONFIG_FB_MSM_MIPI_SAMSUNG_OCTA_CMD_FULL_HD_PT_PANEL)|| defined (CONFIG_FB_MSM_MIPI_MAGNA_OCTA_CMD_HD_PT_PANEL) ||\
 	defined(CONFIG_FB_MSM_MDSS_MAGNA_OCTA_VIDEO_720P_PANEL)	|| defined(CONFIG_FB_MSM_MIPI_MAGNA_OCTA_VIDEO_WXGA_PT_DUAL_PANEL) ||\
-	defined(CONFIG_MACH_JS01LTEDCM) || defined(CONFIG_FB_MSM_MIPI_SAMSUNG_OCTA_CMD_WQXGA_S6E3HA1_PT_PANEL)
+	defined(CONFIG_MACH_JS01LTEDCM) || defined(CONFIG_FB_MSM_MIPI_SAMSUNG_OCTA_CMD_WQXGA_S6E3HA1_PT_PANEL) || defined(CONFIG_FB_MSM_MIPI_SAMSUNG_OCTA_VIDEO_FULL_HD_PT_PANEL)
 	SCREEN_CURTAIN,
 #endif
+#if defined(CONFIG_FB_MSM_MIPI_SAMSUNG_OCTA_CMD_WQHD_PT_PANEL) || \
+	defined(CONFIG_FB_MSM_MIPI_SAMSUNG_OCTA_CMD_FULL_HD_PT_PANEL)|| defined (CONFIG_FB_MSM_MIPI_MAGNA_OCTA_CMD_HD_PT_PANEL) ||\
+	defined(CONFIG_FB_MSM_MDSS_MAGNA_OCTA_VIDEO_720P_PANEL)	|| defined(CONFIG_FB_MSM_MIPI_MAGNA_OCTA_VIDEO_WXGA_PT_DUAL_PANEL) ||\
+	defined(CONFIG_FB_MSM_MIPI_SAMSUNG_OCTA_CMD_WQXGA_S6E3HA1_PT_PANEL)
+	GRAYSCALE,
+	GRAYSCALE_NEGATIVE,
+#endif
 #endif /* NEGATIVE_COLOR_USE_ACCESSIBILLITY */
 	ACCESSIBILITY_MAX,
 };
diff -Nur a/drivers/video/msm/mdss/mdnie_tft_msm8x26.c b/drivers/video/msm/mdss/mdnie_tft_msm8x26.c
--- a/drivers/video/msm/mdss/mdnie_tft_msm8x26.c	2016-01-10 16:25:37.421141000 -0500
+++ b/drivers/video/msm/mdss/mdnie_tft_msm8x26.c	2015-12-01 05:57:13.000000000 -0500
@@ -1144,7 +1144,7 @@
 	int rc;
 	unsigned char cabc;
 	cabc = mdss_dsi_show_cabc();
-	rc = snprintf((char *)buf, sizeof(buf), "%d\n",cabc);
+	rc = snprintf((char *)buf, 1024, "%d\n",cabc);
 	pr_info("%s :[MIPI2LVDS] CABC: %d\n", __func__, cabc);
 	return rc;
 
diff -Nur a/drivers/video/msm/mdss/mdp3_ctrl.c b/drivers/video/msm/mdss/mdp3_ctrl.c
--- a/drivers/video/msm/mdss/mdp3_ctrl.c	2016-01-10 16:25:37.421141000 -0500
+++ b/drivers/video/msm/mdss/mdp3_ctrl.c	2015-12-01 05:57:15.000000000 -0500
@@ -1615,8 +1615,9 @@
 	lut_config.lut_sel = mdp3_session->lut_sel;
 	lut_config.lut_position = 0;
 	lut_config.lut_dirty = true;
-	lut.color0_lut = r;
-	lut.color1_lut = g;
+	/* In HW the order is color0 = g, color1 = r and color2 = b*/
+	lut.color0_lut = g;
+	lut.color1_lut = r;
 	lut.color2_lut = b;
 
 	mutex_lock(&mdp3_session->lock);
diff -Nur a/drivers/video/msm/mdss/mdp3_dma.c b/drivers/video/msm/mdss/mdp3_dma.c
--- a/drivers/video/msm/mdss/mdp3_dma.c	2016-01-10 16:25:37.422141000 -0500
+++ b/drivers/video/msm/mdss/mdp3_dma.c	2015-12-01 05:57:13.000000000 -0500
@@ -16,6 +16,7 @@
 #include "mdp3.h"
 #include "mdp3_dma.h"
 #include "mdp3_hwio.h"
+#include "mdss_debug.h"
 
 #define DMA_STOP_POLL_SLEEP_US 1000
 #define DMA_STOP_POLL_TIMEOUT_US 200000
@@ -610,17 +611,20 @@
 	int cb_type = MDP3_DMA_CALLBACK_TYPE_VSYNC;
 	int rc = 0;
 
+	ATRACE_BEGIN(__func__);
 	pr_debug("mdp3_dmap_update\n");
 
 	if (dma->output_config.out_sel == MDP3_DMA_OUTPUT_SEL_DSI_CMD) {
 		cb_type = MDP3_DMA_CALLBACK_TYPE_DMA_DONE;
 		if (intf->active) {
+			ATRACE_BEGIN("mdp3_wait_for_dma_comp");
 			rc = wait_for_completion_timeout(&dma->dma_comp,
 				KOFF_TIMEOUT);
 			if (rc <= 0) {
 				WARN(1, "cmd kickoff timed out (%d)\n", rc);
 				rc = -1;
 			}
+			ATRACE_END("mdp3_wait_for_dma_comp");
 		}
 	}
 	if (dma->update_src_cfg) {
@@ -652,12 +656,15 @@
 	mdp3_dma_callback_enable(dma, cb_type);
 	pr_debug("mdp3_dmap_update wait for vsync_comp in\n");
 	if (dma->output_config.out_sel == MDP3_DMA_OUTPUT_SEL_DSI_VIDEO) {
+		ATRACE_BEGIN("mdp3_wait_for_vsync_comp");
 		rc = wait_for_completion_timeout(&dma->vsync_comp,
 			KOFF_TIMEOUT);
 		if (rc <= 0)
 			rc = -1;
+		ATRACE_END("mdp3_wait_for_vsync_comp");
 	}
 	pr_debug("mdp3_dmap_update wait for vsync_comp out\n");
+	ATRACE_END(__func__);
 	return rc;
 }
 
@@ -763,7 +770,7 @@
 			MDP3_REG_READ(MDP3_REG_DMA_P_HIST_EXTRA_INFO_1);
 
 	spin_lock_irqsave(&dma->histo_lock, flag);
-	init_completion(&dma->histo_comp);
+	INIT_COMPLETION(dma->histo_comp);
 	MDP3_REG_WRITE(MDP3_REG_DMA_P_HIST_START, 1);
 	wmb();
 	dma->histo_state = MDP3_DMA_HISTO_STATE_START;
@@ -781,7 +788,7 @@
 
 	spin_lock_irqsave(&dma->histo_lock, flag);
 
-	init_completion(&dma->histo_comp);
+	INIT_COMPLETION(dma->histo_comp);
 	MDP3_REG_WRITE(MDP3_REG_DMA_P_HIST_START, 1);
 	wmb();
 	dma->histo_state = MDP3_DMA_HISTO_STATE_START;
@@ -800,7 +807,7 @@
 
 	spin_lock_irqsave(&dma->histo_lock, flag);
 
-	init_completion(&dma->histo_comp);
+	INIT_COMPLETION(dma->histo_comp);
 
 	mdp3_dma_clk_auto_gating(dma, 0);
 
diff -Nur a/drivers/video/msm/mdss/mdp3_ppp.c b/drivers/video/msm/mdss/mdp3_ppp.c
--- a/drivers/video/msm/mdss/mdp3_ppp.c	2016-01-10 16:25:37.422141000 -0500
+++ b/drivers/video/msm/mdss/mdp3_ppp.c	2015-12-01 05:57:13.000000000 -0500
@@ -29,6 +29,7 @@
 #include "mdp3_ppp.h"
 #include "mdp3_hwio.h"
 #include "mdp3.h"
+#include "mdss_debug.h"
 
 #define MDP_IS_IMGTYPE_BAD(x) ((x) >= MDP_IMGTYPE_LIMIT)
 #define MDP_RELEASE_BW_TIMEOUT 50
@@ -332,7 +333,9 @@
 	init_completion(&ppp_stat->ppp_comp);
 	mdp3_irq_enable(MDP3_PPP_DONE);
 	ppp_enable();
+	ATRACE_BEGIN("mdp3_wait_for_ppp_comp");
 	mdp3_ppp_pipe_wait();
+	ATRACE_END("mdp3_wait_for_ppp_comp");
 	mdp3_irq_disable(MDP3_PPP_DONE);
 }
 
@@ -893,6 +896,7 @@
 void mdp3_ppp_wait_for_fence(struct blit_req_list *req)
 {
 	int i, ret = 0;
+	ATRACE_BEGIN(__func__);
 	/* buf sync */
 	for (i = 0; i < req->acq_fen_cnt; i++) {
 		ret = sync_fence_wait(req->acq_fen[i],
@@ -904,7 +908,7 @@
 		}
 		sync_fence_put(req->acq_fen[i]);
 	}
-
+	ATRACE_END(__func__);
 	if (ret < 0) {
 		while (i < req->acq_fen_cnt) {
 			sync_fence_put(req->acq_fen[i]);
@@ -1062,6 +1066,7 @@
 	}
 	while (req) {
 		mdp3_ppp_wait_for_fence(req);
+		ATRACE_BEGIN("mdp3_ppp_start");
 		for (i = 0; i < req->count; i++) {
 			if (!(req->req_list[i].flags & MDP_NO_BLIT)) {
 				/* Do the actual blit. */
@@ -1077,6 +1082,7 @@
 					MDP3_CLIENT_PPP);
 			}
 		}
+		ATRACE_END("mdp3_ppp_start");
 		/* Signal to release fence */
 		mutex_lock(&ppp_stat->req_mutex);
 		mdp3_ppp_signal_timeline(req);
diff -Nur a/drivers/video/msm/mdss/mdp3_ppp_hwio.c b/drivers/video/msm/mdss/mdp3_ppp_hwio.c
--- a/drivers/video/msm/mdss/mdp3_ppp_hwio.c	2016-01-10 16:25:37.422141000 -0500
+++ b/drivers/video/msm/mdss/mdp3_ppp_hwio.c	2015-12-01 05:57:13.000000000 -0500
@@ -953,7 +953,7 @@
 			PPP_WRITEL(phase_step_y, MDP3_PPP_SCALE_PHASEY_STEP);
 
 
-			if (dstW > src->roi.width || dstW > src->roi.height)
+			if (dstW > src->roi.width || dstH > src->roi.height)
 				ppp_load_up_lut();
 
 			if (mdp_blur)
diff -Nur a/drivers/video/msm/mdss/mdss_cpt_qHD_dsi_panel.c b/drivers/video/msm/mdss/mdss_cpt_qHD_dsi_panel.c
--- a/drivers/video/msm/mdss/mdss_cpt_qHD_dsi_panel.c	2016-01-10 16:25:37.423141000 -0500
+++ b/drivers/video/msm/mdss/mdss_cpt_qHD_dsi_panel.c	2015-12-01 05:57:13.000000000 -0500
@@ -927,7 +927,6 @@
 	int rc, i, len;
 	const char *data;
 	static const char *pdest;
-	static const char *on_cmds_state, *off_cmds_state;
 	struct mdss_panel_info *pinfo = &(ctrl_pdata->panel_data.panel_info);
 	rc = of_property_read_u32(np, "qcom,mdss-dsi-panel-width", &tmp);
 	if (rc) {
@@ -1217,29 +1216,6 @@
 	mdss_dsi_parse_dcs_cmds(np, &ctrl_pdata->off_cmds,
 		"qcom,mdss-dsi-off-command", "qcom,mdss-dsi-off-command-state");
 
-	on_cmds_state = of_get_property(np,
-				"qcom,mdss-dsi-on-command-state", NULL);
-	if (!strncmp(on_cmds_state, "dsi_lp_mode", 11)) {
-		ctrl_pdata->dsi_on_state = DSI_LP_MODE;
-	} else if (!strncmp(on_cmds_state, "dsi_hs_mode", 11)) {
-		ctrl_pdata->dsi_on_state = DSI_HS_MODE;
-	} else {
-		pr_debug("%s: ON cmds state not specified. Set Default\n",
-							__func__);
-		ctrl_pdata->dsi_on_state = DSI_LP_MODE;
-	}
-
-	off_cmds_state = of_get_property(np, "qcom,mdss-dsi-off-command-state", NULL);
-	if (!strncmp(off_cmds_state, "dsi_lp_mode", 11)) {
-		ctrl_pdata->dsi_off_state = DSI_LP_MODE;
-	} else if (!strncmp(off_cmds_state, "dsi_hs_mode", 11)) {
-		ctrl_pdata->dsi_off_state = DSI_HS_MODE;
-	} else {
-		pr_debug("%s: ON cmds state not specified. Set Default\n",
-							__func__);
-		ctrl_pdata->dsi_off_state = DSI_LP_MODE;
-	}
-
 	return 0;
 error:
 	return -EINVAL;
diff -Nur a/drivers/video/msm/mdss/mdss_dsi.c b/drivers/video/msm/mdss/mdss_dsi.c
--- a/drivers/video/msm/mdss/mdss_dsi.c	2016-01-10 16:25:37.423141000 -0500
+++ b/drivers/video/msm/mdss/mdss_dsi.c	2015-12-01 05:57:15.000000000 -0500
@@ -62,7 +62,9 @@
 #if defined (CONFIG_FB_MSM_MDSS_DSI_DBG)
 void xlog(const char *name, u32 data0, u32 data1, u32 data2, u32 data3, u32 data4, u32 data5);
 #endif
+#if !defined(CONFIG_FB_MSM_MIPI_JDI_TFT_VIDEO_FULL_HD_PT_PANEL)
 extern int mdss_panel_get_dst_fmt(u32 bpp, char mipi_mode, u32 pixel_packing,char *dst_format);
+#endif
 
 static int mdss_dsi_regulator_init(struct platform_device *pdev)
 {
@@ -675,6 +677,7 @@
 			pr_err("%s: unable to config tlmm = %d\n",
 				__func__, ctrl_pdata->disp_te_gpio);
 			gpio_free(ctrl_pdata->disp_te_gpio);
+			mutex_unlock(&ctrl_pdata->mutex);
 			return -ENODEV;
 		}
 	}
@@ -956,7 +959,7 @@
 error:
 	return ret;
 }
-
+#if !defined(CONFIG_FB_MSM_MIPI_JDI_TFT_VIDEO_FULL_HD_PT_PANEL)
 static int mdss_dsi_update_panel_config(struct mdss_dsi_ctrl_pdata *ctrl_pdata,
 				int mode)
 {
@@ -976,12 +979,13 @@
 	}
 
 	ctrl_pdata->panel_mode = pinfo->mipi.mode;
-	mdss_panel_get_dst_fmt(pinfo->bpp, pinfo->mipi.mode,
+	mdss_panel_dt_get_dst_fmt(pinfo->bpp, pinfo->mipi.mode,
 			pinfo->mipi.pixel_packing, &(pinfo->mipi.dst_format));
 	pinfo->cont_splash_enabled = 0;
 
 	return ret;
 }
+#endif
 static int mdss_dsi_ulps_config(struct mdss_dsi_ctrl_pdata *ctrl,
 	int enable)
 {
@@ -1102,6 +1106,11 @@
 
 	mdss_dsi_phy_sw_reset((ctrl_pdata->ctrl_base));
 	mdss_dsi_phy_init(pdata);
+
+#if defined(CONFIG_FB_MSM_MDSS_SDC_WXGA_PANEL)
+	MIPI_OUTP((ctrl_pdata->ctrl_base) + 0xac, 0);
+#endif
+
 	mdss_dsi_clk_ctrl(ctrl_pdata, DSI_BUS_CLKS, 0);
 
 	mdss_dsi_clk_ctrl(ctrl_pdata, DSI_ALL_CLKS, 1);
@@ -1127,7 +1136,8 @@
 	msleep(20);
 #endif
 	/* LP11 */
-
+	if(mipi->samsung_power_on_reset_delay)
+		usleep(mipi->samsung_power_on_reset_delay);
 	ctrl_pdata->panel_reset(pdata, 1);
 
 	MIPI_OUTP((ctrl_pdata->ctrl_base) + 0xac, tmp);
@@ -1144,6 +1154,8 @@
 	if (pdata->panel_info.type == MIPI_CMD_PANEL)
 		mdss_dsi_clk_ctrl(ctrl_pdata, DSI_ALL_CLKS, 0);
 #else
+	if(mipi->samsung_power_on_reset_delay)
+		usleep(mipi->samsung_power_on_reset_delay);
 	ctrl_pdata->panel_reset(pdata, 1);
 #endif
 
@@ -1238,7 +1250,8 @@
 			return ret;
 		}
         }
-#if !defined(FB_MSM_MIPI_SAMSUNG_OCTA_VIDEO_HD_PANEL)
+#if !defined(CONFIG_FB_MSM_MIPI_SAMSUNG_OCTA_VIDEO_HD_PANEL) && \
+	! defined(CONFIG_FB_MSM_MDSS_MAGNA_OCTA_VIDEO_720P_PANEL)
 	if (pdata->panel_info.type == MIPI_VIDEO_PANEL &&
 			ctrl_pdata->off_cmds.link_state == DSI_LP_MODE) {
 		mdss_dsi_sw_reset(pdata);
@@ -1466,24 +1479,24 @@
 	switch (event) {
 	case MDSS_EVENT_UNBLANK:
 		rc = mdss_dsi_on(pdata);
-        	mdss_dsi_op_mode_config(pdata->panel_info.mipi.mode,pdata);
-		if (ctrl_pdata->dsi_on_state == DSI_LP_MODE)
+		mdss_dsi_op_mode_config(pdata->panel_info.mipi.mode,
+							pdata);
+		if (ctrl_pdata->on_cmds.link_state == DSI_LP_MODE)
 			rc = mdss_dsi_unblank(pdata);
 		break;
 	case MDSS_EVENT_PANEL_ON:
 		ctrl_pdata->ctrl_state |= CTRL_STATE_MDP_ACTIVE;
 		ctrl_pdata->mdp_tg_on = 1;
-		if (ctrl_pdata->dsi_on_state == DSI_HS_MODE)
+		if (ctrl_pdata->on_cmds.link_state == DSI_HS_MODE)
 			rc = mdss_dsi_unblank(pdata);
 		break;
 	case MDSS_EVENT_BLANK:
-		if (ctrl_pdata->dsi_off_state == DSI_HS_MODE)
+		if (ctrl_pdata->off_cmds.link_state == DSI_HS_MODE)
 			rc = mdss_dsi_blank(pdata);
 		break;
 	case MDSS_EVENT_PANEL_OFF:
 		ctrl_pdata->ctrl_state &= ~CTRL_STATE_MDP_ACTIVE;
-//		ctrl_pdata->mdp_tg_on = 0;         /* Its not required here suggested by QCom */
-		if (ctrl_pdata->dsi_off_state == DSI_LP_MODE)
+		if (ctrl_pdata->off_cmds.link_state == DSI_LP_MODE)
 			rc = mdss_dsi_blank(pdata);
 		rc = mdss_dsi_off(pdata);
 		break;
@@ -1514,12 +1527,12 @@
 	case MDSS_EVENT_CONT_SPLASH_FINISH:
 
 #if defined(CONFIG_FB_MSM_MIPI_MAGNA_OCTA_CMD_HD_PT_PANEL)
-		if (ctrl_pdata->dsi_off_state == DSI_HS_MODE){
+		if (ctrl_pdata->off_cmds.link_state == DSI_HS_MODE){
 			ctrl_pdata->ctrl_state |= CTRL_STATE_PANEL_INIT;
                         rc = mdss_dsi_blank(pdata);
 		}
 #else
-		if (ctrl_pdata->dsi_off_state == DSI_LP_MODE)
+		if (ctrl_pdata->off_cmds.link_state == DSI_LP_MODE)
                     rc = mdss_dsi_blank(pdata);
 #endif
 		ctrl_pdata->ctrl_state &= ~CTRL_STATE_MDP_ACTIVE;
@@ -1572,7 +1585,7 @@
 		&& !defined(CONFIG_FB_MSM_MDSS_MAGNA_OCTA_VIDEO_720P_PANEL)
 		ctrl_pdata->mdp_tg_on = 1;
 	/*Event is send only if cont_splash feature is enabled */
-		if (ctrl_pdata->dsi_off_state == DSI_HS_MODE) {
+		if (ctrl_pdata->off_cmds.link_state == DSI_HS_MODE) {
 			/* Panel is Enabled in Bootloader */
 			ctrl_pdata->ctrl_state |= CTRL_STATE_PANEL_INIT;
 			rc = mdss_dsi_blank(pdata);
@@ -1590,10 +1603,12 @@
 		rc = mdss_dsi_register_recovery_handler(ctrl_pdata,
 			(struct mdss_panel_recovery *)arg);
 		break;
+#if !defined(CONFIG_FB_MSM_MIPI_JDI_TFT_VIDEO_FULL_HD_PT_PANEL)
 	case MDSS_EVENT_DSI_DYNAMIC_SWITCH:
 		rc = mdss_dsi_update_panel_config(ctrl_pdata,
 					(int)(unsigned long) arg);
 		break;
+#endif
 	default:
 		if(ctrl_pdata->event_handler)
 			rc = ctrl_pdata->event_handler(event);
@@ -1654,64 +1669,8 @@
 static struct device_node *mdss_dsi_find_panel_of_node(
 		struct platform_device *pdev, char *panel_cfg)
 {
-	int len, i;
-	int ctrl_id = pdev->id - 1;
-	char panel_name[MDSS_MAX_PANEL_LEN];
-	char ctrl_id_stream[3] =  "0:";
-	char *stream = NULL, *pan = NULL;
-	struct device_node *dsi_pan_node = NULL, *mdss_node = NULL;
-
-	len = strlen(panel_cfg);
-#if defined(CONFIG_MACH_KS01EUR)
-	if (1) {
-#else
-	if(0){
-#endif
-		/* no panel cfg chg, parse dt */
-		pr_debug("%s:%d: no cmd line cfg present\n",
-			 __func__, __LINE__);
-		goto end;
-	} else {
-		if (ctrl_id == 1)
-			strlcpy(ctrl_id_stream, "1:", 3);
-
-		stream = strnstr(panel_cfg, ctrl_id_stream, len);
-		if (!stream) {
-			pr_err("controller config is not present\n");
-			goto end;
-		}
-		stream += 2;
-
-		pan = strnchr(stream, strlen(stream), ':');
-		if (!pan) {
-			strlcpy(panel_name, stream, MDSS_MAX_PANEL_LEN);
-		} else {
-			for (i = 0; (stream + i) < pan; i++)
-				panel_name[i] = *(stream + i);
-			panel_name[i] = 0;
-		}
-
-		pr_debug("%s:%d:%s:%s\n", __func__, __LINE__,
-			 panel_cfg, panel_name);
-
-		mdss_node = of_parse_phandle(pdev->dev.of_node,
-					     "qcom,mdss-mdp", 0);
+	struct device_node *dsi_pan_node = NULL;
 
-		if (!mdss_node) {
-			pr_err("%s: %d: mdss_node null\n",
-			       __func__, __LINE__);
-			return NULL;
-		}
-		dsi_pan_node = of_find_node_by_name(mdss_node,
-						    panel_name);
-		if (!dsi_pan_node) {
-			pr_err("%s: invalid pan node, selecting prim panel\n",
-			       __func__);
-			goto end;
-		}
-		return dsi_pan_node;
-	}
-end:
 	dsi_pan_node = mdss_dsi_pref_prim_panel(pdev);
 
 	return dsi_pan_node;
@@ -1740,7 +1699,8 @@
 	}
 #if !defined(CONFIG_FB_MSM8x26_MDSS_CHECK_LCD_CONNECTION) && \
 	!defined(CONFIG_FB_MSM_MIPI_SAMSUNG_TFT_VIDEO_WQXGA_PT_PANEL) && \
-	!defined(CONFIG_FB_MSM_MIPI_MAGNA_OCTA_VIDEO_WXGA_PT_DUAL_PANEL)
+	!defined(CONFIG_FB_MSM_MIPI_MAGNA_OCTA_VIDEO_WXGA_PT_DUAL_PANEL) && \
+	!defined(CONFIG_FB_MSM_MIPI_SAMSUNG_OCTA_CMD_WQHD_PT_PANEL)
 	if (get_lcd_attached() == 0) {
 		pr_err("%s : lcd is not attached..\n",__func__);
 		return -ENODEV;
@@ -2161,18 +2121,13 @@
 	pinfo->panel_max_fps = mdss_panel_get_framerate(pinfo);
 	pinfo->panel_max_vtotal = mdss_panel_get_vtotal(pinfo);
 
-#if !defined(CONFIG_FB_MSM_MIPI_SAMSUNG_OCTA_CMD_FULL_HD_PT_PANEL)
+#if 1
 	ctrl_pdata->disp_en_gpio = of_get_named_gpio(pan_node,
 		"qcom,enable-gpio", 0);
 #else
-#if defined(CONFIG_FB_MSM_MIPI_SAMSUNG_OCTA_CMD_FULL_HD_PT_PANEL)
-	ctrl_pdata->disp_en_gpio = of_get_named_gpio(pan_node,
-		"qcom,platform-enable-gpio", 0);
-#else
 	ctrl_pdata->disp_en_gpio = of_get_named_gpio(ctrl_pdev->dev.of_node,
 		"qcom,platform-enable-gpio", 0);
 #endif
-#endif
 	pr_err("%s:%d, Disp_en_gpio (%d)",__func__, __LINE__,ctrl_pdata->disp_en_gpio );
 
 #if defined(CONFIG_FB_MSM_MIPI_SAMSUNG_TFT_VIDEO_WQXGA_PT_PANEL)
@@ -2631,15 +2586,17 @@
 	if (pinfo->cont_splash_enabled) {
 		pr_info("%s : splash enabled..panel_power_on (1)\n", __func__);
 		pinfo->panel_power_on = 1;
-		rc = mdss_dsi_panel_power_on(&(ctrl_pdata->panel_data), 1);
-		if (rc) {
-			pr_err("%s: Panel power on failed\n", __func__);
-			return rc;
+		if(ctrl_pdata->ndx == DSI_CTRL_0) {
+			rc = mdss_dsi_panel_power_on(&(ctrl_pdata->panel_data), 1);
+			if (rc) {
+				pr_err("%s: Panel power on failed\n", __func__);
+				return rc;
+			}
 		}
 
 		mdss_dsi_clk_ctrl(ctrl_pdata, DSI_ALL_CLKS, 1);
 #if (defined(CONFIG_FB_MSM_MIPI_SAMSUNG_OCTA_VIDEO_FULL_HD_PT_PANEL) || \
-	defined(CONFIG_FB_MSM_MDSS_MAGNA_OCTA_VIDEO_720P_PANEL)) && !defined(CONFIG_MACH_KS01EUR)
+	defined(CONFIG_FB_MSM_MDSS_MAGNA_OCTA_VIDEO_720P_PANEL))
 		ctrl_pdata->ctrl_state |= (CTRL_STATE_PANEL_INIT | CTRL_STATE_MDP_ACTIVE);
 #else
 		ctrl_pdata->ctrl_state |= CTRL_STATE_MDP_ACTIVE;
diff -Nur a/drivers/video/msm/mdss/mdss_dsi_cmd.c b/drivers/video/msm/mdss/mdss_dsi_cmd.c
--- a/drivers/video/msm/mdss/mdss_dsi_cmd.c	2016-01-10 16:25:37.423141000 -0500
+++ b/drivers/video/msm/mdss/mdss_dsi_cmd.c	2015-12-01 05:57:13.000000000 -0500
@@ -1,4 +1,4 @@
-/* Copyright (c) 2012-2013, The Linux Foundation. All rights reserved.
+/* Copyright (c) 2012-2014, The Linux Foundation. All rights reserved.
  *
  * This program is free software; you can redistribute it and/or modify
  * it under the terms of the GNU General Public License version 2 and
@@ -66,6 +66,7 @@
 		off = 8 - off;
 	dp->data += off;
 	dp->len = 0;
+	dp->read_cnt = 0;
 	return dp->data;
 }
 
@@ -121,6 +122,7 @@
 
 	dp->data = dp->start;
 	dp->len = 0;
+	dp->read_cnt = 0;
 	return size;
 #endif
 }
@@ -610,6 +612,7 @@
 	/* strip out dcs type */
 	rp->data++;
 	rp->len = 1;
+	rp->read_cnt -= 3;
 	return rp->len;
 }
 
@@ -621,6 +624,7 @@
 	/* strip out dcs type */
 	rp->data++;
 	rp->len = 2;
+	rp->read_cnt -= 2;
 	return rp->len;
 }
 
@@ -629,6 +633,7 @@
 	/* strip out dcs header */
 	rp->data += 4;
 	rp->len -= 4;
+	rp->read_cnt -= 6;
 	return rp->len;
 }
 
diff -Nur a/drivers/video/msm/mdss/mdss_dsi_cmd.h b/drivers/video/msm/mdss/mdss_dsi_cmd.h
--- a/drivers/video/msm/mdss/mdss_dsi_cmd.h	2016-01-10 16:25:37.424141000 -0500
+++ b/drivers/video/msm/mdss/mdss_dsi_cmd.h	2015-12-01 05:57:13.000000000 -0500
@@ -1,4 +1,4 @@
-/* Copyright (c) 2012-2013, The Linux Foundation. All rights reserved.
+/* Copyright (c) 2012-2014, The Linux Foundation. All rights reserved.
  *
  * This program is free software; you can redistribute it and/or modify
  * it under the terms of the GNU General Public License version 2 and
@@ -30,7 +30,7 @@
 
 #define MDSS_DSI_MRPS	0x04  /* Maximum Return Packet Size */
 
-#define MDSS_DSI_LEN 8 /* 4 x 4 - 6 - 2, bytes dcs header+crc-align  */
+#define MDSS_DSI_LEN 10 /* 4 x 4 - 4 - 2, bytes dcs header+crc-align  */
 
 struct dsi_buf {
 	u32 *hdr;	/* dsi host header */
@@ -40,6 +40,7 @@
 	char *data;	/* buffer */
 	int len;	/* data length */
 	dma_addr_t dmap; /* mapped dma addr */
+	int read_cnt;
 };
 
 /* dcs read/write */
@@ -99,6 +100,7 @@
 #define CMD_CLK_CTRL    0x0004
 #define CMD_REQ_NO_MAX_PKT_SIZE 0x0008
 #define CMD_REQ_LP_MODE 0x0010
+#define CMD_REQ_HS_MODE 0x0020
 
 struct dcs_cmd_req {
 	struct dsi_cmd_desc *cmds;
diff -Nur a/drivers/video/msm/mdss/mdss_dsi.h b/drivers/video/msm/mdss/mdss_dsi.h
--- a/drivers/video/msm/mdss/mdss_dsi.h	2016-01-10 16:25:37.423141000 -0500
+++ b/drivers/video/msm/mdss/mdss_dsi.h	2015-12-01 05:57:15.000000000 -0500
@@ -341,6 +341,7 @@
 	int bklt_max;
 	int new_fps;
 	int pwm_enabled;
+	bool dmap_iommu_map;
 #if defined(CONFIG_CABC_TUNING_HX8394C)
 	int current_cabc_duty;
 #endif
@@ -375,9 +376,6 @@
 	struct dsi_panel_cmds video2cmd;
 	struct dsi_panel_cmds cmd2video;
 
-	int dsi_on_state;
-	int dsi_off_state;
-
 	struct dcs_cmd_list cmdlist;
 	struct completion dma_comp;
 	struct completion mdp_comp;
@@ -498,7 +496,7 @@
 int mdss_dsi_panel_init(struct device_node *node,
 		struct mdss_dsi_ctrl_pdata *ctrl_pdata,
 		bool cmd_cfg_cont_splash);
-int mdss_panel_get_dst_fmt(u32 bpp, char mipi_mode, u32 pixel_packing,
+int mdss_panel_dt_get_dst_fmt(u32 bpp, char mipi_mode, u32 pixel_packing,
 				char *dst_format);
 
 int mdss_dsi_register_recovery_handler(struct mdss_dsi_ctrl_pdata *ctrl,
diff -Nur a/drivers/video/msm/mdss/mdss_dsi_host.c b/drivers/video/msm/mdss/mdss_dsi_host.c
--- a/drivers/video/msm/mdss/mdss_dsi_host.c	2016-01-10 16:25:37.424141000 -0500
+++ b/drivers/video/msm/mdss/mdss_dsi_host.c	2015-12-01 05:57:15.000000000 -0500
@@ -1313,8 +1313,6 @@
 	struct mdss_dsi_ctrl_pdata *mctrl = NULL;
 	struct mdss_panel_data *pdata;
 
-	pdata = &ctrl->panel_data;
-
 #ifdef DEBUG_CMD
 	int i;
 	bp = tp->data;
@@ -1325,6 +1323,8 @@
 
 	pr_info("\n");
 #endif
+
+	pdata = &ctrl->panel_data;
 	bp = tp->data;
 
 	len = ALIGN(tp->len, 4);
@@ -1345,6 +1345,7 @@
 			pr_err("unable to map dma memory to iommu(%d)\n", ret);
 			return -ENOMEM;
 		}
+		ctrl->dmap_iommu_map = true;
 	} else {
 		addr = tp->dmap;
 	}
@@ -1392,9 +1393,11 @@
 	} else
 		ret = tp->len;
 
-	if (is_mdss_iommu_attached())
+	if (ctrl->dmap_iommu_map) {
 		msm_iommu_unmap_contig_buffer(addr,
 			mdss_get_iommu_domain(domain), 0, size);
+		ctrl->dmap_iommu_map = false;
+	}
 
 	return ret;
 }
@@ -1674,6 +1677,10 @@
 		mutex_unlock(&ctrl->cmd_mutex);
 		return rc;
 	}
+
+	if (req->flags & CMD_REQ_HS_MODE)
+		mdss_dsi_set_tx_power_mode(0, &ctrl->panel_data);
+
 	if (req->flags & CMD_REQ_RX)
 			ret = mdss_dsi_cmdlist_rx(ctrl, req);
 #if !defined(CONFIG_MACH_S3VE3G_EUR)
@@ -1682,6 +1689,10 @@
 #endif
 	else
 		ret = mdss_dsi_cmdlist_tx(ctrl, req);
+
+	if (req->flags & CMD_REQ_HS_MODE)
+		mdss_dsi_set_tx_power_mode(1, &ctrl->panel_data);
+
 	mdss_iommu_ctrl(0);
 	mdss_dsi_clk_ctrl(ctrl, DSI_ALL_CLKS, 0);
 	mdss_bus_scale_set_quota(MDSS_HW_DSI0, 0, 0);
diff -Nur a/drivers/video/msm/mdss/mdss_edp.c b/drivers/video/msm/mdss/mdss_edp.c
--- a/drivers/video/msm/mdss/mdss_edp.c	2016-01-10 16:25:37.424141000 -0500
+++ b/drivers/video/msm/mdss/mdss_edp.c	2015-12-01 05:57:13.000000000 -0500
@@ -33,6 +33,8 @@
 #include <mach/dma.h>
 
 #include "mdss.h"
+#include "mdss_panel.h"
+#include "mdss_mdp.h"
 #include "mdss_edp.h"
 #include "mdss_debug.h"
 #include <linux/qpnp/pin.h>
@@ -886,6 +888,8 @@
 
 	pr_info("%s:+, cont_splash=%d\n", __func__, edp_drv->cont_splash);
 
+	mdss_mdp_clk_ctrl(MDP_BLOCK_POWER_ON, false);
+
 #if defined(CONFIG_FB_MSM_EDP_SAMSUNG)
 	mutex_lock(&edp_power_state_chagne);
 	INIT_COMPLETION(edp_power_sync);
@@ -980,7 +984,7 @@
 		pr_err("%s: Invalid input data\n", __func__);
 		return -EINVAL;
 	}
-	pr_debug("%s:+, cont_splash=%d\n", __func__, edp_drv->cont_splash);
+	pr_err("%s:+, cont_splash=%d\n", __func__, edp_drv->cont_splash);
 
 	/* wait until link training is completed */
 	mutex_lock(&edp_drv->train_mutex);
@@ -1014,6 +1018,7 @@
 	mdss_edp_clk_disable(edp_drv);
 	mdss_edp_unprepare_clocks(edp_drv);
 
+	mdss_mdp_clk_ctrl(MDP_BLOCK_POWER_OFF, false);
 	mdss_edp_aux_ctrl(edp_drv, 0);
 
 	mdss_edp_regulator_off(edp_drv);
@@ -1026,8 +1031,9 @@
 	qpnp_pin_config(edp_drv->gpio_panel_en, &LCD_EN_PM_GPIO_SLEEP);
 #endif
 	msleep(100); /* NDRA needs some delay after shutdown power */
-	pr_info("%s:- %s\n", __func__, eeprom_version);
+	pr_err("%s:-- %s\n", __func__, eeprom_version);
 
+	mutex_unlock(&edp_drv->train_mutex);
 	return 0;
 }
 
@@ -1484,7 +1490,7 @@
 	isr1 &= ~mask1;	/* remove masks bit */
 	isr2 &= ~mask2;
 
-	pr_debug("%s: isr=%x mask=%x isr2=%x mask2=%x\n",
+	pr_err("%s: isr=%x mask=%x isr2=%x mask2=%x\n",
 			__func__, isr1, mask1, isr2, mask2);
 
 	ack = isr1 & EDP_INTR_STATUS1;
@@ -1697,6 +1703,10 @@
 
 	pr_info("%s:cont_splash=%d\n", __func__, edp_drv->cont_splash);
 
+	/* need mdss clock to receive irq */
+	if (!edp_drv->cont_splash)
+		mdss_mdp_clk_ctrl(MDP_BLOCK_POWER_ON, false);
+
 	/* only need aux and ahb clock for aux channel */
 	mdss_edp_prepare_aux_clocks(edp_drv);
 	mdss_edp_aux_clk_enable(edp_drv);
@@ -1731,6 +1741,9 @@
 	mdss_edp_aux_clk_disable(edp_drv);
 	mdss_edp_unprepare_aux_clocks(edp_drv);
 
+	if (!edp_drv->cont_splash)
+		mdss_mdp_clk_ctrl(MDP_BLOCK_POWER_OFF, false);
+
 	if (edp_drv->cont_splash) { /* vote for clocks */
 		mdss_edp_regulator_on(edp_drv);
 		mdss_edp_prepare_clocks(edp_drv);
diff -Nur a/drivers/video/msm/mdss/mdss_fb.c b/drivers/video/msm/mdss/mdss_fb.c
--- a/drivers/video/msm/mdss/mdss_fb.c	2016-01-10 16:25:37.425141000 -0500
+++ b/drivers/video/msm/mdss/mdss_fb.c	2015-12-01 05:57:13.000000000 -0500
@@ -2,7 +2,7 @@
  * Core MDSS framebuffer driver.
  *
  * Copyright (C) 2007 Google Incorporated
- * Copyright (c) 2008-2014, The Linux Foundation. All rights reserved.
+ * Copyright (c) 2008-2015, The Linux Foundation. All rights reserved.
  *
  * This software is licensed under the terms of the GNU General Public
  * License version 2, as published by the Free Software Foundation, and
@@ -44,6 +44,7 @@
 #include <linux/file.h>
 #include <linux/memory_alloc.h>
 #include <linux/kthread.h>
+#include <linux/of_address.h>
 
 #include <mach/board.h>
 #include <mach/memory.h>
@@ -74,10 +75,8 @@
 };
 
 #ifdef CONFIG_FB_MSM_CAMERA_CSC
-#if defined(CONFIG_MACH_KS01SKT) || defined(CONFIG_MACH_KS01EUR) || defined(CONFIG_MACH_KS01KTT) || defined(CONFIG_MACH_KS01LGT) || defined(CONFIG_SEC_ATLANTIC_PROJECT)
-u8 prev_csc_update = 1;
-#endif
 u8 csc_update = 1;
+u8 csc_change = 0;
 #endif
 
 #if (defined(CONFIG_MACH_S3VE3G_EUR) || defined(CONFIG_MACH_VICTOR3GDSDTV_LTN)) && defined(CONFIG_ESD_ERR_FG_RECOVERY)
@@ -100,7 +99,10 @@
 static int mdss_fb_suspend_sub(struct msm_fb_data_type *mfd);
 static int mdss_fb_ioctl(struct fb_info *info, unsigned int cmd,
 			 unsigned long arg);
-static int mdss_fb_mmap(struct fb_info *info, struct vm_area_struct *vma);
+static int mdss_fb_fbmem_ion_mmap(struct fb_info *info,
+		struct vm_area_struct *vma);
+static int mdss_fb_alloc_fb_ion_memory(struct msm_fb_data_type *mfd,
+		size_t size);
 static void mdss_fb_release_fences(struct msm_fb_data_type *mfd);
 static int __mdss_fb_sync_buf_done_callback(struct notifier_block *p,
 		unsigned long val, void *data);
@@ -266,7 +268,9 @@
 	if (err)
 	       return ret;
 
-	csc_update = !!(u8)mode;
+	csc_update = (u8)mode;
+	csc_change = 1;
+	pr_info(" csc ctrl set to csc_update(%d)\n", csc_update);
 
 	pr_info("%s: csc ctrl set to %d \n", __func__, mode);
 
@@ -651,6 +655,7 @@
 #else
 	mfd->bl_min_lvl = 0;
 #endif
+        mfd->ad_bl_level = 0;
 	mfd->fb_imgType = MDP_RGBA_8888;
 
 	mfd->pdev = pdev;
@@ -982,13 +987,12 @@
 void mdss_fb_set_backlight(struct msm_fb_data_type *mfd, u32 bkl_lvl)
 {
 	struct mdss_panel_data *pdata;
-	int (*update_ad_input)(struct msm_fb_data_type *mfd);
 	u32 temp = bkl_lvl;
-	int ret = -EINVAL;
-	bool is_bl_changed = (bkl_lvl != mfd->bl_level);
+	bool bl_notify_needed = false;
 
-	if (((!mfd->panel_power_on && mfd->dcm_state != DCM_ENTER)
-		|| !mfd->bl_updated) && !IS_CALIB_MODE_BL(mfd)) {
+	if ((((!mfd->panel_power_on && mfd->dcm_state != DCM_ENTER)
+		|| !mfd->bl_updated) && !IS_CALIB_MODE_BL(mfd)) ||
+		mfd->panel_info->cont_splash_enabled) {
 		mfd->unset_bl_level = bkl_lvl;
 		pr_info("[BL1] bkl_lvl (%d), bl_updated(%d), power(%d)\n",
 			bkl_lvl, mfd->bl_updated, mfd->panel_power_on);
@@ -1002,11 +1006,11 @@
 	pdata = dev_get_platdata(&mfd->pdev->dev);
 
 	if ((pdata) && (pdata->set_backlight)) {
-		if (mfd->mdp.ad_attenuate_bl) {
-			ret = (*mfd->mdp.ad_attenuate_bl)(bkl_lvl, &temp, mfd);
-			if (ret)
-				pr_err("Failed to attenuate BL\n");
-		}
+		if (mfd->mdp.ad_calc_bl)
+			(*mfd->mdp.ad_calc_bl)(mfd, temp, &temp,
+					&bl_notify_needed);
+		if (bl_notify_needed)
+			mdss_fb_bl_update_notify(mfd);
 
 		mfd->bl_level_prev_scaled = mfd->bl_level_scaled;
 		if (!IS_CALIB_MODE_BL(mfd))
@@ -1028,14 +1032,6 @@
 		mfd->bl_level = bkl_lvl;
 		mfd->bl_level_scaled = temp;
 
-		if (mfd->mdp.update_ad_input && is_bl_changed) {
-			update_ad_input = mfd->mdp.update_ad_input;
-			mutex_unlock(&mfd->bl_lock);
-			/* Will trigger ad_setup which will grab bl_lock */
-			update_ad_input(mfd);
-			mutex_lock(&mfd->bl_lock);
-		}
-		mdss_fb_bl_update_notify(mfd);
 	}
 }
 
@@ -1044,8 +1040,8 @@
 void mdss_fb_update_backlight(struct msm_fb_data_type *mfd)
 {
 	struct mdss_panel_data *pdata;
-	int ret = 0;
 	u32 temp;
+	bool bl_notify = false;
 
 	mutex_lock(&mfd->bl_lock);
 	if (mfd->unset_bl_level && !mfd->bl_updated) {
@@ -1057,12 +1053,12 @@
 #endif
 			mfd->bl_level = mfd->unset_bl_level;
 			temp = mfd->bl_level;
-			if (mfd->mdp.ad_attenuate_bl) {
-				ret = (*mfd->mdp.ad_attenuate_bl)(temp,
-					&temp, mfd);
-				if (ret)
-					pr_err("Failed to attenuate BL\n");
-			}
+			if (mfd->mdp.ad_calc_bl)
+				(*mfd->mdp.ad_calc_bl)(mfd, temp, &temp,
+						&bl_notify);
+			if (bl_notify)
+				mdss_fb_bl_update_notify(mfd);
+
 			pr_info("mfd->bl_level (%d), bl_updated (%d)\n",
 				mfd->bl_level, mfd->bl_updated);
 			pdata->set_backlight(pdata, mfd->bl_level);
@@ -1115,7 +1111,7 @@
 		mutex_lock(&mfd->bl_lock);
 		if (!mfd->bl_updated) {
 			mfd->bl_updated = 1;
-			mdss_fb_set_backlight(mfd, mfd->bl_level_prev_scaled);
+			mdss_fb_set_backlight(mfd, mfd->unset_bl_level);
 		}
 		mutex_unlock(&mfd->bl_lock);
 		break;
@@ -1244,12 +1240,229 @@
 #endif
 }
 
+static inline int mdss_fb_create_ion_client(struct msm_fb_data_type *mfd)
+{
+	mfd->fb_ion_client  = msm_ion_client_create(-1 , "mdss_fb_iclient");
+	if (IS_ERR_OR_NULL(mfd->fb_ion_client)) {
+		pr_err("Err:client not created, val %d\n",
+				PTR_RET(mfd->fb_ion_client));
+		mfd->fb_ion_client = NULL;
+		return PTR_RET(mfd->fb_ion_client);
+	}
+	return 0;
+}
+
+void mdss_fb_free_fb_ion_memory(struct msm_fb_data_type *mfd)
+{
+	if (!mfd) {
+		pr_err("no mfd\n");
+		return;
+	}
+
+	if (!mfd->fbi->screen_base)
+		return;
+
+	if (!mfd->fb_ion_client || !mfd->fb_ion_handle) {
+		pr_err("invalid input parameters for fb%d\n", mfd->index);
+		return;
+	}
+
+	mfd->fbi->screen_base = NULL;
+	mfd->fbi->fix.smem_start = 0;
+
+	ion_unmap_kernel(mfd->fb_ion_client, mfd->fb_ion_handle);
+
+	if (mfd->mdp.fb_mem_get_iommu_domain) {
+		ion_unmap_iommu(mfd->fb_ion_client, mfd->fb_ion_handle,
+				mfd->mdp.fb_mem_get_iommu_domain(), 0);
+	}
+
+	ion_free(mfd->fb_ion_client, mfd->fb_ion_handle);
+	mfd->fb_ion_handle = NULL;
+}
+
+int mdss_fb_alloc_fb_ion_memory(struct msm_fb_data_type *mfd, size_t fb_size)
+{
+	unsigned long buf_size;
+	int rc;
+	void *vaddr;
+
+	if (!mfd) {
+		pr_err("Invalid input param - no mfd");
+		return -EINVAL;
+	}
+
+	if (!mfd->fb_ion_client) {
+		rc = mdss_fb_create_ion_client(mfd);
+		if (rc < 0) {
+			pr_err("fb ion client couldn't be created - %d\n", rc);
+			return rc;
+		}
+	}
+
+	pr_debug("size for mmap = %zu", fb_size);
+	mfd->fb_ion_handle = ion_alloc(mfd->fb_ion_client, fb_size, SZ_4K,
+			ION_HEAP(ION_SYSTEM_HEAP_ID), 0);
+	if (IS_ERR_OR_NULL(mfd->fb_ion_handle)) {
+		pr_err("unable to alloc fbmem from ion - %ld\n",
+				PTR_ERR(mfd->fb_ion_handle));
+		return PTR_ERR(mfd->fb_ion_handle);
+	}
+
+	if (mfd->mdp.fb_mem_get_iommu_domain) {
+		rc = ion_map_iommu(mfd->fb_ion_client, mfd->fb_ion_handle,
+				mfd->mdp.fb_mem_get_iommu_domain(), 0, SZ_4K, 0,
+				&mfd->iova, &buf_size, 0, 0);
+		if (rc) {
+			pr_err("Cannot map fb_mem to IOMMU. rc=%d\n", rc);
+			goto fb_mmap_failed;
+		}
+	} else {
+		pr_err("No IOMMU Domain");
+		goto fb_mmap_failed;
+
+	}
+
+	vaddr  = ion_map_kernel(mfd->fb_ion_client, mfd->fb_ion_handle);
+	if (IS_ERR_OR_NULL(vaddr)) {
+		pr_err("ION memory mapping failed - %ld\n", PTR_ERR(vaddr));
+		rc = PTR_ERR(vaddr);
+		if (mfd->mdp.fb_mem_get_iommu_domain) {
+			ion_unmap_iommu(mfd->fb_ion_client, mfd->fb_ion_handle,
+					mfd->mdp.fb_mem_get_iommu_domain(), 0);
+		}
+		goto fb_mmap_failed;
+	}
+
+	pr_debug("alloc 0x%zuB vaddr = %p (%pa iova) for fb%d\n", fb_size,
+			vaddr, &mfd->iova, mfd->index);
+
+	mfd->fbi->screen_base = (char *) vaddr;
+	mfd->fbi->fix.smem_start = (unsigned int) mfd->iova;
+	mfd->fbi->fix.smem_len = fb_size;
+
+	return rc;
+
+fb_mmap_failed:
+	ion_free(mfd->fb_ion_client, mfd->fb_ion_handle);
+	return rc;
+}
+
+/**
+ * mdss_fb_fbmem_ion_mmap() -  Custom fb  mmap() function for MSM driver.
+ *
+ * @info -  Framebuffer info.
+ * @vma  -  VM area which is part of the process virtual memory.
+ *
+ * This framebuffer mmap function differs from standard mmap() function by
+ * allowing for customized page-protection and dynamically allocate framebuffer
+ * memory from system heap and map to iommu virtual address.
+ *
+ * Return: virtual address is returned through vma
+ */
+static int mdss_fb_fbmem_ion_mmap(struct fb_info *info,
+		struct vm_area_struct *vma)
+{
+	int rc = 0;
+	size_t req_size, fb_size;
+	struct msm_fb_data_type *mfd = (struct msm_fb_data_type *)info->par;
+	struct sg_table *table;
+	unsigned long addr = vma->vm_start;
+	unsigned long offset = vma->vm_pgoff * PAGE_SIZE;
+	struct scatterlist *sg;
+	unsigned int i;
+	struct page *page;
+
+	if (!mfd || !mfd->pdev || !mfd->pdev->dev.of_node) {
+		pr_err("Invalid device node\n");
+		return -ENODEV;
+	}
+
+	req_size = vma->vm_end - vma->vm_start;
+	fb_size = mfd->fbi->fix.smem_len;
+	if (req_size > fb_size) {
+		pr_warn("requested map is greater than framebuffer");
+		return -EOVERFLOW;
+	}
+
+	if (!mfd->fbi->screen_base) {
+		rc = mdss_fb_alloc_fb_ion_memory(mfd, fb_size);
+		if (rc < 0) {
+			pr_err("fb mmap failed!!!!");
+			return rc;
+		}
+	}
+
+	table = ion_sg_table(mfd->fb_ion_client, mfd->fb_ion_handle);
+	if (IS_ERR(table)) {
+		pr_err("Unable to get sg_table from ion:%ld\n", PTR_ERR(table));
+		mfd->fbi->screen_base = NULL;
+		return PTR_ERR(table);
+	} else if (!table) {
+		pr_err("sg_list is NULL\n");
+		mfd->fbi->screen_base = NULL;
+		return -EINVAL;
+	}
+
+	page = sg_page(table->sgl);
+	if (page) {
+		for_each_sg(table->sgl, sg, table->nents, i) {
+			unsigned long remainder = vma->vm_end - addr;
+			unsigned long len = sg->length;
+
+			page = sg_page(sg);
+
+			if (offset >= sg->length) {
+				offset -= sg->length;
+				continue;
+			} else if (offset) {
+				page += offset / PAGE_SIZE;
+				len = sg->length - offset;
+				offset = 0;
+			}
+			len = min(len, remainder);
+
+			if (mfd->mdp_fb_page_protection ==
+					MDP_FB_PAGE_PROTECTION_WRITECOMBINE)
+				vma->vm_page_prot =
+					pgprot_writecombine(vma->vm_page_prot);
+
+			pr_debug("vma=%p, addr=%x len=%ld",
+					vma, (unsigned int)addr, len);
+			pr_cont("vm_start=%x vm_end=%x vm_page_prot=%ld\n",
+					(unsigned int)vma->vm_start,
+					(unsigned int)vma->vm_end,
+					(unsigned long int)vma->vm_page_prot);
+
+			io_remap_pfn_range(vma, addr, page_to_pfn(page), len,
+					vma->vm_page_prot);
+			addr += len;
+			if (addr >= vma->vm_end)
+				break;
+		}
+	} else {
+		pr_err("PAGE is null\n");
+		mdss_fb_free_fb_ion_memory(mfd);
+		return -ENOMEM;
+	}
+
+	return rc;
+}
+
 /*
- * Custom Framebuffer mmap() function for MSM driver.
- * Differs from standard mmap() function by allowing for customized
- * page-protection.
+ * mdss_fb_physical_mmap() - Custom fb mmap() function for MSM driver.
+ *
+ * @info -  Framebuffer info.
+ * @vma  -  VM area which is part of the process virtual memory.
+ *
+ * This framebuffer mmap function differs from standard mmap() function as
+ * map to framebuffer memory from the CMA memory which is allocated during
+ * bootup.
+ *
+ * Return: virtual address is returned through vma
  */
-static int mdss_fb_mmap(struct fb_info *info, struct vm_area_struct *vma)
+static int mdss_fb_physical_mmap(struct fb_info *info,
+		struct vm_area_struct *vma)
 {
 	/* Get frame buffer memory range. */
 	unsigned long start = info->fix.smem_start;
@@ -1257,9 +1470,9 @@
 	unsigned long off = vma->vm_pgoff << PAGE_SHIFT;
 	struct msm_fb_data_type *mfd = (struct msm_fb_data_type *)info->par;
 	int ret = 0;
-
+	
 	if (!start) {
-		pr_warn("No framebuffer memory is allocated.\n");
+		pr_warn("No framebuffer memory is allocated\n");
 		return -ENOMEM;
 	}
 
@@ -1275,40 +1488,44 @@
 	/* Set VM flags. */
 	start &= PAGE_MASK;
 	if ((vma->vm_end <= vma->vm_start) ||
-	    (off >= len) ||
-	    ((vma->vm_end - vma->vm_start) > (len - off)))
+			(off >= len) ||
+			((vma->vm_end - vma->vm_start) > (len - off)))
 		return -EINVAL;
 	off += start;
 	if (off < start)
 		return -EINVAL;
 	vma->vm_pgoff = off >> PAGE_SHIFT;
 	/* This is an IO map - tell maydump to skip this VMA */
-	vma->vm_flags |= VM_IO | VM_RESERVED;
+	vma->vm_flags |= VM_IO;
 
-	/* Set VM page protection */
 	if (mfd->mdp_fb_page_protection == MDP_FB_PAGE_PROTECTION_WRITECOMBINE)
 		vma->vm_page_prot = pgprot_writecombine(vma->vm_page_prot);
-	else if (mfd->mdp_fb_page_protection ==
-		 MDP_FB_PAGE_PROTECTION_WRITETHROUGHCACHE)
-		vma->vm_page_prot = pgprot_writethroughcache(vma->vm_page_prot);
-	else if (mfd->mdp_fb_page_protection ==
-		 MDP_FB_PAGE_PROTECTION_WRITEBACKCACHE)
-		vma->vm_page_prot = pgprot_writebackcache(vma->vm_page_prot);
-	else if (mfd->mdp_fb_page_protection ==
-		 MDP_FB_PAGE_PROTECTION_WRITEBACKWACACHE)
-		vma->vm_page_prot = pgprot_writebackwacache(vma->vm_page_prot);
-	else
-		vma->vm_page_prot = pgprot_noncached(vma->vm_page_prot);
 
 	/* Remap the frame buffer I/O range */
 	if (io_remap_pfn_range(vma, vma->vm_start, off >> PAGE_SHIFT,
-			       vma->vm_end - vma->vm_start,
-			       vma->vm_page_prot))
+				vma->vm_end - vma->vm_start,
+				vma->vm_page_prot))
 		return -EAGAIN;
 
 	return 0;
 }
 
+static int mdss_fb_mmap(struct fb_info *info, struct vm_area_struct *vma)
+{
+	struct msm_fb_data_type *mfd = (struct msm_fb_data_type *)info->par;
+	int rc = 0;
+
+	if (!info->fix.smem_start && !mfd->fb_ion_handle)
+		rc = mdss_fb_fbmem_ion_mmap(info, vma);
+	else
+		rc = mdss_fb_physical_mmap(info, vma);
+
+	if (rc < 0)
+		pr_err("fb mmap failed with rc = %d", rc);
+
+	return rc;
+}
+
 static struct fb_ops mdss_fb_ops = {
 	.owner = THIS_MODULE,
 	.fb_open = mdss_fb_open,
@@ -1318,15 +1535,20 @@
 	.fb_blank = mdss_fb_blank,	/* blank display */
 	.fb_pan_display = mdss_fb_pan_display,	/* pan display */
 	.fb_ioctl = mdss_fb_ioctl,	/* perform fb specific ioctl */
+#ifdef CONFIG_COMPAT
+	.fb_compat_ioctl = mdss_fb_compat_ioctl,
+#endif
 	.fb_mmap = mdss_fb_mmap,
 };
 
 static int mdss_fb_alloc_fbmem_iommu(struct msm_fb_data_type *mfd, int dom)
 {
 	void *virt = NULL;
-	unsigned long phys = 0;
+	phys_addr_t phys = 0;
 	size_t size = 0;
 	struct platform_device *pdev = mfd->pdev;
+	int rc = 0;
+	//struct device_node *fbmem_pnode = NULL;
 
 	if (!pdev || !pdev->dev.of_node) {
 		pr_err("Invalid device node\n");
@@ -1345,31 +1567,31 @@
 		/* Normal Booting */
 		mfd->fbi->screen_base = NULL;
 		mfd->fbi->fix.smem_start = 0;
-		mfd->fbi->fix.smem_len = 0;
 		return 0;
 	} else {
 		of_property_read_u32(pdev->dev.of_node,
 			 "qcom,memory-alt-reservation-size", &size);
 	}
 
-	pr_info("%s frame buffer reserve_size=0x%x\n", __func__, size);
+	pr_debug("%s frame buffer reserve_size=0x%zx\n", __func__, size);
 
 	if (size < PAGE_ALIGN(mfd->fbi->fix.line_length *
 			      mfd->fbi->var.yres_virtual))
 		pr_warn("reserve size is smaller than framebuffer size\n");
 
-	virt = allocate_contiguous_memory(size, MEMTYPE_EBI1, SZ_1M, 0);
+	virt = dma_alloc_coherent(&pdev->dev, size, &phys, GFP_KERNEL);
 	if (!virt) {
-		pr_err("unable to alloc fbmem size=%u\n", size);
+		pr_err("unable to alloc fbmem size=%zx\n", size);
 		return -ENOMEM;
 	}
 
-	phys = memory_pool_node_paddr(virt);
-
-	msm_iommu_map_contig_buffer(phys, dom, 0, size, SZ_4K, 0,
+	rc = msm_iommu_map_contig_buffer(phys, dom, 0, size, SZ_4K, 0,
 					    &mfd->iova);
-	pr_info("allocating %u bytes at %p (%lx phys) for fb %d\n",
-		 size, virt, phys, mfd->index);
+	if (rc)
+		pr_warn("Cannot map fb_mem %pa to IOMMU. rc=%d\n", &phys, rc);
+
+	pr_debug("alloc 0x%zxB @ (%pa phys) (0x%p virt) (%pa iova) for fb%d\n",
+		 size, &phys, virt, &mfd->iova, mfd->index);
 
 	mfd->fbi->screen_base = virt;
 	mfd->fbi->fix.smem_start = phys;
@@ -1381,9 +1603,9 @@
 static int mdss_fb_alloc_fbmem(struct msm_fb_data_type *mfd)
 {
 
-	if (mfd->mdp.fb_mem_alloc_fnc)
+	if (mfd->mdp.fb_mem_alloc_fnc) {
 		return mfd->mdp.fb_mem_alloc_fnc(mfd);
-	else if (mfd->mdp.fb_mem_get_iommu_domain) {
+	} else if (mfd->mdp.fb_mem_get_iommu_domain) {
 		int dom = mfd->mdp.fb_mem_get_iommu_domain();
 		if (dom >= 0)
 			return mdss_fb_alloc_fbmem_iommu(mfd, dom);
@@ -1565,8 +1787,14 @@
 	var->hsync_len = panel_info->lcdc.h_pulse_width;
 	var->pixclock = panel_info->clk_rate / 1000;
 
-	/* id field for fb app  */
+	/*
+	 * Populate smem length here for uspace to get the
+	 * Framebuffer size when FBIO_FSCREENINFO ioctl is
+	 * called.
+	 */
+	fix->smem_len = PAGE_ALIGN(fix->line_length * var->yres) * mfd->fb_page;
 
+	/* id field for fb app  */
 	id = (int *)&mfd->panel;
 
 	snprintf(fix->id, sizeof(fix->id), "mdssfb_%x", (u32) *id);
@@ -1581,10 +1809,8 @@
 
 	mdss_fb_parse_dt(mfd);
 
-	if (mdss_fb_alloc_fbmem(mfd)) {
-		pr_err("unable to allocate framebuffer memory\n");
-		return -ENOMEM;
-	}
+	if (mdss_fb_alloc_fbmem(mfd))
+		pr_warn("unable to allocate fb memory in fb register\n");
 
 	mfd->op_enable = true;
 
@@ -1621,9 +1847,8 @@
 		return -EPERM;
 	}
 
-	pr_info("FrameBuffer[%d] %dx%d size=%d registered successfully!\n",
-		     mfd->index, fbi->var.xres, fbi->var.yres,
-		     fbi->fix.smem_len);
+	pr_info("FrameBuffer[%d] %dx%d registered successfully!\n", mfd->index,
+					fbi->var.xres, fbi->var.yres);
 
 	return 0;
 }
@@ -1797,6 +2022,16 @@
 			mfd->disp_thread = NULL;
 		}
 
+		if (mfd->mdp.release_fnc) {
+			ret = mfd->mdp.release_fnc(mfd, true);
+			if (ret)
+				pr_err("error fb%d release process %s pid=%d\n",
+					mfd->index, task->comm, pid);
+		}
+
+		if (mfd->fb_ion_handle)
+			mdss_fb_free_fb_ion_memory(mfd);
+
 		ret = mdss_fb_blank_sub(FB_BLANK_POWERDOWN, info,
 			mfd->op_enable);
 		if (ret) {
@@ -2388,6 +2623,8 @@
 	else
 		mfd->fbi->fix.line_length = var->xres * var->bits_per_pixel / 8;
 
+	mfd->fbi->fix.smem_len = mfd->fbi->fix.line_length *
+					mfd->fbi->var.yres_virtual;
 
 	if (mfd->panel_reconfig || (mfd->fb_imgType != old_imgType)) {
 		mdss_fb_blank_sub(FB_BLANK_POWERDOWN, info, mfd->op_enable);
@@ -2698,7 +2935,8 @@
 		(cmd != MSMFB_OVERLAY_VSYNC_CTRL) &&
 		(cmd != MSMFB_ASYNC_BLIT) &&
 		(cmd != MSMFB_BLIT) &&
-		(cmd != MSMFB_NOTIFY_UPDATE)) {
+		(cmd != MSMFB_NOTIFY_UPDATE) &&
+		(cmd != MSMFB_OVERLAY_PREPARE)) {
 		ret = mdss_fb_pan_idle(mfd);
 	}
 
diff -Nur a/drivers/video/msm/mdss/mdss_fb.h b/drivers/video/msm/mdss/mdss_fb.h
--- a/drivers/video/msm/mdss/mdss_fb.h	2016-01-10 16:25:37.425141000 -0500
+++ b/drivers/video/msm/mdss/mdss_fb.h	2015-12-01 05:57:13.000000000 -0500
@@ -53,6 +53,9 @@
 #define  MIN(x, y) (((x) < (y)) ? (x) : (y))
 #endif
 
+#define MDP_PP_AD_BL_LINEAR	0x0
+#define MDP_PP_AD_BL_LINEAR_INV	0x1
+
 /**
  * enum mdp_notify_event - Different frame events to indicate frame update state
  *
@@ -133,9 +136,8 @@
 	int (*lut_update)(struct msm_fb_data_type *mfd, struct fb_cmap *cmap);
 	int (*do_histogram)(struct msm_fb_data_type *mfd,
 				struct mdp_histogram *hist);
-	int (*update_ad_input)(struct msm_fb_data_type *mfd);
-	int (*ad_attenuate_bl)(u32 bl, u32 *bl_out,
-			struct msm_fb_data_type *mfd);
+	int (*ad_calc_bl)(struct msm_fb_data_type *mfd, int bl_in,
+		int *bl_out, bool *bl_out_notify);
 	int (*panel_register_done)(struct mdss_panel_data *pdata);
 	u32 (*fb_stride)(u32 fb_index, u32 xres, int bpp);
 	int (*splash_init_fnc)(struct msm_fb_data_type *mfd);
@@ -199,6 +201,7 @@
 	int ext_ad_ctrl;
 	u32 ext_bl_ctrl;
 	u32 calib_mode;
+	u32 ad_bl_level;
 	u32 bl_level;
 	u32 bl_previous;
 	u32 bl_scale;
@@ -255,6 +258,8 @@
 	u32 dcm_state;
 	struct list_head proc_list;
 	u32 wait_for_kickoff;
+	struct ion_client *fb_ion_client;
+	struct ion_handle *fb_ion_handle;
 
 	int blank_mode;
 };
@@ -278,13 +283,8 @@
 	}
 }
 #ifdef CONFIG_FB_MSM_CAMERA_CSC
-#if defined(CONFIG_MACH_KS01SKT) || defined(CONFIG_MACH_KS01EUR) || defined(CONFIG_MACH_KS01KTT) || defined(CONFIG_MACH_KS01LGT) || defined(CONFIG_SEC_ATLANTIC_PROJECT)
-extern u8 prev_csc_update;
-#endif
 extern u8 csc_update;
-#if !defined(CONFIG_MACH_KS01SKT) && !defined(CONFIG_MACH_KS01EUR) && !defined(CONFIG_MACH_KS01KTT) && !defined(CONFIG_MACH_KS01LGT) && !defined(CONFIG_SEC_ATLANTIC_PROJECT)
-extern u8 pre_csc_update;
-#endif
+extern u8 csc_change;
 #endif
 
 #if defined (CONFIG_FB_MSM_MDSS_DBG_SEQ_TICK)
diff -Nur a/drivers/video/msm/mdss/mdss.h b/drivers/video/msm/mdss/mdss.h
--- a/drivers/video/msm/mdss/mdss.h	2016-01-10 16:25:37.422141000 -0500
+++ b/drivers/video/msm/mdss/mdss.h	2015-12-01 05:57:13.000000000 -0500
@@ -133,7 +133,8 @@
 	u8 has_wfd_blk;
 	u32 has_no_lut_read;
 	u8 has_wb_ad;
-
+	bool idle_pc_enabled;
+	
 	u32 rotator_ot_limit;
 	u32 mdp_irq_mask;
 	u32 mdp_hist_irq_mask;
@@ -213,7 +214,7 @@
 
 	int handoff_pending;
 	struct mdss_prefill_data prefill_data;
-	bool ulps;
+	bool idle_pc;
 	struct mdss_perf_tune perf_tune;
 	int iommu_ref_cnt;
 
diff -Nur a/drivers/video/msm/mdss/mdss_hdmi_tx.c b/drivers/video/msm/mdss/mdss_hdmi_tx.c
--- a/drivers/video/msm/mdss/mdss_hdmi_tx.c	2016-01-10 16:25:37.426141000 -0500
+++ b/drivers/video/msm/mdss/mdss_hdmi_tx.c	2015-12-01 05:57:13.000000000 -0500
@@ -4019,6 +4019,7 @@
 		DEV_DBG("%s: Add child devices.\n", __func__);
 	}
 
+        hdmi_ctrl->mhl_max_pclk = 1;
 	if (mdss_debug_register_base("hdmi",
 			hdmi_ctrl->pdata.io[HDMI_TX_CORE_IO].base,
 			hdmi_ctrl->pdata.io[HDMI_TX_CORE_IO].len))
diff -Nur a/drivers/video/msm/mdss/mdss_hx8369b_wvga_dsi_panel.c b/drivers/video/msm/mdss/mdss_hx8369b_wvga_dsi_panel.c
--- a/drivers/video/msm/mdss/mdss_hx8369b_wvga_dsi_panel.c	2016-01-10 16:25:37.426141000 -0500
+++ b/drivers/video/msm/mdss/mdss_hx8369b_wvga_dsi_panel.c	2015-12-01 05:57:13.000000000 -0500
@@ -214,10 +214,10 @@
 	cmdreq.flags = CMD_REQ_COMMIT | CMD_CLK_CTRL;
 	cmdreq.rlen = 0;
 	cmdreq.cb = NULL;
-	
-		
+
+
 	mdss_dsi_cmdlist_put(ctrl, &cmdreq);
-	
+
 }
 
 static void mdss_dsi_panel_cmds_send(struct mdss_dsi_ctrl_pdata *ctrl,
@@ -303,10 +303,10 @@
 			pr_err("%s: Invalid input data\n", __func__);
 			return;
 		}
-	
+
 		ctrl_pdata = container_of(pdata, struct mdss_dsi_ctrl_pdata,
 					panel_data);
-	
+
 		if (!gpio_is_valid(ctrl_pdata->rst_gpio)) {
 			pr_debug("%s:%d, reset line not configured\n",
 				   __func__, __LINE__);
@@ -315,13 +315,13 @@
 
 		pr_debug("%s: enable = %d\n", __func__, enable);
 		if (enable) {
-						
+
 			rc = gpio_tlmm_config(GPIO_CFG(ctrl_pdata->rst_gpio, 0,
 						GPIO_CFG_OUTPUT,GPIO_CFG_PULL_UP,GPIO_CFG_8MA),
 						GPIO_CFG_ENABLE);
 			if (rc)
 				pr_err("disabling rst_gpio failed, rc=%d\n",rc);
-			
+
 			mdelay(5);
 			gpio_set_value((ctrl_pdata->rst_gpio), 1);
 			msleep(20);
@@ -337,7 +337,7 @@
 				pr_debug("%s: Reset panel done\n", __func__);
 			}
 		} else {
-			
+
 			rc = gpio_tlmm_config(GPIO_CFG(ctrl_pdata->rst_gpio, 0,
 						GPIO_CFG_OUTPUT,GPIO_CFG_PULL_DOWN,GPIO_CFG_2MA),
 						GPIO_CFG_ENABLE);
@@ -372,7 +372,7 @@
 	int backlightlevel;
 	int cd;
 		switch (bl_level) {
- 		case 0: 
+ 		case 0:
 			backlightlevel = 30;  /* 0 */
 			break;
 		case 1 ... 10:
@@ -550,7 +550,7 @@
 
 #if  defined(CONFIG_BACKLIGHT_IC_KTD253)
 	static int bl_level_old;
-#endif	
+#endif
 
 #if defined(CONFIG_FB_MSM8x26_MDSS_CHECK_LCD_CONNECTION)
 	if (get_samsung_lcd_attached() == 0)
@@ -717,7 +717,7 @@
 #if defined(CONFIG_MDNIE_LITE_TUNING) || defined(CONFIG_MDNIE_VIDEO_ENHANCED)
 	is_negative_on();
 #endif
-#if defined(CONFIG_BACKLIGHT_IC_KTD2801) 
+#if defined(CONFIG_BACKLIGHT_IC_KTD2801)
 	mdelay(2);
 	if (gpio_is_valid(msd.bl_ap_pwm)) {
 		gpio_tlmm_config(GPIO_CFG(msd.bl_ap_pwm,3, GPIO_CFG_OUTPUT, GPIO_CFG_NO_PULL,
@@ -725,7 +725,7 @@
 	}
 	if((fisrt_boot_bl==1) && (lcd_connected_status ==1)){
 
-#ifdef EXPRESSWIRED		
+#ifdef EXPRESSWIRED
 		ktd_backlight_set_brightness(BL_MAX_BRIGHTNESS_LEVEL);
 #else
 		mdss_dsi_panel_bklt_pwm(BL_MAX_BRIGHTNESS_LEVEL);
@@ -739,14 +739,14 @@
 
 		INIT_WORK(&err_fg_work, err_fg_work_func);
 
-		rc = request_threaded_irq(err_fg_gpio, NULL, err_fg_irq_handler, 
+		rc = request_threaded_irq(err_fg_gpio, NULL, err_fg_irq_handler,
 			IRQF_TRIGGER_LOW | IRQF_ONESHOT, "esd_detect", NULL);
 		if (rc) {
 			pr_err("%s : Failed to request_irq. :ret=%d", __func__, rc);
 		}
 		first_boot = 0;
 	}
-	
+
 	enable_irq(err_fg_gpio);
 #endif
 	pr_err("%s:-\n", __func__);
@@ -1002,7 +1002,6 @@
 		int rc, i, len;
 		const char *data;
 		static const char *pdest;
-		static const char *on_cmds_state, *off_cmds_state;
 		struct mdss_panel_info *pinfo = &(ctrl_pdata->panel_data.panel_info);
 		rc = of_property_read_u32(np, "qcom,mdss-dsi-panel-width", &tmp);
 		if (rc) {
@@ -1010,7 +1009,7 @@
 							__func__, __LINE__);
 			return -EINVAL;
 		}
-	
+
 		pinfo->xres = (!rc ? tmp : 640);
 		rc = of_property_read_u32(np, "qcom,mdss-dsi-panel-height", &tmp);
 		if (rc) {
@@ -1019,7 +1018,7 @@
 			return -EINVAL;
 		}
 		pinfo->yres = (!rc ? tmp : 480);
-	
+
 		rc = of_property_read_u32(np,
 			"qcom,mdss-pan-physical-width-dimension", &tmp);
 		pinfo->physical_width = (!rc ? tmp : 0);
@@ -1057,7 +1056,7 @@
 			pinfo->mipi.dst_format =
 				DSI_VIDEO_DST_FORMAT_RGB888;
 		}
-		
+
 		pdest = of_get_property(np,
 				"qcom,mdss-dsi-panel-destination", NULL);
 		if (strlen(pdest) != 9) {
@@ -1073,7 +1072,7 @@
 								__func__);
 			pinfo->pdest = DISPLAY_1;
 		}
-	
+
 		rc = of_property_read_u32(np, "qcom,mdss-dsi-h-front-porch", &tmp);
 		pinfo->lcdc.h_front_porch = (!rc ? tmp : 6);
 		rc = of_property_read_u32(np, "qcom,mdss-dsi-h-back-porch", &tmp);
@@ -1091,7 +1090,7 @@
 		rc = of_property_read_u32(np,
 			"qcom,mdss-dsi-underflow-color", &tmp);
 		pinfo->lcdc.underflow_clr = (!rc ? tmp : 0xff);
-	
+
 		rc = of_property_read_u32(np,
 			"qcom,mdss-dsi-border-color", &tmp);
 		pinfo->lcdc.border_clr = (!rc ? tmp : 0);
@@ -1120,11 +1119,11 @@
 				spin_unlock(&bl_ctrl_lock);
 #endif
 
-#if !defined(CONFIG_BACKLIGHT_IC_KTD2801)				
+#if !defined(CONFIG_BACKLIGHT_IC_KTD2801)
 				rc = of_property_read_u32(np,
 					"qcom,mdss-dsi-bl-pmic-pwm-frequency", &tmp);
 				if (rc) {
-					pr_err("%s:%d, Error, panel pwm_period\n",		
+					pr_err("%s:%d, Error, panel pwm_period\n",
 						__func__, __LINE__);
 				return -EINVAL;
 				}
@@ -1174,16 +1173,16 @@
 		}
 		rc = of_property_read_u32(np, "qcom,mdss-brightness-max-level", &tmp);
 		pinfo->brightness_max = (!rc ? tmp : MDSS_MAX_BL_BRIGHTNESS);
-	
+
 		rc = of_property_read_u32(np, "qcom,mdss-dsi-bl-min-level", &tmp);
 		pinfo->bl_min = (!rc ? tmp : 0);
 		rc = of_property_read_u32(np, "qcom,mdss-dsi-bl-max-level", &tmp);
 		pinfo->bl_max = (!rc ? tmp : 255);
 		ctrl_pdata->bklt_max = pinfo->bl_max;
-	
+
 		rc = of_property_read_u32(np, "qcom,mdss-dsi-interleave-mode", &tmp);
 		pinfo->mipi.interleave_mode = (!rc ? tmp : 0);
-	 
+
 		pinfo->mipi.vsync_enable = of_property_read_bool(np,
 			"qcom,mdss-dsi-te-check-enable");
 		pinfo->mipi.hw_vsync_mode = of_property_read_bool(np,
@@ -1191,7 +1190,7 @@
 		rc = of_property_read_u32(np,
 			"qcom,mdss-dsi-h-sync-pulse", &tmp);
 		pinfo->mipi.pulse_mode_hsa_he = (!rc ? tmp : false);
-	
+
 		pinfo->mipi.hfp_power_stop = of_property_read_bool(np,
 			"qcom,mdss-dsi-hfp-power-mode");
 		pinfo->mipi.hsa_power_stop = of_property_read_bool(np,
@@ -1206,36 +1205,36 @@
 			"qcom,mdss-dsi-traffic-mode", &tmp);
 		pinfo->mipi.traffic_mode =
 				(!rc ? tmp : DSI_NON_BURST_SYNCH_PULSE);
-	
+
 		rc = of_property_read_u32(np,
 			"qcom,mdss-dsi-te-dcs-command", &tmp);
 		pinfo->mipi.insert_dcs_cmd =
 				(!rc ? tmp : 1);
-	
+
 		rc = of_property_read_u32(np,
 			"qcom,mdss-dsi-te-v-sync-continue-lines", &tmp);
 		pinfo->mipi.wr_mem_continue =
 				(!rc ? tmp : 0x3c);
-	
+
 		rc = of_property_read_u32(np,
 			"qcom,mdss-dsi-te-v-sync-rd-ptr-irq-line", &tmp);
 		pinfo->mipi.wr_mem_start =
 				(!rc ? tmp : 0x2c);
-	
+
 		rc = of_property_read_u32(np,
 			"qcom,mdss-dsi-te-pin-select", &tmp);
 		pinfo->mipi.te_sel =
 				(!rc ? tmp : 1);
-	
+
 		rc = of_property_read_u32(np, "qcom,mdss-dsi-virtual-channel-id", &tmp);
 		pinfo->mipi.vc = (!rc ? tmp : 0);
-	
+
 		rc = of_property_read_u32(np, "qcom,mdss-dsi-color-order", &tmp);
 		pinfo->mipi.rgb_swap = (!rc ? tmp : DSI_RGB_SWAP_RGB);
-		
+
 		rc = of_property_read_u32(np, "qcom,mdss-force-clk-lane-hs", &tmp);
 		pinfo->mipi.force_clk_lane_hs = (!rc ? tmp : 0);
-	
+
 		pinfo->mipi.data_lane0 = of_property_read_bool(np,
 			"qcom,mdss-dsi-lane-0-state");
 		pinfo->mipi.data_lane1 = of_property_read_bool(np,
@@ -1244,17 +1243,17 @@
 			"qcom,mdss-dsi-lane-2-state");
 		pinfo->mipi.data_lane3 = of_property_read_bool(np,
 			"qcom,mdss-dsi-lane-3-state");
-	
+
 		rc = of_property_read_u32(np, "qcom,mdss-dsi-lane-map", &tmp);
 		pinfo->mipi.dlane_swap = (!rc ? tmp : 0);
-	
+
 		rc = of_property_read_u32(np, "qcom,mdss-dsi-t-clk-pre", &tmp);
 		pinfo->mipi.t_clk_pre = (!rc ? tmp : 0x24);
 		rc = of_property_read_u32(np, "qcom,mdss-dsi-t-clk-post", &tmp);
 		pinfo->mipi.t_clk_post = (!rc ? tmp : 0x03);
 		rc = of_property_read_u32(np, "qcom,mdss-dsi-stream", &tmp);
 		pinfo->mipi.stream = (!rc ? tmp : 0);
-	
+
 		rc = of_property_read_u32(np, "qcom,mdss-dsi-mdp-trigger", &tmp);
 		pinfo->mipi.mdp_trigger =
 				(!rc ? tmp : DSI_CMD_TRIGGER_SW);
@@ -1264,7 +1263,7 @@
 			pinfo->mipi.mdp_trigger =
 						DSI_CMD_TRIGGER_SW;
 		}
-	
+
 		rc = of_property_read_u32(np, "qcom,mdss-dsi-dma-trigger", &tmp);
 		pinfo->mipi.dma_trigger =
 				(!rc ? tmp : DSI_CMD_TRIGGER_SW);
@@ -1283,13 +1282,13 @@
 		} else {
 			pinfo->mode_gpio_state = MODE_GPIO_NOT_VALID;
 		}
-	
+
 		rc = of_property_read_u32(np, "qcom,mdss-dsi-panel-frame-rate", &tmp);
 		pinfo->mipi.frame_rate = (!rc ? tmp : 60);
-	
+
 		rc = of_property_read_u32(np, "qcom,mdss-dsi-panel-clock-rate", &tmp);
 		pinfo->clk_rate = (!rc ? tmp : 0);
-	
+
 		data = of_get_property(np,
 			"qcom,platform-strength-ctrl", &len);
 		if ((!data) || (len != 2)) {
@@ -1299,7 +1298,7 @@
 		}
 		pinfo->mipi.dsi_phy_db.strength[0] = data[0];
 		pinfo->mipi.dsi_phy_db.strength[1] = data[1];
-	
+
 		data = of_get_property(np,
 			"qcom,platform-regulator-settings", &len);
 		if ((!data) || (len != 7)) {
@@ -1311,7 +1310,7 @@
 			pinfo->mipi.dsi_phy_db.regulator[i]
 				= data[i];
 		}
-	
+
 		data = of_get_property(np, "qcom,mdss-dsi-panel-timings", &len);
 		if ((!data) || (len != 12)) {
 			pr_err("%s:%d, Unable to read Phy timing settings",
@@ -1320,12 +1319,12 @@
 		}
 		for (i = 0; i < len; i++)
 			pinfo->mipi.dsi_phy_db.timing[i] = data[i];
-	
+
 		pinfo->mipi.lp11_init = of_property_read_bool(np,
 						"qcom,mdss-dsi-lp11-init");
 		rc = of_property_read_u32(np, "qcom,mdss-dsi-init-delay-us", &tmp);
 		pinfo->mipi.init_delay = (!rc ? tmp : 0);
-	
+
 		mdss_dsi_parse_fbc_params(np, pinfo);
 
 		if(lcd_id == 0x55bc90){  //BOE
@@ -1341,30 +1340,6 @@
 
 		mdss_dsi_parse_dcs_cmds(np, &ctrl_pdata->off_cmds,
 			"qcom,mdss-dsi-off-command", "qcom,mdss-dsi-off-command-state");
-	
-		on_cmds_state = of_get_property(np,
-					"qcom,mdss-dsi-on-command-state", NULL);
-		if (!strncmp(on_cmds_state, "dsi_lp_mode", 11)) {
-			ctrl_pdata->dsi_on_state = DSI_LP_MODE;
-		} else if (!strncmp(on_cmds_state, "dsi_hs_mode", 11)) {
-			ctrl_pdata->dsi_on_state = DSI_HS_MODE;
-		} else {
-			pr_debug("%s: ON cmds state not specified. Set Default\n",
-								__func__);
-			ctrl_pdata->dsi_on_state = DSI_LP_MODE;
-		}
-	
-		off_cmds_state = of_get_property(np, "qcom,mdss-dsi-off-command-state", NULL);
-		if (!strncmp(off_cmds_state, "dsi_lp_mode", 11)) {
-			ctrl_pdata->dsi_off_state = DSI_LP_MODE;
-		} else if (!strncmp(off_cmds_state, "dsi_hs_mode", 11)) {
-			ctrl_pdata->dsi_off_state = DSI_HS_MODE;
-		} else {
-			pr_debug("%s: ON cmds state not specified. Set Default\n",
-								__func__);
-			ctrl_pdata->dsi_off_state = DSI_LP_MODE;
-		}
-	
 		return 0;
 	error:
 		return -EINVAL;
@@ -1409,14 +1384,14 @@
 static ssize_t mdss_siop_enable_store(struct device *dev,
 		struct device_attribute *attr, const char *buf, size_t size)
 {
-	
+
 	if (sysfs_streq(buf, "1") && !msd.dstat.siop_status)
 		msd.dstat.siop_status = true;
 	else if (sysfs_streq(buf, "0") && msd.dstat.siop_status)
 		msd.dstat.siop_status = false;
 	else
 		pr_info("%s: Invalid argument!!", __func__);
-	
+
 	return size;
 
 }
@@ -1717,7 +1692,7 @@
 	lcd_connected_status = ((lcd_id&0xFFFFFF)!=0x000000);
 
 	pr_err("%s: detected panel vendor --> %s [0x%x] lcd_attached = %d\n", __func__, panel_vendor, lcd_id,lcd_connected_status);
-	
+
 	return 1;
 }
 __setup("lcd_id=0x", detect_lcd_panel_vendor);
@@ -1841,7 +1816,7 @@
 
 	if (rc) {
 		pr_info("sysfs create fail-%s\n",dev_attr_lcd_power.attr.name);
-	
+
 	}
 	rc = sysfs_create_file(&lcd_device->dev.kobj,
 					&dev_attr_lcd_type.attr);
@@ -1850,7 +1825,7 @@
 				dev_attr_lcd_type.attr.name);
 	}
 
-	
+
 	rc= sysfs_create_file(&lcd_device->dev.kobj,
 					&dev_attr_siop_enable.attr);
 	if (rc) {
diff -Nur a/drivers/video/msm/mdss/mdss_hx8394c_720p_dsi_panel.c b/drivers/video/msm/mdss/mdss_hx8394c_720p_dsi_panel.c
--- a/drivers/video/msm/mdss/mdss_hx8394c_720p_dsi_panel.c	2016-01-10 16:25:37.427141000 -0500
+++ b/drivers/video/msm/mdss/mdss_hx8394c_720p_dsi_panel.c	2015-12-01 05:57:13.000000000 -0500
@@ -768,7 +768,6 @@
 		int rc, i, len;
 		const char *data;
 		static const char *pdest;
-		static const char *on_cmds_state, *off_cmds_state;
 		struct mdss_panel_info *pinfo = &(ctrl_pdata->panel_data.panel_info);
 		rc = of_property_read_u32(np, "qcom,mdss-dsi-panel-width", &tmp);
 		if (rc) {
@@ -1069,29 +1068,6 @@
 			"samsung,cabc-duty-82", "qcom,mdss-dsi-on-command-state");
 #endif
 
-		on_cmds_state = of_get_property(np,
-					"qcom,mdss-dsi-on-command-state", NULL);
-		if (!strncmp(on_cmds_state, "dsi_lp_mode", 11)) {
-			ctrl_pdata->dsi_on_state = DSI_LP_MODE;
-		} else if (!strncmp(on_cmds_state, "dsi_hs_mode", 11)) {
-			ctrl_pdata->dsi_on_state = DSI_HS_MODE;
-		} else {
-			pr_debug("%s: ON cmds state not specified. Set Default\n",
-								__func__);
-			ctrl_pdata->dsi_on_state = DSI_LP_MODE;
-		}
-
-		off_cmds_state = of_get_property(np, "qcom,mdss-dsi-off-command-state", NULL);
-		if (!strncmp(off_cmds_state, "dsi_lp_mode", 11)) {
-			ctrl_pdata->dsi_off_state = DSI_LP_MODE;
-		} else if (!strncmp(off_cmds_state, "dsi_hs_mode", 11)) {
-			ctrl_pdata->dsi_off_state = DSI_HS_MODE;
-		} else {
-			pr_debug("%s: ON cmds state not specified. Set Default\n",
-								__func__);
-			ctrl_pdata->dsi_off_state = DSI_LP_MODE;
-		}
-
 		return 0;
 	error:
 		return -EINVAL;
diff -Nur a/drivers/video/msm/mdss/mdss_io_util.c b/drivers/video/msm/mdss/mdss_io_util.c
--- a/drivers/video/msm/mdss/mdss_io_util.c	2016-01-10 16:25:37.427141000 -0500
+++ b/drivers/video/msm/mdss/mdss_io_util.c	2015-12-01 05:57:13.000000000 -0500
@@ -294,6 +294,13 @@
 					continue;
 				}
 #endif
+#ifdef CONFIG_MACH_KLIMT_LTE_DCM
+				/* VREG_LVS1_1P8 Always On due to Audio(MP3) Play Mute Problem */
+				if(!strncmp(in_vreg[i].vreg_name, "vdd3", 4)) {	// VREG_LVS1_1P8 1.8V
+					pr_err("%s : VDD3 disable skip!!\n", __func__);
+					continue;
+				}
+#endif
 
 				if (in_vreg[i].pre_off_sleep)
 					msleep(in_vreg[i].pre_off_sleep);
diff -Nur a/drivers/video/msm/mdss/mdss_jdi_dsi_panel.c b/drivers/video/msm/mdss/mdss_jdi_dsi_panel.c
--- a/drivers/video/msm/mdss/mdss_jdi_dsi_panel.c	2016-01-10 16:25:37.427141000 -0500
+++ b/drivers/video/msm/mdss/mdss_jdi_dsi_panel.c	2015-12-01 05:57:13.000000000 -0500
@@ -66,7 +66,6 @@
 static struct dsi_cmd manufacture_id_cmds;
 static struct candella_lux_map candela_map_table;
 
-static struct mipi_samsung_driver_data msd;
 /*List of supported Panels with HW revision detail
  * (one structure per project)
  * {hw_rev,"label string given in panel dtsi file"}
@@ -285,7 +284,7 @@
 	if (unlikely(mfd->key != MFD_KEY))
 		return -EINVAL;
 
-	rc = snprintf((char *)buf, sizeof(buf), "%d\n", mfd->panel_power_on);
+	rc = snprintf((char *)buf, 10, "%d\n", mfd->panel_power_on);
 	pr_info("mipi_samsung_disp_get_power(%d)\n", mfd->panel_power_on);
 
 	return rc;
@@ -352,7 +351,7 @@
 {
 	int rc;
 
-	rc = snprintf((char *)buf, sizeof(buf), "%d\n", msd.dstat.cabc_on);
+	rc = snprintf((char *)buf, 10, "%d\n", msd.dstat.cabc_on);
 	pr_info("cabc status: %c\n", *buf);
 
 	return rc;
@@ -404,7 +403,7 @@
 {
 	int rc;
 
-	rc = snprintf((char *)buf, sizeof(buf), "%d\n", msd.dstat.siop_status);
+	rc = snprintf((char *)buf, 10, "%d\n", msd.dstat.siop_status);
 	pr_info("siop status: %d\n", *buf);
 
 	return rc;
@@ -474,7 +473,7 @@
 {
 	int rc;
 
-	rc = snprintf((char *)buf, sizeof(buf), "%d\n",
+	rc = snprintf((char *)buf, 10, "%d\n",
 					msd.dstat.bright_level );
 	pr_info("backlight : %d\n", *buf);
 
@@ -499,7 +498,7 @@
 {
 	int rc;
 
-	rc = snprintf((char *)buf, sizeof(buf), "%d\n",
+	rc = snprintf((char *)buf, 10, "%d\n",
 					msd.dstat.auto_brightness);
 	pr_info("auto_brightness: %d\n", *buf);
 
@@ -814,6 +813,10 @@
 			cmd_size = display_blank_cmd.num_of_cmds;
 			break;
 		case PANEL_BRIGHT_CTRL:
+			if(msd.mfd->blank_mode != 0){
+				pr_err("%s : panel is off state!!\n", __func__);
+				goto panel_power_off;
+			}
 			cmd_desc = brightness_cmds.cmd_desc;
 			cmd_size = make_brightcontrol_set(msd.dstat.bright_level);
 			/* Single Tx use for DSI_VIDEO_MODE Only */
@@ -850,6 +853,10 @@
 			break;
 #if defined(AUTO_BRIGHTNESS_CABC_FUNCTION)
 		case PANEL_CABC_ENABLE:
+			if(msd.mfd->blank_mode != 0){
+				pr_err("%s : panel is off state!!\n", __func__);
+				goto panel_power_off;
+			}
 			cmd_desc = cabc_on_cmds.cmd_desc;
 			cmd_size = cabc_on_cmds.num_of_cmds;
 			break;
@@ -902,7 +909,7 @@
 
 unknown_command:
 	LCD_DEBUG("Undefined command\n");
-
+panel_power_off:
 	if (lock)
 		mutex_unlock(&msd.lock);
 
@@ -916,15 +923,42 @@
 		pr_err("%s: No panel on! %d\n", __func__, enable);
 		return;
 	}
-
+/*
 	if(enable)
 		mipi_samsung_disp_send_cmd(PANEL_TOUCHSENSING_ON, true);
 	else
 		mipi_samsung_disp_send_cmd(PANEL_TOUCHSENSING_OFF, true);
+*/
 
 	pr_info("%s --\n", __func__);
 }
 
+void mdss_dsi_panel_hsync_onoff(bool onoff)
+{
+	struct msm_fb_data_type *mfd = msd.mfd;
+
+	if (mfd && mfd->panel_power_on/* && msd.dstat.on*/)
+	{
+		if( onoff )
+		{
+			msleep(30);
+			mipi_samsung_disp_send_cmd(PANEL_HSYNC_ON, true);
+			pr_info("%s : HSYNC On\n",__func__);
+		}
+		else
+		{
+			mipi_samsung_disp_send_cmd(PANEL_HSYNC_OFF, true);
+			msleep(10);
+			pr_info("%s : HSYNC Off\n",__func__);
+		}
+	}
+	else
+		pr_err("%s : panel power off\n",__func__);
+
+	return;
+}
+EXPORT_SYMBOL(mdss_dsi_panel_hsync_onoff);
+
 static int mdss_dsi_panel_registered(struct mdss_panel_data *pdata)
 {
 	struct mdss_dsi_ctrl_pdata *ctrl_pdata = NULL;
@@ -1191,6 +1225,87 @@
 	return -EINVAL;
 
 }
+static int mdss_dsi_parse_dcs_cmds(struct device_node *np,
+		struct dsi_panel_cmds *pcmds, char *cmd_key, char *link_key)
+{
+	const char *data;
+	int blen = 0, len;
+	char *buf, *bp;
+	struct dsi_ctrl_hdr *dchdr;
+	int i, cnt;
+
+	data = of_get_property(np, cmd_key, &blen);
+	if (!data) {
+		pr_err("%s: failed, key=%s\n", __func__, cmd_key);
+		return -ENOMEM;
+	}
+
+	buf = kzalloc(sizeof(char) * blen, GFP_KERNEL);
+	if (!buf)
+		return -ENOMEM;
+
+	memcpy(buf, data, blen);
+
+	/* scan dcs commands */
+	bp = buf;
+	len = blen;
+	cnt = 0;
+	while (len > sizeof(*dchdr)) {
+		dchdr = (struct dsi_ctrl_hdr *)bp;
+		dchdr->dlen = ntohs(dchdr->dlen);
+		if (dchdr->dlen > len) {
+			pr_err("%s: dtsi cmd=%x error, len=%d",
+				__func__, dchdr->dtype, dchdr->dlen);
+			return -ENOMEM;
+		}
+		bp += sizeof(*dchdr);
+		len -= sizeof(*dchdr);
+		bp += dchdr->dlen;
+		len -= dchdr->dlen;
+		cnt++;
+	}
+
+	if (len != 0) {
+		pr_err("%s: dcs_cmd=%x len=%d error!",
+				__func__, buf[0], blen);
+		kfree(buf);
+		return -ENOMEM;
+	}
+
+	pcmds->cmds = kzalloc(cnt * sizeof(struct dsi_cmd_desc),
+						GFP_KERNEL);
+	if (!pcmds->cmds){
+		kfree(buf);
+		return -ENOMEM;
+	}
+
+	pcmds->cmd_cnt = cnt;
+	pcmds->buf = buf;
+	pcmds->blen = blen;
+
+	bp = buf;
+	len = blen;
+	for (i = 0; i < cnt; i++) {
+		dchdr = (struct dsi_ctrl_hdr *)bp;
+		len -= sizeof(*dchdr);
+		bp += sizeof(*dchdr);
+		pcmds->cmds[i].dchdr = *dchdr;
+		pcmds->cmds[i].payload = bp;
+		bp += dchdr->dlen;
+		len -= dchdr->dlen;
+	}
+
+
+	data = of_get_property(np, link_key, NULL);
+	if (!strncmp(data, "dsi_hs_mode", 11))
+		pcmds->link_state = DSI_HS_MODE;
+	else
+		pcmds->link_state = DSI_LP_MODE;
+	pr_debug("%s: dcs_cmd=%x len=%d, cmd_cnt=%d link_state=%d\n", __func__,
+		pcmds->buf[0], pcmds->blen, pcmds->cmd_cnt, pcmds->link_state);
+
+	return 0;
+}
 
 static int mdss_panel_parse_dt(struct device_node *np,
 					struct mdss_dsi_ctrl_pdata *ctrl_pdata)
@@ -1200,7 +1315,6 @@
 	int rc, i, len;
 	const char *data;
 	static const char *bl_ctrl_type, *pdest;
-	static const char *on_cmds_state, *off_cmds_state;
 	struct mdss_panel_info *pinfo = &(ctrl_pdata->panel_data.panel_info);
 	bool fbc_enabled = false;
 
@@ -1308,6 +1422,9 @@
 	pinfo->bl_max = (!rc ? res[1] : 255);
 	ctrl_pdata->bklt_max = pinfo->bl_max;
 
+	rc = of_property_read_u32(np, "qcom,mdss-brightness-max-level", &tmp);
+	pinfo->brightness_max = (!rc ? tmp : MDSS_MAX_BL_BRIGHTNESS);
+
 	rc = of_property_read_u32(np, "qcom,mdss-pan-dsi-mode", &tmp);
 	pinfo->mipi.mode = (!rc ? tmp : DSI_VIDEO_MODE);
 
@@ -1500,28 +1617,11 @@
 			pinfo->bpp;
 	}
 
-	on_cmds_state = of_get_property(np,
-				"qcom,on-cmds-dsi-state", NULL);
-	if (!strncmp(on_cmds_state, "DSI_LP_MODE", 11)) {
-		ctrl_pdata->dsi_on_state = DSI_LP_MODE;
-	} else if (!strncmp(on_cmds_state, "DSI_HS_MODE", 11)) {
-		ctrl_pdata->dsi_on_state = DSI_HS_MODE;
-	} else {
-		pr_debug("%s: ON cmds state not specified. Set Default\n",
-							__func__);
-		ctrl_pdata->dsi_on_state = DSI_LP_MODE;
-	}
+	mdss_dsi_parse_dcs_cmds(np, &ctrl_pdata->on_cmds,
+		"qcom,panel-on-cmds", "qcom,on-cmds-dsi-state");
 
-	off_cmds_state = of_get_property(np, "qcom,off-cmds-dsi-state", NULL);
-	if (!strncmp(off_cmds_state, "DSI_LP_MODE", 11)) {
-		ctrl_pdata->dsi_off_state = DSI_LP_MODE;
-	} else if (!strncmp(off_cmds_state, "DSI_HS_MODE", 11)) {
-		ctrl_pdata->dsi_off_state = DSI_HS_MODE;
-	} else {
-		pr_debug("%s: ON cmds state not specified. Set Default\n",
-							__func__);
-		ctrl_pdata->dsi_off_state = DSI_LP_MODE;
-	}
+	mdss_dsi_parse_dcs_cmds(np, &ctrl_pdata->off_cmds,
+		"qcom,panel-off-cmds", "qcom,off-cmds-dsi-state");
 
 	mdss_samsung_parse_panel_cmd(np, &display_qcom_on_cmds,
 				"qcom,panel-on-cmds");
diff -Nur a/drivers/video/msm/mdss/mdss_jdi_dsi_panel.h b/drivers/video/msm/mdss/mdss_jdi_dsi_panel.h
--- a/drivers/video/msm/mdss/mdss_jdi_dsi_panel.h	2016-01-10 16:25:37.427141000 -0500
+++ b/drivers/video/msm/mdss/mdss_jdi_dsi_panel.h	2015-12-01 05:57:13.000000000 -0500
@@ -132,4 +132,5 @@
 
 #endif
 void mdss_dsi_cmds_send(struct mdss_dsi_ctrl_pdata *ctrl, struct dsi_cmd_desc *cmds, int cnt, int flag);
-
+static struct mipi_samsung_driver_data msd;
+extern int mipi_samsung_cabc_onoff ( int cabc_set );
\ No newline at end of file
diff -Nur a/drivers/video/msm/mdss/mdss_magna_octa_video_wxga_dual_panel.c b/drivers/video/msm/mdss/mdss_magna_octa_video_wxga_dual_panel.c
--- a/drivers/video/msm/mdss/mdss_magna_octa_video_wxga_dual_panel.c	2016-01-10 16:25:37.427141000 -0500
+++ b/drivers/video/msm/mdss/mdss_magna_octa_video_wxga_dual_panel.c	2015-12-01 05:57:13.000000000 -0500
@@ -1192,7 +1192,7 @@
 			if (msd.dstat.bright_level)
 				msd.dstat.recent_bright_level = msd.dstat.bright_level;
 #if defined(HBM_RE)
-			if (msd.dstat.auto_brightness == 6) {
+			if (msd.dstat.auto_brightness >= 6 && msd.dstat.bright_level == 255) {
 				cmd_size = make_brightcontrol_hbm_set(msd.dstat.bright_level);
 				msd.dstat.hbm_mode = 1;
 			} else {
@@ -1935,6 +1935,87 @@
 	return -EINVAL;
 
 }
+static int mdss_dsi_parse_dcs_cmds(struct device_node *np,
+		struct dsi_panel_cmds *pcmds, char *cmd_key, char *link_key)
+{
+	const char *data;
+	int blen = 0, len;
+	char *buf, *bp;
+	struct dsi_ctrl_hdr *dchdr;
+	int i, cnt;
+
+	data = of_get_property(np, cmd_key, &blen);
+	if (!data) {
+		pr_err("%s: failed, key=%s\n", __func__, cmd_key);
+		return -ENOMEM;
+	}
+
+	buf = kzalloc(sizeof(char) * blen, GFP_KERNEL);
+	if (!buf)
+		return -ENOMEM;
+
+	memcpy(buf, data, blen);
+
+	/* scan dcs commands */
+	bp = buf;
+	len = blen;
+	cnt = 0;
+	while (len > sizeof(*dchdr)) {
+		dchdr = (struct dsi_ctrl_hdr *)bp;
+		dchdr->dlen = ntohs(dchdr->dlen);
+		if (dchdr->dlen > len) {
+			pr_err("%s: dtsi cmd=%x error, len=%d",
+				__func__, dchdr->dtype, dchdr->dlen);
+			return -ENOMEM;
+		}
+		bp += sizeof(*dchdr);
+		len -= sizeof(*dchdr);
+		bp += dchdr->dlen;
+		len -= dchdr->dlen;
+		cnt++;
+	}
+
+	if (len != 0) {
+		pr_err("%s: dcs_cmd=%x len=%d error!",
+				__func__, buf[0], blen);
+		kfree(buf);
+		return -ENOMEM;
+	}
+
+	pcmds->cmds = kzalloc(cnt * sizeof(struct dsi_cmd_desc),
+						GFP_KERNEL);
+	if (!pcmds->cmds){
+		kfree(buf);
+		return -ENOMEM;
+	}
+
+	pcmds->cmd_cnt = cnt;
+	pcmds->buf = buf;
+	pcmds->blen = blen;
+
+	bp = buf;
+	len = blen;
+	for (i = 0; i < cnt; i++) {
+		dchdr = (struct dsi_ctrl_hdr *)bp;
+		len -= sizeof(*dchdr);
+		bp += sizeof(*dchdr);
+		pcmds->cmds[i].dchdr = *dchdr;
+		pcmds->cmds[i].payload = bp;
+		bp += dchdr->dlen;
+		len -= dchdr->dlen;
+	}
+
+
+	data = of_get_property(np, link_key, NULL);
+	if (!strncmp(data, "dsi_hs_mode", 11))
+		pcmds->link_state = DSI_HS_MODE;
+	else
+		pcmds->link_state = DSI_LP_MODE;
+	pr_debug("%s: dcs_cmd=%x len=%d, cmd_cnt=%d link_state=%d\n", __func__,
+		pcmds->buf[0], pcmds->blen, pcmds->cmd_cnt, pcmds->link_state);
+
+	return 0;
+}
 
 static int mdss_panel_parse_dt(struct device_node *np,
 					struct mdss_dsi_ctrl_pdata *ctrl_pdata)
@@ -1944,7 +2025,6 @@
 	int rc, i, len;
 	const char *data;
 	static const char *bl_ctrl_type, *pdest;
-	static const char *on_cmds_state, *off_cmds_state;
 	struct mdss_panel_info *pinfo = &(ctrl_pdata->panel_data.panel_info);
 	bool fbc_enabled = false;
 	struct mdss_dsi_phy_ctrl phy_params;
@@ -2268,29 +2348,6 @@
 	rc = of_property_read_u32(np, "qcom,mdss-pan-clk-rate", &tmp);
 		pinfo->clk_rate = (!rc ? tmp : 0);
 
-	on_cmds_state = of_get_property(np,
-				"qcom,on-cmds-dsi-state", NULL);
-	if (!strncmp(on_cmds_state, "DSI_LP_MODE", 11)) {
-		ctrl_pdata->dsi_on_state = DSI_LP_MODE;
-	} else if (!strncmp(on_cmds_state, "DSI_HS_MODE", 11)) {
-		ctrl_pdata->dsi_on_state = DSI_HS_MODE;
-	} else {
-		pr_debug("%s: ON cmds state not specified. Set Default\n",
-							__func__);
-		ctrl_pdata->dsi_on_state = DSI_LP_MODE;
-	}
-
-	off_cmds_state = of_get_property(np, "qcom,off-cmds-dsi-state", NULL);
-	if (!strncmp(off_cmds_state, "DSI_LP_MODE", 11)) {
-		ctrl_pdata->dsi_off_state = DSI_LP_MODE;
-	} else if (!strncmp(off_cmds_state, "DSI_HS_MODE", 11)) {
-		ctrl_pdata->dsi_off_state = DSI_HS_MODE;
-	} else {
-		pr_debug("%s: ON cmds state not specified. Set Default\n",
-							__func__);
-		ctrl_pdata->dsi_off_state = DSI_LP_MODE;
-	}
-
 #if defined(CONFIG_ESD_ERR_FG_RECOVERY)
 	err_fg_gpio = of_get_named_gpio(np, "qcom,esd-irq-gpio", 0);
 	if (!gpio_is_valid(err_fg_gpio)) {
@@ -2305,6 +2362,11 @@
 			}
 		}
 #endif
+	mdss_dsi_parse_dcs_cmds(np, &ctrl_pdata->on_cmds,
+		"qcom,panel-display-on-cmds", "qcom,on-cmds-dsi-state");
+
+	mdss_dsi_parse_dcs_cmds(np, &ctrl_pdata->off_cmds,
+		"qcom,panel-display-off-cmds", "qcom,off-cmds-dsi-state");
 
 	mdss_samsung_parse_panel_cmd(np, &display_on_seq,
 				"qcom,panel-display-on-seq");
diff -Nur a/drivers/video/msm/mdss/mdss_mdp.c b/drivers/video/msm/mdss/mdss_mdp.c
--- a/drivers/video/msm/mdss/mdss_mdp.c	2016-01-10 16:25:37.427141000 -0500
+++ b/drivers/video/msm/mdss/mdss_mdp.c	2015-12-01 05:57:13.000000000 -0500
@@ -17,8 +17,6 @@
 #define pr_fmt(fmt)	"%s: " fmt, __func__
 
 #include <linux/clk.h>
-#include <mach/clk-provider.h>
-
 #include <linux/debugfs.h>
 #include <linux/delay.h>
 #include <linux/hrtimer.h>
@@ -180,6 +178,43 @@
 	return rc;
 }
 
+static irqreturn_t mdss_irq_handler(int irq, void *ptr)
+{
+	struct mdss_data_type *mdata = ptr;
+	u32 intr = MDSS_MDP_REG_READ(MDSS_REG_HW_INTR_STATUS);
+
+#if 0//defined (CONFIG_FB_MSM_MDSS_DSI_DBG)
+	xlog(__func__,  intr, (u32) mdata, 0, 0, 0, 0xffff);
+#endif
+
+	if (!mdata)
+		return IRQ_NONE;
+
+	mdata->irq_buzy = true;
+
+	if (intr & MDSS_INTR_MDP) {
+		spin_lock(&mdp_lock);
+		mdss_irq_dispatch(MDSS_HW_MDP, irq, ptr);
+		spin_unlock(&mdp_lock);
+	}
+
+	if (intr & MDSS_INTR_DSI0)
+		mdss_irq_dispatch(MDSS_HW_DSI0, irq, ptr);
+
+	if (intr & MDSS_INTR_DSI1)
+		mdss_irq_dispatch(MDSS_HW_DSI1, irq, ptr);
+
+	if (intr & MDSS_INTR_EDP)
+		mdss_irq_dispatch(MDSS_HW_EDP, irq, ptr);
+
+	if (intr & MDSS_INTR_HDMI)
+		mdss_irq_dispatch(MDSS_HW_HDMI, irq, ptr);
+
+	mdata->irq_buzy = false;
+
+	return IRQ_HANDLED;
+}
+
 int mdss_register_irq(struct mdss_hw *hw)
 {
 	unsigned long irq_flags;
@@ -610,56 +645,6 @@
 	return NULL;
 }
 
-static irqreturn_t mdss_irq_handler(int irq, void *ptr)
-{
-	struct mdss_data_type *mdata = ptr;
-	u32 intr = 0;
-
-	if (!mdata)
-		return IRQ_NONE;
-
-	 if (mdata) {
-		 struct clk *clk = mdss_mdp_get_clk(MDSS_CLK_AHB);
-		 if (clk) {
-			 if (clk->prepare_count == 0 || clk->count == 0) {
-				 pr_err("[QC] ERROR : MDSS_CLK_AHB is not on, prepare_cnt:%d, count:%d\n", clk->prepare_count, clk->count);
-
-				 return IRQ_NONE;
-			 }
-		 }
-	 }
-
-	intr = MDSS_MDP_REG_READ(MDSS_REG_HW_INTR_STATUS);
-
-#if defined (CONFIG_FB_MSM_MDSS_DSI_DBG)
-	xlog(__func__,	intr, (u32) mdata, 0, 0, 0, 0xffff);
-#endif
-
-	mdata->irq_buzy = true;
-
-	if (intr & MDSS_INTR_MDP) {
-		spin_lock(&mdp_lock);
-		mdss_irq_dispatch(MDSS_HW_MDP, irq, ptr);
-		spin_unlock(&mdp_lock);
-	}
-
-	if (intr & MDSS_INTR_DSI0)
-		mdss_irq_dispatch(MDSS_HW_DSI0, irq, ptr);
-
-	if (intr & MDSS_INTR_DSI1)
-		mdss_irq_dispatch(MDSS_HW_DSI1, irq, ptr);
-
-	if (intr & MDSS_INTR_EDP)
-		mdss_irq_dispatch(MDSS_HW_EDP, irq, ptr);
-
-	if (intr & MDSS_INTR_HDMI)
-		mdss_irq_dispatch(MDSS_HW_HDMI, irq, ptr);
-
-	mdata->irq_buzy = false;
-
-	return IRQ_HANDLED;
-}
-
 static int mdss_mdp_clk_update(u32 clk_idx, u32 enable)
 {
 	int ret = -ENODEV;
@@ -1446,7 +1431,8 @@
 	if (rc)
 		pr_err("mdss_register_irq failed.\n");
 
-#if defined(CONFIG_FB_MSM_EDP_SAMSUNG)
+	/* Below code is not required now because there is mo Call to turn off the mdp clock */
+#if 0 // defined(CONFIG_FB_MSM_EDP_SAMSUNG)
 	if (mdss_mdp_scan_pipes()) {
 		mdss_mdp_bus_scale_set_quota(AB_QUOTA, IB_QUOTA);
 		/* keep clock on if continuous splash from lk */
@@ -2422,6 +2408,8 @@
 		"qcom,mdss-has-wfd-blk");
 	mdata->has_no_lut_read = of_property_read_bool(pdev->dev.of_node,
 		"qcom,mdss-no-lut-read");
+	mdata->idle_pc_enabled = of_property_read_bool(pdev->dev.of_node,
+		"qcom,mdss-idle-power-collapse-enabled");
 	prop = of_find_property(pdev->dev.of_node, "batfet-supply", NULL);
 	mdata->batfet_required = prop ? true : false;
 	rc = of_property_read_u32(pdev->dev.of_node,
@@ -2726,7 +2714,7 @@
 		pr_debug("Enable MDP FS\n");
 		if (!mdata->fs_ena) {
 			regulator_enable(mdata->fs);
-			if (!mdata->ulps) {
+			if (!mdata->idle_pc) {
 				mdss_mdp_cx_ctrl(mdata, true);
 				mdss_mdp_batfet_ctrl(mdata, true);
 			}
@@ -2736,7 +2724,7 @@
 		pr_debug("Disable MDP FS\n");
 		if (mdata->fs_ena) {
 			regulator_disable(mdata->fs);
-			if (!mdata->ulps) {
+			if (!mdata->idle_pc) {
 				mdss_mdp_cx_ctrl(mdata, false);
 				mdss_mdp_batfet_ctrl(mdata, false);
 			}
@@ -2746,17 +2734,16 @@
 }
 
 /**
- * mdss_mdp_footswitch_ctrl_ulps() - MDSS GDSC control with ULPS feature
+ * mdss_mdp_footswitch_ctrl_idle_pc() - MDSS GDSC control with idle power collapse
  * @on: 1 to turn on footswitch, 0 to turn off footswitch
  * @dev: framebuffer device node
  *
  * MDSS GDSC can be voted off during idle-screen usecase for MIPI DSI command
- * mode displays with Ultra-Low Power State (ULPS) feature enabled. Upon
- * subsequent frame update, MDSS GDSC needs to turned back on and hw state
- * needs to be restored. It returns error if footswitch control API
- * fails.
+ * mode displays. Upon subsequent frame update, MDSS GDSC needs to turned back
+ * on and hw state needs to be restored. It returns error if footswitch control
+ * API fails.
  */
-int mdss_mdp_footswitch_ctrl_ulps(int on, struct device *dev)
+int mdss_mdp_footswitch_ctrl_idle_pc(int on, struct device *dev)
 {
 	struct mdss_data_type *mdata = mdss_mdp_get_mdata();
 	int rc = 0;
@@ -2770,10 +2757,10 @@
 			return rc;
 		}
 		mdss_hw_init(mdata);
-		mdata->ulps = false;
+		mdata->idle_pc = false;
 		mdss_iommu_ctrl(0);
 	} else {
-		mdata->ulps = true;
+		mdata->idle_pc = true;
 		pm_runtime_put_sync(dev);
 	}
 
@@ -2866,7 +2853,10 @@
 		return -ENODEV;
 
 	dev_dbg(dev, "pm_runtime: resuming...\n");
-	device_for_each_child(dev, &device_on, mdss_fb_suspres_panel);
+
+	/* do not resume panels when coming out of idle power collapse */
+	if (!mdata->idle_pc)
+		device_for_each_child(dev, &device_on, mdss_fb_suspres_panel);
 	mdss_mdp_footswitch_ctrl(mdata, true);
 
 	return 0;
@@ -2895,7 +2885,10 @@
 		pr_err("MDP suspend failed\n");
 		return -EBUSY;
 	}
-	device_for_each_child(dev, &device_on, mdss_fb_suspres_panel);
+
+	/* do not suspend panels when going in to idle power collapse */
+	if (!mdata->idle_pc)
+		device_for_each_child(dev, &device_on, mdss_fb_suspres_panel);
 	mdss_mdp_footswitch_ctrl(mdata, false);
 
 	return 0;
diff -Nur a/drivers/video/msm/mdss/mdss_mdp_ctl.c b/drivers/video/msm/mdss/mdss_mdp_ctl.c
--- a/drivers/video/msm/mdss/mdss_mdp_ctl.c	2016-01-10 16:25:37.428141000 -0500
+++ b/drivers/video/msm/mdss/mdss_mdp_ctl.c	2015-12-01 05:57:16.000000000 -0500
@@ -366,7 +366,7 @@
 	 * no need to account for these lines in MDP clock or request bus
 	 * bandwidth to fetch them.
 	 */
-	src_h = src.h >> pipe->vert_deci;
+	src_h = DECIMATED_DIMENSION(src.h, pipe->vert_deci);
 
 	quota = fps * src.w * src_h;
 
@@ -398,7 +398,13 @@
 	} else {
 		perf->bw_overlap = (quota / dst.h) * v_total;
 	}
-
+#if !defined(CONFIG_MACH_VIENNA) && !defined(CONFIG_SEC_MILLET_PROJECT) && !defined(CONFIG_MACH_LT03) && !defined(CONFIG_MACH_V2_LTE) && !defined(CONFIG_SEC_K_PROJECT)
+     /* The following change has been taken from CL 2767750. The bw has been increased as a fix
+      * for underrun during UHD video play cases. */
+	if ( ((pipe->src.h * pipe->src.w) / (pipe->dst.h * pipe->dst.w)) > 6) {
+		perf->bw_overlap = perf->bw_overlap * 2;
+	}
+#endif
 	if (apply_fudge)
 		perf->mdp_clk_rate = mdss_mdp_clk_fudge_factor(mixer, rate);
 	else
@@ -617,6 +623,29 @@
 	return vbp_max;
 }
 
+static bool mdss_mdp_video_mode_intf_connected(struct mdss_mdp_ctl *ctl)
+{
+	int i;
+	struct mdss_data_type *mdata;
+
+	if (!ctl || !ctl->mdata)
+		return 0;
+
+	mdata = ctl->mdata;
+	for (i = 0; i < mdata->nctl; i++) {
+		struct mdss_mdp_ctl *ctl = mdata->ctl_off + i;
+
+		if (ctl->is_video_mode && ctl->power_on) {
+			pr_debug("video interface connected ctl:%d\n",
+			ctl->num);
+			return true;
+		}
+	}
+
+	return false;
+}
+
+
 static void __mdss_mdp_perf_calc_ctl_helper(struct mdss_mdp_ctl *ctl,
 		struct mdss_mdp_perf_params *perf,
 		struct mdss_mdp_pipe **left_plist, int left_cnt,
@@ -678,7 +707,8 @@
 {
 	struct mdss_data_type *mdata = ctl->mdata;
 	struct mdss_mdp_perf_params perf;
-	u32 bw, threshold;
+	u32 bw, threshold, i;
+	u64 bw_sum_of_intfs = 0;
 
 	/* we only need bandwidth check on real-time clients (interfaces) */
 	if (ctl->intf_type == MDSS_MDP_NO_INTF)
@@ -687,11 +717,21 @@
 	__mdss_mdp_perf_calc_ctl_helper(ctl, &perf,
 			left_plist, left_cnt, right_plist, right_cnt);
 
+	ctl->bw_pending = perf.bw_ctl;
+ 
+	for (i = 0; i < mdata->nctl; i++) {
+	struct mdss_mdp_ctl *temp = mdata->ctl_off + i;
+	if (temp->power_on && (temp->intf_type != MDSS_MDP_NO_INTF))
+	bw_sum_of_intfs += temp->bw_pending;
+	}
+
 	/* convert bandwidth to kb */
-	bw = DIV_ROUND_UP_ULL(perf.bw_ctl, 1000);
+	bw = DIV_ROUND_UP_ULL(bw_sum_of_intfs, 1000);
 	pr_debug("calculated bandwidth=%uk\n", bw);
 
-	threshold = ctl->is_video_mode ? mdata->max_bw_low : mdata->max_bw_high;
+	threshold = (ctl->is_video_mode ||
+	mdss_mdp_video_mode_intf_connected(ctl)) ?
+	mdata->max_bw_low : mdata->max_bw_high;
 	if (bw > threshold) {
 		pr_debug("exceeds bandwidth: %ukb > %ukb\n", bw, threshold);
 		return -E2BIG;
@@ -712,13 +752,13 @@
 			left_plist, (left_plist ? MDSS_MDP_MAX_STAGE : 0),
 			right_plist, (right_plist ? MDSS_MDP_MAX_STAGE : 0));
 
-	if (ctl->is_video_mode) {
-		if (perf->bw_overlap > perf->bw_prefill)
-			perf->bw_ctl = apply_fudge_factor(perf->bw_ctl,
-				&mdss_res->ib_factor_overlap);
-		else
-			perf->bw_ctl = apply_fudge_factor(perf->bw_ctl,
-				&mdss_res->ib_factor);
+	if (ctl->is_video_mode || ((ctl->intf_type != MDSS_MDP_NO_INTF) &&
+		mdss_mdp_video_mode_intf_connected(ctl))) {
+		perf->bw_ctl =
+			max(apply_fudge_factor(perf->bw_overlap,
+				&mdss_res->ib_factor_overlap),
+			apply_fudge_factor(perf->bw_prefill,
+				&mdss_res->ib_factor));
 	}
 	pr_debug("ctl=%d clk_rate=%u\n", ctl->num, perf->mdp_clk_rate);
 	pr_debug("bw_overlap=%llu bw_prefill=%llu prefill_bytes=%d\n",
@@ -2617,7 +2657,10 @@
 	int mixer1_changed, mixer2_changed;
 	int ret = 0;
 	bool is_bw_released;
-
+	
+#if defined(CONFIG_FB_MSM_CAMERA_CSC)
+	struct mdss_overlay_private *mdp5_data = NULL;
+#endif
 	if (!ctl) {
 		pr_err("display function not set\n");
 		return -ENODEV;
@@ -2690,7 +2733,7 @@
 	if (ctl->wait_pingpong)
 		ctl->wait_pingpong(ctl, NULL);
 	ATRACE_END("wait_pingpong");
-
+	
 	ctl->roi_bkup.w = ctl->roi.w;
 	ctl->roi_bkup.h = ctl->roi.h;
 
@@ -2709,6 +2752,31 @@
 	wmb();
 	ctl->flush_bits = 0;
 
+#if defined(CONFIG_FB_MSM_CAMERA_CSC)
+	if(ctl->mfd)
+		mdp5_data = mfd_to_mdp5_data(ctl->mfd);
+
+	if (mdp5_data) {
+	  		mutex_lock(&mdp5_data->list_lock);
+			if (csc_change == 1) {
+		  			struct mdss_mdp_pipe *pipe, *next;
+					if (ctl->wait_video_pingpong) {
+							mdss_mdp_irq_enable(MDSS_MDP_IRQ_PING_PONG_COMP, ctl->num);
+			  				ctl->wait_video_pingpong(ctl, NULL);
+					}
+					list_for_each_entry_safe(pipe, next, &mdp5_data->pipes_used, list) {
+		  				if (pipe->type == MDSS_MDP_PIPE_TYPE_VIG) {
+		  					pr_info(" mdss_mdp_csc_setup start\n");
+							mdss_mdp_csc_setup(MDSS_MDP_BLOCK_SSPP, pipe->num, 1,
+				 									MDSS_MDP_CSC_YUV2RGB);
+							csc_change = 0;
+						}
+					}
+			}
+			mutex_unlock(&mdp5_data->list_lock);
+	}
+
+#endif
 	mdss_mdp_xlog_mixer_reg(ctl);
 
 	if (ctl->display_fnc)
diff -Nur a/drivers/video/msm/mdss/mdss_mdp.h b/drivers/video/msm/mdss/mdss_mdp.h
--- a/drivers/video/msm/mdss/mdss_mdp.h	2016-01-10 16:25:37.427141000 -0500
+++ b/drivers/video/msm/mdss/mdss_mdp.h	2015-12-01 05:57:13.000000000 -0500
@@ -218,6 +218,7 @@
 	int (*display_fnc) (struct mdss_mdp_ctl *ctl, void *arg);
 	int (*wait_fnc) (struct mdss_mdp_ctl *ctl, void *arg);
 	int (*wait_pingpong) (struct mdss_mdp_ctl *ctl, void *arg);
+	int (*wait_video_pingpong) (struct mdss_mdp_ctl *ctl, void *arg);
 	u32 (*read_line_cnt_fnc) (struct mdss_mdp_ctl *);
 	int (*add_vsync_handler) (struct mdss_mdp_ctl *,
 					struct mdss_mdp_vsync_handler *);
@@ -230,6 +231,7 @@
 
 	void *priv_data;
 	u32 wb_type;
+	u64 bw_pending;
 };
 
 struct mdss_mdp_mixer {
@@ -333,7 +335,6 @@
 	u32 last_bl;
 	u32 bl_data;
 	u32 calc_itr;
-	uint32_t bl_bright_shift;
 	uint32_t bl_lin[AD_BL_LIN_LEN];
 	uint32_t bl_lin_inv[AD_BL_LIN_LEN];
 	uint32_t bl_att_lut[AD_BL_ATT_LUT_LEN];
@@ -633,6 +634,7 @@
 
 int mdss_mdp_pp_init(struct device *dev);
 void mdss_mdp_pp_term(struct device *dev);
+int mdss_mdp_pp_overlay_init(struct msm_fb_data_type *mfd);
 
 int mdss_mdp_pp_resume(struct mdss_mdp_ctl *ctl, u32 mixer_num);
 
@@ -750,7 +752,7 @@
 int mdss_mdp_wb_set_secure(struct msm_fb_data_type *mfd, int enable);
 int mdss_mdp_wb_get_secure(struct msm_fb_data_type *mfd, uint8_t *enable);
 void mdss_mdp_ctl_restore(struct mdss_mdp_ctl *ctl);
-int mdss_mdp_footswitch_ctrl_ulps(int on, struct device *dev);
+int mdss_mdp_footswitch_ctrl_idle_pc(int on, struct device *dev);
 
 int mdss_mdp_pipe_program_pixel_extn(struct mdss_mdp_pipe *pipe);
 #define mfd_to_mdp5_data(mfd) (mfd->mdp.private1)
diff -Nur a/drivers/video/msm/mdss/mdss_mdp_intf_cmd.c b/drivers/video/msm/mdss/mdss_mdp_intf_cmd.c
--- a/drivers/video/msm/mdss/mdss_mdp_intf_cmd.c	2016-01-10 16:25:37.428141000 -0500
+++ b/drivers/video/msm/mdss/mdss_mdp_intf_cmd.c	2015-12-01 05:57:13.000000000 -0500
@@ -46,8 +46,8 @@
 #endif
 	u32 pp_num;
 	u8 ref_cnt;
-	struct completion pp_comp;
 	struct completion stop_comp;
+	wait_queue_head_t pp_waitq;
 	struct list_head vsync_handlers;
 	int panel_on;
 	atomic_t koff_cnt;
@@ -56,7 +56,6 @@
 	int rdptr_enabled;
 	struct mutex clk_mtx;
 	spinlock_t clk_lock;
-	spinlock_t koff_lock;
 #if defined(CONFIG_FB_MSM_MIPI_SAMSUNG_OCTA_CMD_WQHD_PT_PANEL)
 	spinlock_t te_lock;
 #endif
@@ -73,12 +72,16 @@
 	u32 vclk_line;	/* vsync clock per line */
 	struct mdss_panel_recovery recovery;
 	bool ulps;
+	struct mdss_mdp_cmd_ctx *sync_ctx; /* for partial update */
+	u32 pp_timeout_report_cnt;
 };
 
 struct mdss_mdp_cmd_ctx mdss_mdp_cmd_ctx_list[MAX_SESSIONS];
 extern char board_rev;
 int get_lcd_attached(void);
 
+static int mdss_mdp_cmd_do_notifier(struct mdss_mdp_cmd_ctx *ctx);
+
 static inline u32 mdss_mdp_cmd_line_count(struct mdss_mdp_ctl *ctl)
 {
 	struct mdss_mdp_mixer *mixer;
@@ -220,7 +223,7 @@
 	xlog(__func__, ctx->panel_ndx, atomic_read(&ctx->koff_cnt), ctx->clk_enabled, ctx->rdptr_enabled, 0, 0);
 #endif
 	mutex_lock(&ctx->clk_mtx);
-	MDSS_XLOG(ctx->pp_num, atomic_read(&ctx->koff_cnt), ctx->clk_enabled,
+	MDSS_XLOG(ctx->pp_num, ctx->koff_cnt, ctx->clk_enabled,
 						ctx->rdptr_enabled);
 	if (!ctx->clk_enabled) {
 		mdss_bus_bandwidth_ctrl(true);
@@ -269,7 +272,7 @@
 	xlog(__func__,ctx->panel_ndx, atomic_read(&ctx->koff_cnt), ctx->clk_enabled, ctx->rdptr_enabled, 0, 0);
 #endif
 	mutex_lock(&ctx->clk_mtx);
-	MDSS_XLOG(ctx->pp_num,atomic_read(&ctx->koff_cnt), ctx->clk_enabled,
+	MDSS_XLOG(ctx->pp_num, ctx->koff_cnt, ctx->clk_enabled,
 						ctx->rdptr_enabled);
 	spin_lock_irqsave(&ctx->clk_lock, flags);
 	if (!ctx->rdptr_enabled)
@@ -361,7 +364,7 @@
 	if (vsync[0] && vsync[1])
 		duration = vsync[index + add_value] - vsync[index];
 	ctl->vsync_cnt++;
-	MDSS_XLOG(0xFFFF, ctl->num, atomic_read(&ctx->koff_cnt), ctx->clk_enabled,
+	MDSS_XLOG(0xFFFF, ctl->num, ctx->koff_cnt, ctx->clk_enabled,
 				ctx->rdptr_enabled, duration);
  
 	if (duration <= 8000 || duration >= 22000)
@@ -425,7 +428,7 @@
 					}						
 #endif
 		/* keep clk on during kickoff */
-		if (ctx->rdptr_enabled == 0 && atomic_read(&ctx->koff_cnt) > 0)
+		if (ctx->rdptr_enabled == 0 && atomic_read(&ctx->koff_cnt))
 			ctx->rdptr_enabled++;
 	}
 
@@ -455,17 +458,16 @@
 
 	if (!ctx->ctl)
 		return;
-	spin_lock_irqsave(&ctx->koff_lock, flags);
-	if (atomic_read(&ctx->koff_cnt)>0) {
+	spin_lock_irqsave(&ctx->clk_lock, flags);
+	if (atomic_read(&ctx->koff_cnt)) {
 		mdss_mdp_ctl_reset(ctx->ctl);
 		pr_debug("%s: intf_num=%d\n", __func__,
 					ctx->ctl->intf_num);
 		atomic_dec(&ctx->koff_cnt);
 		mdss_mdp_irq_disable_nosync(MDSS_MDP_IRQ_PING_PONG_COMP,
 						ctx->pp_num);
-		complete_all(&ctx->pp_comp);
 	}
-	spin_unlock_irqrestore(&ctx->koff_lock, flags);
+	spin_unlock_irqrestore(&ctx->clk_lock, flags);
 }
 #if 0
 static void mdss_mdp_cmd_pingpong_recovery(struct mdss_mdp_cmd_ctx *ctx)
@@ -480,11 +482,11 @@
 	if (!ctx->ctl)
 		return;
 	spin_lock_irqsave(&ctx->clk_lock, flags);
-	if (atomic_read(&ctx->koff_cnt)>0) {
+	if (ctx->koff_cnt) {
 		mdss_mdp_ctl_reset(ctx->ctl);
 		pr_debug("%s: intf_num=%d\n", __func__,
 					ctx->ctl->intf_num);
-		atomic_dec(&ctx->koff_cnt);
+		ctx->koff_cnt--;
 		mdss_mdp_irq_disable_nosync(MDSS_MDP_IRQ_PING_PONG_COMP,
 						ctx->pp_num);
 		complete_all(&ctx->pp_comp);
@@ -516,36 +518,34 @@
 		if (tmp->enabled && tmp->cmd_post_flush)
 			tmp->vsync_handler(ctl, vsync_time);
 	}
-
-	spin_unlock(&ctx->clk_lock);
-	spin_lock(&ctx->koff_lock);
 	mdss_mdp_irq_disable_nosync(MDSS_MDP_IRQ_PING_PONG_COMP, ctx->pp_num);
 
-	complete_all(&ctx->pp_comp);
-	MDSS_XLOG(ctl->num, atomic_read(&ctx->koff_cnt), ctx->clk_enabled,
+	MDSS_XLOG(ctl->num, ctx->koff_cnt, ctx->clk_enabled,
 					ctx->rdptr_enabled);
 #if defined (CONFIG_FB_MSM_MDSS_DSI_DBG)
 	xlog(__func__, ctl->num, atomic_read(&ctx->koff_cnt), ctx->clk_enabled, ctx->rdptr_enabled, ctl->roi_bkup.w, ctl->roi_bkup.h);
 #endif
 
-	if (atomic_read(&ctx->koff_cnt) > 0) {
-		atomic_inc(&ctx->pp_done_cnt);
-		schedule_work(&ctx->pp_done_work);
-
-		atomic_dec(&ctx->koff_cnt);
-		if (atomic_read(&ctx->koff_cnt) > 0) {
+	if (atomic_add_unless(&ctx->koff_cnt, -1, 0)) {
+		if (atomic_read(&ctx->koff_cnt))
 			pr_err("%s: too many kickoffs=%d!\n", __func__,
 			       atomic_read(&ctx->koff_cnt));
-			atomic_set(&ctx->koff_cnt, 0);
+		if (mdss_mdp_cmd_do_notifier(ctx)) {
+			atomic_inc(&ctx->pp_done_cnt);
+			schedule_work(&ctx->pp_done_work);
 		}
-	} else
+		wake_up_all(&ctx->pp_waitq);
+	} else {
 		pr_err("%s: should not have pingpong interrupt!\n", __func__);
+	}
 
-	trace_mdp_cmd_pingpong_done(ctl, ctx->pp_num, atomic_read(&ctx->koff_cnt));
+	trace_mdp_cmd_pingpong_done(ctl, ctx->pp_num,
+			atomic_read(&ctx->koff_cnt));
 	pr_debug("%s: ctl_num=%d intf_num=%d ctx=%d kcnt=%d\n", __func__,
-		ctl->num, ctl->intf_num, ctx->pp_num, atomic_read(&ctx->koff_cnt));
+		ctl->num, ctl->intf_num, ctx->pp_num,
+			atomic_read(&ctx->koff_cnt));
 
-	spin_unlock(&ctx->koff_lock);
+	spin_unlock(&ctx->clk_lock);
 }
 
 static void pingpong_done_work(struct work_struct *work)
@@ -579,6 +579,7 @@
 static void __mdss_mdp_cmd_ulps_work(struct work_struct *work)
 {
 	struct delayed_work *dw = to_delayed_work(work);
+	struct mdss_data_type *mdata = mdss_mdp_get_mdata();
 	struct mdss_mdp_cmd_ctx *ctx =
 		container_of(dw, struct mdss_mdp_cmd_ctx, ulps_work);
 
@@ -595,8 +596,11 @@
 	if (!mdss_mdp_ctl_intf_event(ctx->ctl, MDSS_EVENT_DSI_ULPS_CTRL,
 		(void *)1)) {
 		ctx->ulps = true;
-		ctx->ctl->play_cnt = 0;
-		mdss_mdp_footswitch_ctrl_ulps(0, &ctx->ctl->mfd->pdev->dev);
+		if (mdata->idle_pc_enabled) {
+			ctx->ctl->play_cnt = 0;
+			mdss_mdp_footswitch_ctrl_idle_pc(0,
+					&ctx->ctl->mfd->pdev->dev);
+		}
 	}
 }
 
@@ -616,7 +620,7 @@
 		xlog(__func__, ctl->num, atomic_read(&ctx->koff_cnt), ctx->clk_enabled, ctx->rdptr_enabled, 0, 0);
 #endif
 
-	MDSS_XLOG(ctl->num, atomic_read(&ctx->koff_cnt), ctx->clk_enabled,
+	MDSS_XLOG(ctl->num, ctx->koff_cnt, ctx->clk_enabled,
 					ctx->rdptr_enabled);
 
 	spin_lock_irqsave(&ctx->clk_lock, flags);
@@ -648,10 +652,10 @@
 		return -ENODEV;
 	}
 
-	MDSS_XLOG(ctl->num, atomic_read(&ctx->koff_cnt), ctx->clk_enabled,
+	MDSS_XLOG(ctl->num, ctx->koff_cnt, ctx->clk_enabled,
 				ctx->rdptr_enabled, 0x88888);
 #if defined (CONFIG_FB_MSM_MDSS_DSI_DBG)
-	xlog(__func__, ctl->num, atomic_read(&ctx->koff_cnt), ctx->clk_enabled, ctx->rdptr_enabled, 0, 0x88888);
+		xlog(__func__, ctl->num, atomic_read(&ctx->koff_cnt), ctx->clk_enabled, ctx->rdptr_enabled, 0, 0x88888);
 #endif
 
 	spin_lock_irqsave(&ctx->clk_lock, flags);
@@ -713,9 +717,7 @@
 	struct mdss_mdp_cmd_ctx *ctx;
 	struct mdss_panel_data *pdata;
 	unsigned long flags;
-	int need_wait = 0;
 	int rc = 0;
-	static int recovery_cnt;
 
 	ctx = (struct mdss_mdp_cmd_ctx *) ctl->priv_data;
 	if (!ctx) {
@@ -725,40 +727,47 @@
 
 	pdata = ctl->panel_data;
 
-	spin_lock_irqsave(&ctx->koff_lock, flags);
-	if (atomic_read(&ctx->koff_cnt) > 0)
-		need_wait = 1;
-	spin_unlock_irqrestore(&ctx->koff_lock, flags);
-
-#if defined (CONFIG_FB_MSM_MDSS_DSI_DBG)
-	xlog(__func__, ctl->num, atomic_read(&ctx->koff_cnt), ctx->clk_enabled, ctx->rdptr_enabled, ctl->roi_bkup.w, ctl->roi_bkup.h);
-#endif
-
 	ctl->roi_bkup.w = ctl->width;
 	ctl->roi_bkup.h = ctl->height;
 
-	MDSS_XLOG(ctl->num, atomic_read(&ctx->koff_cnt), ctx->clk_enabled,
+	MDSS_XLOG(ctl->num, ctx->koff_cnt, ctx->clk_enabled,
 			ctx->rdptr_enabled, ctl->roi_bkup.w,
 			ctl->roi_bkup.h);
 
-	pr_debug("%s: need_wait=%d  intf_num=%d ctx=%p\n",
-			__func__, need_wait, ctl->intf_num, ctx);
+	pr_debug("%s: intf_num=%d ctx=%p koff_cnt=%d\n", __func__,
+			ctl->intf_num, ctx, atomic_read(&ctx->koff_cnt));
 
-	if (need_wait) {
-#if defined(CONFIG_FB_MSM_MIPI_SAMSUNG_OCTA_CMD_WQXGA_S6E3HA1_PT_PANEL)
-		if (!board_rev)
-			rc = wait_for_completion_timeout(
-				&ctx->pp_comp, msecs_to_jiffies(20));
-		else
-#endif
-		rc = wait_for_completion_timeout(
-				&ctx->pp_comp, msecs_to_jiffies(1000));
-		trace_mdp_cmd_wait_pingpong(ctl->num, atomic_read(&ctx->koff_cnt));
-
-		if (rc <= 0) {
-			WARN(1, "cmd kickoff timed out (rc = %d, recovery_cnt = %d) ctl=%d\n",
-						rc, ++recovery_cnt, ctl->num);
+	rc = wait_event_timeout(ctx->pp_waitq,
+			atomic_read(&ctx->koff_cnt) == 0,
+			KOFF_TIMEOUT);
+
+	if (rc <= 0) {
+		u32 status, mask;
+
+		mask = BIT(MDSS_MDP_IRQ_PING_PONG_COMP + ctx->pp_num);
+		status = mask & readl_relaxed(ctl->mdata->mdp_base +
+				MDSS_MDP_REG_INTR_STATUS);
+		if (status) {
+			WARN(1, "pp done but irq not triggered\n");
+			mdss_mdp_irq_clear(ctl->mdata,
+					MDSS_MDP_IRQ_PING_PONG_COMP,
+					ctx->pp_num);
+			local_irq_save(flags);
+			mdss_mdp_cmd_pingpong_done(ctl);
+			local_irq_restore(flags);
+			rc = 1;
+		}
+		rc = atomic_read(&ctx->koff_cnt) == 0;
+	}
+
+	if (rc <= 0) {
+		if (!ctx->pp_timeout_report_cnt) {
+			WARN(1, "cmd kickoff timed out (%d) ctl=%d\n",
+					rc, ctl->num);
 			mdss_dsi_debug_check_te(pdata);
+			MDSS_XLOG_TOUT_HANDLER("mdp", "dsi0", "dsi1",
+						"edp", "hdmi", "panic");
+                }
 #if defined (CONFIG_FB_MSM_MDSS_DSI_DBG)
 			dumpreg();
 			mdp5_dump_regs();
@@ -770,21 +779,63 @@
 			panic("Pingpong Timeout");
 #endif
 #endif
-			rc = -EPERM;
-			mdss_mdp_ctl_notify(ctl, MDP_NOTIFY_FRAME_TIMEOUT);
-		} else {
-			rc = 0;
-		}
+		ctx->pp_timeout_report_cnt++;
+		rc = -EPERM;
+		mdss_mdp_ctl_notify(ctl, MDP_NOTIFY_FRAME_TIMEOUT);
+		atomic_add_unless(&ctx->koff_cnt, -1, 0);
+	} else {
+		rc = 0;
+		ctx->pp_timeout_report_cnt = 0;
 	}
 #if defined (CONFIG_FB_MSM_MDSS_DSI_DBG)
 	xlog(__func__,ctl->num, atomic_read(&ctx->koff_cnt), ctx->clk_enabled, ctx->rdptr_enabled, 0, rc);
 #endif
 
+	/* signal any pending ping pong done events */
+	while (atomic_add_unless(&ctx->pp_done_cnt, -1, 0))
+		mdss_mdp_ctl_notify(ctx->ctl, MDP_NOTIFY_FRAME_DONE);
+
 	MDSS_XLOG(ctl->num, atomic_read(&ctx->koff_cnt), ctx->clk_enabled,
-					ctx->rdptr_enabled, rc);
+			ctx->rdptr_enabled, rc);
+
 	return rc;
 }
 
+static int mdss_mdp_cmd_do_notifier(struct mdss_mdp_cmd_ctx *ctx)
+{
+	struct mdss_mdp_cmd_ctx *sctx;
+	sctx = ctx->sync_ctx;
+
+	if (!sctx || atomic_read(&sctx->koff_cnt) == 0)
+		return 1;
+
+	return 0;
+}
+
+static void mdss_mdp_cmd_set_sync_ctx(
+		struct mdss_mdp_ctl *ctl, struct mdss_mdp_ctl *sctl)
+{
+	struct mdss_mdp_cmd_ctx *ctx, *sctx;
+
+	ctx = (struct mdss_mdp_cmd_ctx *)ctl->priv_data;
+	if (!sctl) {
+		ctx->sync_ctx = NULL;
+		return;
+	}
+
+	sctx = (struct mdss_mdp_cmd_ctx *)sctl->priv_data;
+
+	if (!sctl->roi.w && !sctl->roi.h) {
+		/* left only */
+		ctx->sync_ctx = NULL;
+		sctx->sync_ctx = NULL;
+	} else {
+		 /* left + right */
+		ctx->sync_ctx = sctx;
+		sctx->sync_ctx = ctx;
+	}
+}
+
 static int mdss_mdp_cmd_set_partial_roi(struct mdss_mdp_ctl *ctl)
 {
 	int rc = 0;
@@ -803,8 +854,7 @@
 
 int mdss_mdp_cmd_kickoff(struct mdss_mdp_ctl *ctl, void *arg)
 {
-	struct mdss_mdp_cmd_ctx *ctx;
-	unsigned long flags;
+	struct mdss_mdp_cmd_ctx *ctx, *sctx = NULL;
 	int rc;
 
 	ATRACE_BEGIN(__func__);
@@ -843,10 +893,10 @@
 	xlog(__func__, ctl->num, ctl->roi.x, ctl->roi.y, ctl->roi.w, ctl->roi.h, 0x1234);
 #endif
 
-	spin_lock_irqsave(&ctx->koff_lock, flags);
 	atomic_inc(&ctx->koff_cnt);
-	INIT_COMPLETION(ctx->pp_comp);
-	spin_unlock_irqrestore(&ctx->koff_lock, flags);
+	if (sctx)
+		atomic_inc(&sctx->koff_cnt);
+
 	trace_mdp_cmd_kickoff(ctl->num, atomic_read(&ctx->koff_cnt));
 
 	mdss_mdp_cmd_clk_on(ctx);
@@ -857,16 +907,13 @@
 	 * tx dcs command if had any
 	 */
 	mdss_mdp_ctl_intf_event(ctl, MDSS_EVENT_DSI_CMDLIST_KOFF, NULL);
-
-#if defined (CONFIG_FB_MSM_MDSS_DSI_DBG)
-	xlog(__func__, ctl->num, atomic_read(&ctx->koff_cnt), ctx->clk_enabled, ctx->rdptr_enabled, 0, 0);
-#endif
+	mdss_mdp_cmd_set_sync_ctx(ctl, NULL);
 	mdss_mdp_irq_enable(MDSS_MDP_IRQ_PING_PONG_COMP, ctx->pp_num);
 	mdss_mdp_ctl_write(ctl, MDSS_MDP_REG_CTL_START, 1);
 	mdss_mdp_ctl_perf_set_transaction_status(ctl,
 	PERF_SW_COMMIT_STATE, PERF_STATUS_DONE);
 	mb();
-	MDSS_XLOG(ctl->num,  atomic_read(&ctx->koff_cnt), ctx->clk_enabled,
+	MDSS_XLOG(ctl->num,  ctx->koff_cnt, ctx->clk_enabled,
 						ctx->rdptr_enabled);
 #if defined (CONFIG_FB_MSM_MDSS_DSI_DBG)
 	{
@@ -906,7 +953,7 @@
 
 	list_for_each_entry_safe(handle, tmp, &ctx->vsync_handlers, list)
 		mdss_mdp_cmd_remove_vsync_handler(ctl, handle);
-	MDSS_XLOG(ctl->num, atomic_read(&ctx->koff_cnt), ctx->clk_enabled,
+	MDSS_XLOG(ctl->num, ctx->koff_cnt, ctx->clk_enabled,
 				ctx->rdptr_enabled, XLOG_FUNC_ENTRY);
 
 #if defined (CONFIG_FB_MSM_MDSS_DSI_DBG)
@@ -934,21 +981,14 @@
 				pr_err("no panel data\n");
 			} else {
 				pinfo = &ctl->panel_data->panel_info;
-
 				mdss_mdp_irq_disable
 					(MDSS_MDP_IRQ_PING_PONG_RD_PTR,
 							ctx->pp_num);
 				ctx->rdptr_enabled = 0;
+				
 			}
 		}
 	}
-#if defined(CONFIG_FB_MSM_MIPI_SAMSUNG_OCTA_CMD_WQXGA_S6E3HA1_PT_PANEL)
-	if (!board_rev) {
-		mdss_mdp_irq_disable(MDSS_MDP_IRQ_PING_PONG_RD_PTR, ctx->pp_num);
-		if (ctx->rdptr_enabled)
-			ctx->rdptr_enabled = 0;
-	}
-#endif
 
 	if (cancel_work_sync(&ctx->clk_work))
 		pr_debug("no pending clk work\n");
@@ -988,7 +1028,7 @@
 	ctl->add_vsync_handler = NULL;
 	ctl->remove_vsync_handler = NULL;
 
-	MDSS_XLOG(ctl->num, atomic_read(&ctx->koff_cnt), ctx->clk_enabled,
+	MDSS_XLOG(ctl->num, ctx->koff_cnt, ctx->clk_enabled,
 				ctx->rdptr_enabled, XLOG_FUNC_EXIT);
 #if defined (CONFIG_FB_MSM_MDSS_DSI_DBG)
 	xlog(__func__, ctl->num, atomic_read(&ctx->koff_cnt), ctx->clk_enabled, ctx->rdptr_enabled, 0, 0x222222);
@@ -1035,10 +1075,10 @@
 	ctx->panel_ndx = ctl->panel_ndx;
 #endif
 	ctx->pp_num = mixer->num;
-	init_completion(&ctx->pp_comp);
+	ctx->pp_timeout_report_cnt = 0;
+	init_waitqueue_head(&ctx->pp_waitq);
 	init_completion(&ctx->stop_comp);
 	spin_lock_init(&ctx->clk_lock);
-	spin_lock_init(&ctx->koff_lock);
 #if defined(CONFIG_FB_MSM_MIPI_SAMSUNG_OCTA_CMD_WQHD_PT_PANEL)
 	spin_lock_init(&ctx->te_lock);
 #endif
@@ -1054,7 +1094,7 @@
 
 	pr_debug("%s: ctx=%p num=%d mixer=%d\n", __func__,
 				ctx, ctx->pp_num, mixer->num);
-	MDSS_XLOG(ctl->num, atomic_read(&ctx->koff_cnt), ctx->clk_enabled,
+	MDSS_XLOG(ctl->num, ctx->koff_cnt, ctx->clk_enabled,
 					ctx->rdptr_enabled);
 
 	mdss_mdp_set_intr_callback(MDSS_MDP_IRQ_PING_PONG_RD_PTR, ctx->pp_num,
diff -Nur a/drivers/video/msm/mdss/mdss_mdp_intf_video.c b/drivers/video/msm/mdss/mdss_mdp_intf_video.c
--- a/drivers/video/msm/mdss/mdss_mdp_intf_video.c	2016-01-10 16:25:37.428141000 -0500
+++ b/drivers/video/msm/mdss/mdss_mdp_intf_video.c	2015-12-01 05:57:16.000000000 -0500
@@ -64,6 +64,7 @@
 	bool polling_en;
 	u32 poll_cnt;
 	struct completion vsync_comp;
+	struct completion pp_comp;
 	int wait_pending;
 
 	atomic_t vsync_ref;
@@ -696,7 +697,7 @@
 	struct mdss_mdp_video_ctx *ctx;
 	struct mdss_mdp_ctl *sctl;
 	struct mdss_panel_data *pdata = ctl->panel_data;
-	int rc;
+	int rc = 0;
 
 	pr_debug("kickoff ctl=%d\n", ctl->num);
 
@@ -720,27 +721,12 @@
 		WARN(1, "commit without wait! ctl=%d", ctl->num);
 	}
 
+	if(pdata->panel_info.cont_splash_enabled)
+		return rc;
+
 	MDSS_XLOG(ctl->num, ctl->underrun_cnt);
 
 	if (!ctx->timegen_en) {
-#if defined(CONFIG_FB_MSM_MDSS_MAGNA_OCTA_VIDEO_720P_PANEL)
-		if(ctl->panel_data->panel_info.cont_splash_enabled) {
-			pr_debug("%s:MDSS_EVENT_BLANK \n", __func__);
-			rc = mdss_mdp_ctl_intf_event(ctl, MDSS_EVENT_BLANK, NULL);
-			if (rc == -EBUSY) {
-				pr_debug("intf #%d busy don't turn off\n",
-					 ctl->intf_num);
-				return rc;
-			}
-			WARN(rc, "intf %d blank error (%d)\n", ctl->intf_num, rc);
-
-			mdp_video_write(ctx, MDSS_MDP_REG_INTF_TIMING_ENGINE_EN, 0);
-			ctx->timegen_en = false;
-			pr_debug("%s:MDSS_EVENT_PANEL_OFF \n", __func__);
-			rc = mdss_mdp_ctl_intf_event(ctl, MDSS_EVENT_PANEL_OFF, NULL);
-			WARN(rc, "intf %d timegen off error (%d)\n", ctl->intf_num, rc);
-		}
-#endif
 		rc = mdss_mdp_ctl_intf_event(ctl, MDSS_EVENT_UNBLANK, NULL);
 		if (rc) {
 			pr_warn("intf #%d unblank error (%d)\n",
@@ -870,7 +856,7 @@
 #if defined(CONFIG_FB_MSM_MDSS_S6E8AA0A_HD_PANEL)
 	ret = mdss_mdp_ctl_intf_event(ctl, MTP_READ,NULL);
 #endif
-
+	 pr_err("[QC] handoff : %d\n", handoff);
 	if (!handoff) {
 		ret = mdss_mdp_ctl_intf_event(ctl, MDSS_EVENT_CONT_SPLASH_BEGIN,
 					      NULL);
@@ -889,14 +875,60 @@
 		ret = mdss_mdp_ctl_intf_event(ctl,
 			MDSS_EVENT_CONT_SPLASH_FINISH, NULL);
 	}
-#if (defined(CONFIG_FB_MSM_MIPI_SAMSUNG_OCTA_VIDEO_FULL_HD_PT_PANEL) || defined(CONFIG_FB_MSM_MDSS_SHARP_HD_PANEL)) && !defined(CONFIG_MACH_KS01EUR)
-	mdss_mdp_ctl_intf_event(ctl,MDSS_EVENT_CONT_SPLASH_FINISH, NULL);
+#if !defined(CONFIG_FB_MSM_EDP_SAMSUNG)
+	else
+	{
+		mdss_mdp_ctl_intf_event(ctl, MDSS_EVENT_CONT_SPLASH_BEGIN, NULL);
+		mdp_video_write(ctx, MDSS_MDP_REG_INTF_TIMING_ENGINE_EN, 0);
+		ctx->timegen_en = false;
+		/* Panel off command causes white screen flash at contsplash end so removing for LVDS panels */
+#if !defined(CONFIG_FB_MSM_MDSS_TC_DSI2LVDS_WXGA_PANEL)
+		mdss_mdp_ctl_intf_event(ctl, MDSS_EVENT_PANEL_OFF, NULL);
 #endif
+		mdss_mdp_ctl_intf_event(ctl,MDSS_EVENT_CONT_SPLASH_FINISH, NULL);
+		mdss_mdp_ctl_intf_event(ctl,MDSS_EVENT_UNBLANK, NULL);
+	}
+#endif
+
 error:
 	pdata->panel_info.cont_splash_enabled = 0;
 	return ret;
 }
 
+static void mdss_mdp_video_pingpong_done(void *arg)
+{
+  	struct mdss_mdp_ctl *ctl = arg;
+	struct mdss_mdp_video_ctx *ctx;
+	ctx = (struct mdss_mdp_video_ctx *) ctl->priv_data;
+	pr_info("%s:mdss_mdp_isr 2222\n", __func__);
+
+	if (!ctx) {
+  		pr_err("invalid ctx\n");
+		return;
+	}
+
+	mdss_mdp_irq_disable_nosync(MDSS_MDP_IRQ_PING_PONG_COMP, ctl->num);
+	complete_all(&ctx->pp_comp);
+}
+static int mdss_mdp_video_wait4pingpong(struct mdss_mdp_ctl *ctl, void *arg)
+{
+  	struct mdss_mdp_video_ctx *ctx;
+	int rc = 0;
+	ctx = (struct mdss_mdp_video_ctx *) ctl->priv_data;
+	pr_info("%s:mdss_mdp_isr 1111\n", __func__);
+
+	if (!ctx) {
+  		pr_err("invalid ctx\n");
+		return -ENODEV;
+	}
+	INIT_COMPLETION(ctx->pp_comp);
+
+	rc = wait_for_completion_timeout(
+		&ctx->pp_comp, msecs_to_jiffies(20));
+
+	return rc;
+}
+
 int mdss_mdp_video_start(struct mdss_mdp_ctl *ctl)
 {
 	struct mdss_data_type *mdata;
@@ -943,15 +975,18 @@
 	ctl->priv_data = ctx;
 	ctx->intf_type = ctl->intf_type;
 	init_completion(&ctx->vsync_comp);
+	init_completion(&ctx->pp_comp);
 	spin_lock_init(&ctx->vsync_lock);
 	mutex_init(&ctx->vsync_mtx);
 	atomic_set(&ctx->vsync_ref, 0);
 	INIT_WORK(&ctl->recover_work, recover_underrun_work);
 
 	mdss_mdp_set_intr_callback(MDSS_MDP_IRQ_INTF_VSYNC, ctl->intf_num,
-				   mdss_mdp_video_vsync_intr_done, ctl);
+					mdss_mdp_video_vsync_intr_done, ctl);
 	mdss_mdp_set_intr_callback(MDSS_MDP_IRQ_INTF_UNDER_RUN, ctl->intf_num,
-				   mdss_mdp_video_underrun_intr_done, ctl);
+					mdss_mdp_video_underrun_intr_done, ctl);
+	mdss_mdp_set_intr_callback(MDSS_MDP_IRQ_PING_PONG_COMP,
+					mixer->num,  mdss_mdp_video_pingpong_done, ctl);
 
 	dst_bpp = pinfo->fbc.enabled ? (pinfo->fbc.target_bpp) : (pinfo->bpp);
 
@@ -989,6 +1024,7 @@
 	ctl->add_vsync_handler = mdss_mdp_video_add_vsync_handler;
 	ctl->remove_vsync_handler = mdss_mdp_video_remove_vsync_handler;
 	ctl->config_fps_fnc = mdss_mdp_video_config_fps;
+	ctl->wait_video_pingpong = mdss_mdp_video_wait4pingpong;
 
 	return 0;
 }
diff -Nur a/drivers/video/msm/mdss/mdss_mdp_intf_writeback.c b/drivers/video/msm/mdss/mdss_mdp_intf_writeback.c
--- a/drivers/video/msm/mdss/mdss_mdp_intf_writeback.c	2016-01-10 16:25:37.428141000 -0500
+++ b/drivers/video/msm/mdss/mdss_mdp_intf_writeback.c	2015-12-01 05:57:13.000000000 -0500
@@ -569,7 +569,8 @@
 	ctl->wait_fnc = mdss_mdp_wb_wait4comp;
 	ctl->add_vsync_handler = mdss_mdp_wb_add_vsync_handler;
 	ctl->remove_vsync_handler = mdss_mdp_wb_remove_vsync_handler;
-
+	ctl->wait_video_pingpong = NULL;
+	
 	return ret;
 }
 
diff -Nur a/drivers/video/msm/mdss/mdss_mdp_overlay.c b/drivers/video/msm/mdss/mdss_mdp_overlay.c
--- a/drivers/video/msm/mdss/mdss_mdp_overlay.c	2016-01-10 16:25:37.429141000 -0500
+++ b/drivers/video/msm/mdss/mdss_mdp_overlay.c	2015-12-01 05:57:16.000000000 -0500
@@ -1,4 +1,4 @@
-/* Copyright (c) 2012-2015, The Linux Foundation. All rights reserved.
+/* Copyright (c) 2012-2014, The Linux Foundation. All rights reserved.
  *
  * This program is free software; you can redistribute it and/or modify
  * it under the terms of the GNU General Public License version 2 and
@@ -61,9 +61,6 @@
 int get_lcd_attached(void);
 
 
-#ifdef CONFIG_FB_MSM_CAMERA_CSC
-u8 pre_csc_update = 0xFF;
-#endif
 
 #define MEM_PROTECT_SD_CTRL 0xF
 
@@ -275,8 +272,8 @@
 			dst_h = req->dst_rect.h;
 		}
 
-		src_w = req->src_rect.w >> req->horz_deci;
-		src_h = req->src_rect.h >> req->vert_deci;
+		src_w = DECIMATED_DIMENSION(req->src_rect.w, req->horz_deci);
+		src_h = DECIMATED_DIMENSION(req->src_rect.h, req->vert_deci);
 
 		if (src_w > MAX_MIXER_WIDTH) {
 			pr_err("invalid source width=%d HDec=%d\n",
@@ -389,8 +386,8 @@
 		u32 hor_req_pixels, hor_fetch_pixels;
 		u32 hor_ov_fetch, vert_ov_fetch;
 		u32 vert_req_pixels, vert_fetch_pixels;
-		u32 src_w = pipe->src.w >> pipe->horz_deci;
-		u32 src_h = pipe->src.h >> pipe->vert_deci;
+		u32 src_w = DECIMATED_DIMENSION(pipe->src.w, pipe->horz_deci);
+		u32 src_h = DECIMATED_DIMENSION(pipe->src.h, pipe->vert_deci);
 
 		/*
 		 * plane 1 and 2 are for chroma and are same. While configuring
@@ -402,14 +399,16 @@
 
 		/*
 		 * For chroma plane, width is half for the following sub sampled
-		 * formats
+		 * formats. Except in case of decimation, where hardware avoids
+		 * 1 line of decimation instead of downsampling.
 		 */
-		if (plane == 1 &&
+		if (plane == 1 && !pipe->horz_deci &&
 		    ((pipe->src_fmt->chroma_sample == MDSS_MDP_CHROMA_420) ||
-		     (pipe->src_fmt->chroma_sample == MDSS_MDP_CHROMA_H2V1)))
+		     (pipe->src_fmt->chroma_sample == MDSS_MDP_CHROMA_H2V1))) {
 			src_w >>= 1;
+		}
 
-		if (plane == 1 &&
+		if (plane == 1 && !pipe->vert_deci &&
 		    ((pipe->src_fmt->chroma_sample == MDSS_MDP_CHROMA_420) ||
 		     (pipe->src_fmt->chroma_sample == MDSS_MDP_CHROMA_H1V2)))
 			src_h >>= 1;
@@ -419,32 +418,38 @@
 			pipe->scale.num_ext_pxls_right[plane];
 
 		hor_fetch_pixels = src_w +
-			pipe->scale.left_ftch[plane] +
+			(pipe->scale.left_ftch[plane] >> pipe->horz_deci) +
 			pipe->scale.left_rpt[plane] +
-			pipe->scale.right_ftch[plane] +
+			(pipe->scale.right_ftch[plane] >> pipe->horz_deci) +
 			pipe->scale.right_rpt[plane];
 
-		hor_ov_fetch = src_w + pipe->scale.left_ftch[plane] +
-			pipe->scale.right_ftch[plane];
+		hor_ov_fetch = src_w +
+			(pipe->scale.left_ftch[plane] >> pipe->horz_deci)+
+			(pipe->scale.right_ftch[plane] >> pipe->horz_deci);
 
 		vert_req_pixels = pipe->scale.num_ext_pxls_top[plane] +
 			pipe->scale.num_ext_pxls_btm[plane];
 
-		vert_fetch_pixels = pipe->scale.top_ftch[plane] +
+		vert_fetch_pixels =
+			(pipe->scale.top_ftch[plane] >> pipe->vert_deci) +
 			pipe->scale.top_rpt[plane] +
-			pipe->scale.btm_ftch[plane] +
+			(pipe->scale.btm_ftch[plane] >> pipe->vert_deci)+
 			pipe->scale.btm_rpt[plane];
 
-		vert_ov_fetch = src_h + pipe->scale.top_ftch[plane] +
-			pipe->scale.btm_ftch[plane];
+		vert_ov_fetch = src_h +
+			(pipe->scale.top_ftch[plane] >> pipe->vert_deci)+
+			(pipe->scale.btm_ftch[plane] >> pipe->vert_deci);
 
 		if ((hor_req_pixels != hor_fetch_pixels) ||
 			(hor_ov_fetch > pipe->img_width) ||
 			(vert_req_pixels != vert_fetch_pixels) ||
 			(vert_ov_fetch > pipe->img_height)) {
-			pr_err("err: h_req:%d h_fetch:%d v_req:%d v_fetch:%d src_img:[%d,%d]\n",
+			pr_err("err: plane=%d h_req:%d h_fetch:%d v_req:%d v_fetch:%d\n",
+					plane,
 					hor_req_pixels, hor_fetch_pixels,
-					vert_req_pixels, vert_fetch_pixels,
+					vert_req_pixels, vert_fetch_pixels);
+			pr_err("roi_w[%d]=%d, src_img:[%d, %d]\n",
+					plane, pipe->scale.roi_w[plane],
 					pipe->img_width, pipe->img_height);
 			pipe->scale.enable_pxl_ext = 0;
 			return -EINVAL;
@@ -459,7 +464,7 @@
 	u32 src;
 	int rc;
 
-	src = pipe->src.w >> pipe->horz_deci;
+	src = DECIMATED_DIMENSION(pipe->src.w, pipe->horz_deci);
 
 	if (pipe->scale.enable_pxl_ext) {
 		rc = __mdss_mdp_validate_pxl_extn(pipe);
@@ -478,7 +483,7 @@
 		return rc;
 	}
 
-	src = pipe->src.h >> pipe->vert_deci;
+	src = DECIMATED_DIMENSION(pipe->src.h, pipe->vert_deci);
 	rc = mdss_mdp_calc_phase_step(src, pipe->dst.h,
 			&pipe->scale.phase_step_y[0]);
 
@@ -535,7 +540,7 @@
 
 	if (req->flags & MDP_ROT_90) {
 		pr_err("unsupported inline rotation\n");
-		return -ENOTSUPP;
+		return -EOPNOTSUPP;
 	}
 
 #if defined(CONFIG_MDSS_UD_FLIP)
@@ -625,7 +630,7 @@
 
 		if (pipe == NULL) {
 			pr_err("error allocating pipe\n");
-			return -ENOMEM;
+			return -ENODEV;
 		}
 
 		ret = mdss_mdp_pipe_map(pipe);
@@ -1002,7 +1007,8 @@
 	bool recovery_mode = false;
 
 	mutex_lock(&mdp5_data->list_lock);
-	list_for_each_entry(pipe, destroy_pipes, list) {
+
+list_for_each_entry(pipe, destroy_pipes, list) {
 		/* make sure pipe fetch has been halted before freeing buffer */
 		if (mdss_mdp_pipe_fetch_halt(pipe)) {
 			/*
@@ -1111,8 +1117,9 @@
 	}
 
 	if (ctl->power_on) {
-		if (mdp5_data->mdata->ulps) {
-			rc = mdss_mdp_footswitch_ctrl_ulps(1, &mfd->pdev->dev);
+		if (mdp5_data->mdata->idle_pc) {
+			rc = mdss_mdp_footswitch_ctrl_idle_pc(1,
+					&mfd->pdev->dev);
 			if (rc) {
 				pr_err("footswtich control power on failed rc=%d\n",
 									rc);
@@ -1311,6 +1318,7 @@
 	int sd_in_pipe = 0;
 	bool need_cleanup = false;
 	LIST_HEAD(destroy_pipes);
+	
 #if defined(CONFIG_FB_MSM_MIPI_SAMSUNG_OCTA_CMD_WQHD_PT_PANEL)
 		int te_ret = 0;
 #endif
@@ -1323,6 +1331,18 @@
 	}
 
 	mutex_lock(&mdp5_data->ov_lock);
+	ctl->bw_pending = 0;
+	if (mfd->panel_info->type == DTV_PANEL) {
+		ret = mdss_mdp_overlay_start(mfd);
+		if (ret) {
+			pr_err("unable to start overlay %d (%d)\n",
+						mfd->index, ret);
+			mutex_unlock(&mdp5_data->ov_lock);
+			if (ctl->shared_lock)
+				mutex_unlock(ctl->shared_lock);
+			return ret;
+		}
+	}
 	mutex_lock(&mdp5_data->list_lock);
 
 	/*
@@ -1428,7 +1448,7 @@
 			|| defined (CONFIG_FB_MSM_MIPI_SAMSUNG_OCTA_CMD_WQXGA_S6E3HA1_PT_PANEL)
 		mdss_mdp_ctl_intf_event(mdp5_data->ctl, MDSS_EVENT_FRAME_UPDATE, NULL);
 #endif
-#if defined(CONFIG_FB_MSM_MDSS_SDC_WXGA_PANEL) &&  !defined(CONFIG_MACH_DEGASLTE_SPR)
+#if defined(CONFIG_FB_MSM_MDSS_SDC_WXGA_PANEL)
 		mdss_mdp_ctl_intf_event(mdp5_data->ctl, MDSS_EVENT_BACKLIGHT_LATE_ON, NULL);
 #endif
 
@@ -1857,7 +1877,7 @@
 		return;
 
 	if (!fbi->fix.smem_start || fbi->fix.smem_len == 0 ||
-	     mdp5_data->borderfill_enable) {
+			mdp5_data->borderfill_enable) {
 		mfd->mdp.kickoff_fnc(mfd, NULL);
 		return;
 	}
@@ -1873,12 +1893,6 @@
 
 	mdss_mdp_clk_ctrl(MDP_BLOCK_POWER_ON, false);
 
-	ret = mdss_iommu_ctrl(1);
-	if (IS_ERR_VALUE(ret)) {
-		pr_err("IOMMU attach failed\n");
-		goto pan_display_error;
-	}
-
 	bpp = fbi->var.bits_per_pixel / 8;
 	offset = fbi->var.xoffset * bpp +
 		 fbi->var.yoffset * fbi->fix.line_length;
@@ -1895,6 +1909,12 @@
 		goto pan_display_error;
 	}
 
+	ret = mdss_iommu_ctrl(1);
+	if (IS_ERR_VALUE(ret)) {
+		pr_err("IOMMU attach failed\n");
+		goto pan_display_error;
+	}
+
 	ret = mdss_mdp_overlay_get_fb_pipe(mfd, &pipe,
 					MDSS_MDP_MIXER_MUX_LEFT);
 	if (ret) {
@@ -2009,23 +2029,6 @@
 	}
 
 	pr_debug("vsync on fb%d play_cnt=%d\n", mfd->index, ctl->play_cnt);
-#if defined(CONFIG_MACH_KS01SKT) || defined(CONFIG_MACH_KS01EUR) || defined(CONFIG_MACH_KS01KTT) || defined(CONFIG_MACH_KS01LGT) ||defined(CONFIG_SEC_ATLANTIC_PROJECT)
-#ifdef CONFIG_FB_MSM_CAMERA_CSC
-	if (csc_update != prev_csc_update) {
-		struct mdss_mdp_pipe *pipe, *next;
-
-		list_for_each_entry_safe(pipe, next, &mdp5_data->pipes_used,
-				list) {
-			if (pipe->type == MDSS_MDP_PIPE_TYPE_VIG) {
-				mdss_mdp_csc_setup(MDSS_MDP_BLOCK_SSPP, pipe->num, 1,
-						MDSS_MDP_CSC_YUV2RGB);
-			}
-		}
-		prev_csc_update = csc_update;
-	}
-#endif
-#endif
-
 	mdp5_data->vsync_time = t;
 	sysfs_notify_dirent(mdp5_data->vsync_event_sd);
 }
@@ -3297,11 +3300,7 @@
 	if (rc)
 		pr_err("Failed to handoff smps\n");
 
-#if defined(CONFIG_FB_MSM_MIPI_SAMSUNG_TFT_VIDEO_WQXGA_PT_PANEL) || (defined(CONFIG_FB_MSM_MIPI_SAMSUNG_OCTA_VIDEO_FULL_HD_PT_PANEL) && defined(CONFIG_MACH_KS01EUR))
-	mdp5_data->handoff = false;
-#else
 	mdp5_data->handoff = true;
-#endif
 
 error:
 	if (rc && ctl) {
@@ -3554,6 +3553,8 @@
 		}
 	}
 
+	if (mdss_mdp_pp_overlay_init(mfd))
+		pr_warn("Failed to initialize pp overlay data.\n");
 	return rc;
 init_fail:
 	kfree(mdp5_data);
@@ -3614,6 +3615,7 @@
 {
 	struct mdss_mdp_pipe *pipe;
 	struct mdss_overlay_private *mdp5_data = mfd_to_mdp5_data(mfd);
+	int pcount = mdp5_data->mdata->nrgb_pipes+ mdp5_data->mdata->nvig_pipes+mdp5_data->mdata->ndma_pipes;
 
 	pr_info(" ============ dump_start ===========\n");
 
@@ -3626,6 +3628,8 @@
 			pipe->flags, pipe->src_fmt->format, pipe->src_fmt->bpp,
 			pipe->ndx);
 		pr_info("pipe addr : %p\n", pipe);
+		pcount--;
+		if(!pcount) break;
 	}
 
 	mdss_mdp_underrun_clk_info();
diff -Nur a/drivers/video/msm/mdss/mdss_mdp_pipe.c b/drivers/video/msm/mdss/mdss_mdp_pipe.c
--- a/drivers/video/msm/mdss/mdss_mdp_pipe.c	2016-01-10 16:25:37.429141000 -0500
+++ b/drivers/video/msm/mdss/mdss_mdp_pipe.c	2015-12-01 05:57:13.000000000 -0500
@@ -221,7 +221,7 @@
 	u32 nlines, format, seg_w;
 	u16 width;
 
-	width = pipe->src.w >> pipe->horz_deci;
+	width = DECIMATED_DIMENSION(pipe->src.w, pipe->horz_deci);
 
 	if (pipe->bwc_mode) {
 		rc = mdss_mdp_get_rau_strides(pipe->src.w, pipe->src.h,
@@ -345,7 +345,7 @@
 		for (; i >= 0; i--)
 			mdss_mdp_smp_mmb_free(pipe->smp_map[i].reserved,
 				false);
-		rc = -ENOMEM;
+		rc = -ENOBUFS;
 	}
 	mutex_unlock(&mdss_mdp_smp_lock);
 
@@ -565,6 +565,10 @@
 		 * shared as long as its attached to a writeback mixer
 		 */
 		pipe = mdata->dma_pipes + mixer->num;
+		
+		if (pipe->mixer->type != MDSS_MDP_MIXER_TYPE_WRITEBACK)
+			return NULL;
+			
 		kref_get(&pipe->kref);
 		pr_debug("pipe sharing for pipe=%d\n", pipe->num);
 	} else {
@@ -1291,8 +1295,9 @@
 static inline void __mdss_mdp_pipe_program_pixel_extn_helper(
 	struct mdss_mdp_pipe *pipe, u32 plane, u32 off)
 {
-	u32 src_h = pipe->src.h >> pipe->vert_deci;
+	u32 src_h = DECIMATED_DIMENSION(pipe->src.h, pipe->vert_deci);
 	u32 mask = 0xFF;
+	u32 lr_pe, tb_pe, tot_req_pixels;
 
 	/*
 	 * CB CR plane required pxls need to be accounted
@@ -1300,23 +1305,33 @@
 	 */
 	if (plane == 1)
 		src_h >>= pipe->chroma_sample_v;
-	writel_relaxed(((pipe->scale.right_ftch[plane] & mask) << 24)|
+
+	lr_pe = ((pipe->scale.right_ftch[plane] & mask) << 24)|
 		((pipe->scale.right_rpt[plane] & mask) << 16)|
 		((pipe->scale.left_ftch[plane] & mask) << 8)|
-		(pipe->scale.left_rpt[plane] & mask), pipe->base +
-			MDSS_MDP_REG_SSPP_SW_PIX_EXT_C0_LR + off);
-	writel_relaxed(((pipe->scale.btm_ftch[plane] & mask) << 24)|
+		(pipe->scale.left_rpt[plane] & mask);
+
+	tb_pe = ((pipe->scale.btm_ftch[plane] & mask) << 24)|
 		((pipe->scale.btm_rpt[plane] & mask) << 16)|
 		((pipe->scale.top_ftch[plane] & mask) << 8)|
-		(pipe->scale.top_rpt[plane] & mask), pipe->base +
+		(pipe->scale.top_rpt[plane] & mask);
+
+	writel_relaxed(lr_pe, pipe->base +
+			MDSS_MDP_REG_SSPP_SW_PIX_EXT_C0_LR + off);
+	writel_relaxed(tb_pe, pipe->base +
 			MDSS_MDP_REG_SSPP_SW_PIX_EXT_C0_TB + off);
+
 	mask = 0xFFFF;
-	writel_relaxed((((src_h + pipe->scale.num_ext_pxls_top[plane] +
+	tot_req_pixels = (((src_h + pipe->scale.num_ext_pxls_top[plane] +
 		pipe->scale.num_ext_pxls_btm[plane]) & mask) << 16) |
 		((pipe->scale.roi_w[plane] +
 		pipe->scale.num_ext_pxls_left[plane] +
-		pipe->scale.num_ext_pxls_right[plane]) & mask), pipe->base +
+		pipe->scale.num_ext_pxls_right[plane]) & mask);
+	writel_relaxed(tot_req_pixels, pipe->base +
 			MDSS_MDP_REG_SSPP_SW_PIX_EXT_C0_REQ_PIXELS + off);
+
+	pr_debug("pipe num=%d, plane=%d, LR PE=0x%x, TB PE=0x%x, req_pixels=0x0%x\n",
+		pipe->num, plane, lr_pe, tb_pe, tot_req_pixels);
 }
 
 /**
diff -Nur a/drivers/video/msm/mdss/mdss_mdp_pp.c b/drivers/video/msm/mdss/mdss_mdp_pp.c
--- a/drivers/video/msm/mdss/mdss_mdp_pp.c	2016-01-10 16:25:37.430141000 -0500
+++ b/drivers/video/msm/mdss/mdss_mdp_pp.c	2015-12-01 05:57:13.000000000 -0500
@@ -87,6 +87,24 @@
 	},
 };
 
+/*
+ * To program a linear LUT we need to make the slope to be 1/16 to enable
+ * conversion from 12bit to 8bit. Also in cases where post blend values might
+ * cross 255, we need to cap them now to 255. The offset of the final segment
+ * would be programmed in such a case and we set the value to 32460 which is
+ * 255 in U8.7.
+ */
+static struct mdp_ar_gc_lut_data lin_gc_data[GC_LUT_SEGMENTS] = {
+	{   0, 256, 0}, {4095, 0,     0},
+	{4095,   0, 0}, {4095, 0,     0},
+	{4095,   0, 0}, {4095, 0,     0},
+	{4095,   0, 0}, {4095, 0,     0},
+	{4095,   0, 0}, {4095, 0,     0},
+	{4095,   0, 0}, {4095, 0,     0},
+	{4095,   0, 0}, {4095, 0,     0},
+	{4095,   0, 0}, {4095, 0, 32640}
+};
+
 #if defined(CONFIG_MDNIE_TFT_MSM8X26) || defined (CONFIG_FB_MSM_MDSS_S6E8AA0A_HD_PANEL) || defined(CONFIG_MDNIE_VIDEO_ENHANCED)
 struct mdp_pcc_cfg_data pcc_reverse = {
 	.block = MDP_LOGICAL_BLOCK_DISP_0,
@@ -117,6 +135,8 @@
 #define CSC_POST_OFF	0xC
 
 #define MDSS_BLOCK_DISP_NUM	(MDP_BLOCK_MAX - MDP_LOGICAL_BLOCK_DISP_0)
+#define MDSS_MAX_MIXER_DISP_NUM	(MDSS_BLOCK_DISP_NUM + \
+			MDSS_MDP_WB_MAX_LAYERMIXER)
 
 #define HIST_WAIT_TIMEOUT(frame) ((75 * HZ * (frame)) / 1000)
 #define HIST_KICKOFF_WAIT_FRACTION 4
@@ -325,15 +345,15 @@
 
 struct mdss_pp_res_type {
 	/* logical info */
-	u32 pp_disp_flags[MDSS_BLOCK_DISP_NUM];
+	u32 pp_disp_flags[MDSS_MAX_MIXER_DISP_NUM];
 	u32 igc_lut_c0c1[MDSS_BLOCK_DISP_NUM][IGC_LUT_ENTRIES];
 	u32 igc_lut_c2[MDSS_BLOCK_DISP_NUM][IGC_LUT_ENTRIES];
 	struct mdp_ar_gc_lut_data
-		gc_lut_r[MDSS_BLOCK_DISP_NUM][GC_LUT_SEGMENTS];
+		gc_lut_r[MDSS_MAX_MIXER_DISP_NUM][GC_LUT_SEGMENTS];
 	struct mdp_ar_gc_lut_data
-		gc_lut_g[MDSS_BLOCK_DISP_NUM][GC_LUT_SEGMENTS];
+		gc_lut_g[MDSS_MAX_MIXER_DISP_NUM][GC_LUT_SEGMENTS];
 	struct mdp_ar_gc_lut_data
-		gc_lut_b[MDSS_BLOCK_DISP_NUM][GC_LUT_SEGMENTS];
+		gc_lut_b[MDSS_MAX_MIXER_DISP_NUM][GC_LUT_SEGMENTS];
 	u32 enhist_lut[MDSS_BLOCK_DISP_NUM][ENHIST_LUT_ENTRIES];
 	struct mdp_pa_cfg pa_disp_cfg[MDSS_BLOCK_DISP_NUM];
 	struct mdp_pa_v2_data pa_v2_disp_cfg[MDSS_BLOCK_DISP_NUM];
@@ -341,14 +361,14 @@
 	u32 six_zone_lut_curve_p1[MDSS_BLOCK_DISP_NUM][MDP_SIX_ZONE_LUT_SIZE];
 	struct mdp_pcc_cfg_data pcc_disp_cfg[MDSS_BLOCK_DISP_NUM];
 	struct mdp_igc_lut_data igc_disp_cfg[MDSS_BLOCK_DISP_NUM];
-	struct mdp_pgc_lut_data argc_disp_cfg[MDSS_BLOCK_DISP_NUM];
+	struct mdp_pgc_lut_data argc_disp_cfg[MDSS_MAX_MIXER_DISP_NUM];
 	struct mdp_pgc_lut_data pgc_disp_cfg[MDSS_BLOCK_DISP_NUM];
 	struct mdp_hist_lut_data enhist_disp_cfg[MDSS_BLOCK_DISP_NUM];
 	struct mdp_dither_cfg_data dither_disp_cfg[MDSS_BLOCK_DISP_NUM];
 	struct mdp_gamut_cfg_data gamut_disp_cfg[MDSS_BLOCK_DISP_NUM];
 	uint16_t gamut_tbl[MDSS_BLOCK_DISP_NUM][GAMUT_TOTAL_TABLE_SIZE];
 	u32 hist_data[MDSS_BLOCK_DISP_NUM][HIST_V_SIZE];
-	struct pp_sts_type pp_disp_sts[MDSS_BLOCK_DISP_NUM];
+	struct pp_sts_type pp_disp_sts[MDSS_MAX_MIXER_DISP_NUM];
 	/* physical info */
 	struct pp_hist_col_info dspp_hist[MDSS_MDP_MAX_DSPP];
 };
@@ -420,10 +440,11 @@
 				u32 disp_num);
 static void pp_read_pa_mem_col_regs(char __iomem *addr,
 				struct mdp_pa_mem_col_cfg *mem_col_cfg);
+static struct msm_fb_data_type *mdss_get_mfd_from_index(int index);
 static int mdss_ad_init_checks(struct msm_fb_data_type *mfd);
 static int mdss_mdp_get_ad(struct msm_fb_data_type *mfd,
 					struct mdss_ad_info **ad);
-static int pp_update_ad_input(struct msm_fb_data_type *mfd);
+static int pp_ad_invalidate_input(struct msm_fb_data_type *mfd);
 static void pp_ad_vsync_handler(struct mdss_mdp_ctl *ctl, ktime_t t);
 static void pp_ad_cfg_write(struct mdss_mdp_ad *ad_hw,
 						struct mdss_ad_info *ad);
@@ -437,8 +458,11 @@
 				struct mdss_mdp_ctl *ctl, u32 num, u32 *opmode);
 static int mdss_mdp_ad_setup(struct msm_fb_data_type *mfd);
 static void pp_ad_cfg_lut(char __iomem *addr, u32 *data);
-static int pp_ad_attenuate_bl(u32 bl, u32 *bl_out,
-		struct msm_fb_data_type *mfd);
+static int pp_ad_attenuate_bl(struct mdss_ad_info *ad, u32 bl, u32 *bl_out);
+static int pp_ad_linearize_bl(struct mdss_ad_info *ad, u32 bl, u32 *bl_out,
+		int inv);
+static int pp_ad_calc_bl(struct msm_fb_data_type *mfd, int bl_in, int *bl_out,
+		bool *bl_out_notify);
 static int pp_num_to_side(struct mdss_mdp_ctl *ctl, u32 num);
 static inline bool pp_sts_is_enabled(u32 sts, int side);
 static inline void pp_sts_set_split_bits(u32 *sts, u32 bits);
@@ -553,12 +577,12 @@
 	if (csc_type == MDSS_MDP_CSC_YUV2RGB && !csc_update) 
 	{
 		data = &mdp_csc_convert_wideband;
-		pr_debug("will do mdp_csc_convert_wideband\n");
+		pr_debug("will do mdp_csc_convert (wide band)\n");
 	}
 	else
 	{
 		data = &mdp_csc_convert[csc_type];
-		pr_debug("will do mdp_csc_convert(narrow band)\n");
+		pr_debug("will do mdp_csc_convert (narrow band)\n");
 	}
 #else
 	data = &mdp_csc_convert[csc_type];
@@ -892,7 +916,7 @@
 			 * CSC matrix
 			 */
 			mdss_mdp_csc_setup(MDSS_MDP_BLOCK_SSPP, pipe->num, 1,
-					   MDSS_MDP_CSC_YUV2RGB);
+								MDSS_MDP_CSC_YUV2RGB);
 		}
 	}
 
@@ -1017,8 +1041,8 @@
 		}
 	}
 
-	src_w = pipe->src.w >> pipe->horz_deci;
-	src_h = pipe->src.h >> pipe->vert_deci;
+	src_w = DECIMATED_DIMENSION(pipe->src.w, pipe->horz_deci);
+	src_h = DECIMATED_DIMENSION(pipe->src.h, pipe->vert_deci);
 
 	chroma_sample = pipe->src_fmt->chroma_sample;
 	if (pipe->flags & MDP_SOURCE_ROTATED_90) {
@@ -1350,44 +1374,69 @@
 static int pp_mixer_setup(u32 disp_num,
 		struct mdss_mdp_mixer *mixer)
 {
-	u32 flags, dspp_num, opmode = 0;
+	u32 flags, mixer_num, opmode = 0, lm_bitmask = 0;
 	struct mdp_pgc_lut_data *pgc_config;
 	struct pp_sts_type *pp_sts;
 	struct mdss_mdp_ctl *ctl;
 	char __iomem *addr;
+	struct mdss_data_type *mdata = mdss_mdp_get_mdata();
 
-	if (!mixer || !mixer->ctl)
+	if (!mixer || !mixer->ctl || !mdata)
 		return -EINVAL;
-	dspp_num = mixer->num;
+
+	mixer_num = mixer->num;
 	ctl = mixer->ctl;
+	lm_bitmask = (BIT(6) << mixer_num);
 
-	/* no corresponding dspp */
-	if ((mixer->type != MDSS_MDP_MIXER_TYPE_INTF) ||
-		(dspp_num >= MDSS_MDP_MAX_DSPP))
+	/* Assign appropriate flags after mixer index validation */
+	if (mixer->type == MDSS_MDP_MIXER_TYPE_INTF) {
+		if (mixer_num >= mdata->nmixers_intf) {
+			pr_err("bad intf mixer index = %d total = %d\n",
+				mixer_num, mdata->nmixers_intf);
+			return 0;
+		}
+		if (mixer_num == MDSS_MDP_DSPP3)
+			lm_bitmask = BIT(20);
+	} else if (mixer->type == MDSS_MDP_MIXER_TYPE_WRITEBACK) {
+		if (mixer_num >= mdata->nmixers_wb +
+				mdata->nmixers_intf) {
+			pr_err("bad wb mixer index = %d total = %d\n",
+				mixer_num,
+				mdata->nmixers_intf + mdata->nmixers_wb);
+			return 0;
+		}
+	} else {
 		return 0;
-	if (disp_num < MDSS_BLOCK_DISP_NUM)
-		flags = mdss_pp_res->pp_disp_flags[disp_num];
-	else
-		flags = 0;
+	}
 
+	flags = mdss_pp_res->pp_disp_flags[disp_num];
 	pp_sts = &mdss_pp_res->pp_disp_sts[disp_num];
 	/* GC_LUT is in layer mixer */
 	if (flags & PP_FLAGS_DIRTY_ARGC) {
 		pgc_config = &mdss_pp_res->argc_disp_cfg[disp_num];
-		if (pgc_config->flags & MDP_PP_OPS_WRITE) {
-			addr = mixer->base +
-				MDSS_MDP_REG_LM_GC_LUT_BASE;
+		addr = mixer->base + MDSS_MDP_REG_LM_GC_LUT_BASE;
+		/*
+		 * ARGC will always be enabled. When user setting is
+		 * disabled we program the linear ARGC data to enable
+		 * rounding in HW.
+		 */
+		pp_sts->argc_sts |= PP_STS_ENABLE;
+		if (pgc_config->flags & MDP_PP_OPS_WRITE)
+			pp_update_argc_lut(addr, pgc_config);
+		if (pgc_config->flags & MDP_PP_OPS_DISABLE) {
+			pgc_config->r_data = &lin_gc_data[0];
+			pgc_config->g_data = &lin_gc_data[0];
+			pgc_config->b_data = &lin_gc_data[0];
+			pgc_config->num_r_stages = GC_LUT_SEGMENTS;
+			pgc_config->num_g_stages = GC_LUT_SEGMENTS;
+			pgc_config->num_b_stages = GC_LUT_SEGMENTS;
 			pp_update_argc_lut(addr, pgc_config);
 		}
-		if (pgc_config->flags & MDP_PP_OPS_DISABLE)
-			pp_sts->argc_sts &= ~PP_STS_ENABLE;
-		else if (pgc_config->flags & MDP_PP_OPS_ENABLE)
-			pp_sts->argc_sts |= PP_STS_ENABLE;
-		ctl->flush_bits |= BIT(6) << dspp_num; /* LAYER_MIXER */
+		ctl->flush_bits |= lm_bitmask;
 	}
+
 	/* update LM opmode if LM needs flush */
-	if ((pp_sts->argc_sts & PP_STS_ENABLE) &&
-		(ctl->flush_bits & (BIT(6) << dspp_num))) {
+	if (flags & PP_FLAGS_DIRTY_ARGC) {
 		addr = mixer->base + MDSS_MDP_REG_LM_OP_MODE;
 		opmode = readl_relaxed(addr);
 		opmode |= (1 << 0); /* GC_LUT_EN */
@@ -1624,23 +1673,23 @@
 
 	pp_sts = &mdss_pp_res->pp_disp_sts[disp_num];
 
-	if (mdata->mdp_rev >= MDSS_MDP_HW_REV_103) {
-		pp_pa_v2_config(flags, base + MDSS_MDP_REG_DSPP_PA_BASE, pp_sts,
-				&mdss_pp_res->pa_v2_disp_cfg[disp_num],
-				PP_DSPP);
-	} else
-		pp_pa_config(flags, base + MDSS_MDP_REG_DSPP_PA_BASE, pp_sts,
-				&mdss_pp_res->pa_disp_cfg[disp_num]);
-
-	pp_pcc_config(flags, base + MDSS_MDP_REG_DSPP_PCC_BASE, pp_sts,
-					&mdss_pp_res->pcc_disp_cfg[disp_num]);
+	if (disp_num < MDSS_BLOCK_DISP_NUM) {
+		if (mdata->mdp_rev >= MDSS_MDP_HW_REV_103) {
+			pp_pa_v2_config(flags, base + MDSS_MDP_REG_DSPP_PA_BASE, pp_sts,
+					&mdss_pp_res->pa_v2_disp_cfg[disp_num],
+					PP_DSPP);
+		} else
+			pp_pa_config(flags, base + MDSS_MDP_REG_DSPP_PA_BASE, pp_sts,
+					&mdss_pp_res->pa_disp_cfg[disp_num]);
 
-	pp_igc_config(flags, mdata->mdp_base + MDSS_MDP_REG_IGC_DSPP_BASE,
+		pp_pcc_config(flags, base + MDSS_MDP_REG_DSPP_PCC_BASE, pp_sts,
+				&mdss_pp_res->pcc_disp_cfg[disp_num]);
+		pp_igc_config(flags, mdata->mdp_base + MDSS_MDP_REG_IGC_DSPP_BASE,
 				pp_sts, &mdss_pp_res->igc_disp_cfg[disp_num],
 				dspp_num);
-
-	pp_enhist_config(flags, base + MDSS_MDP_REG_DSPP_HIST_LUT_BASE,
-			pp_sts, &mdss_pp_res->enhist_disp_cfg[disp_num]);
+		pp_enhist_config(flags, base + MDSS_MDP_REG_DSPP_HIST_LUT_BASE,
+				pp_sts, &mdss_pp_res->enhist_disp_cfg[disp_num]);
+	}
 
 	if (pp_sts->enhist_sts & PP_STS_ENABLE &&
 			!(pp_sts->pa_sts & PP_STS_ENABLE)) {
@@ -1651,26 +1700,29 @@
 		writel_relaxed(0, addr + 8);
 		writel_relaxed(0, addr + 12);
 	}
-	if (flags & PP_FLAGS_DIRTY_DITHER) {
-		addr = base + MDSS_MDP_REG_DSPP_DITHER_DEPTH;
-		pp_dither_config(addr, pp_sts,
-				&mdss_pp_res->dither_disp_cfg[disp_num]);
-	}
-	if (flags & PP_FLAGS_DIRTY_GAMUT)
-		pp_gamut_config(&mdss_pp_res->gamut_disp_cfg[disp_num], base,
-				pp_sts);
-
-	if (flags & PP_FLAGS_DIRTY_PGC) {
-		pgc_config = &mdss_pp_res->pgc_disp_cfg[disp_num];
-		if (pgc_config->flags & MDP_PP_OPS_WRITE) {
-			addr = base + MDSS_MDP_REG_DSPP_GC_BASE;
-			pp_update_argc_lut(addr, pgc_config);
+
+	if (disp_num < MDSS_BLOCK_DISP_NUM) {
+		if (flags & PP_FLAGS_DIRTY_DITHER) {
+			addr = base + MDSS_MDP_REG_DSPP_DITHER_DEPTH;
+			pp_dither_config(addr, pp_sts,
+					&mdss_pp_res->dither_disp_cfg[disp_num]);
+		}
+		if (flags & PP_FLAGS_DIRTY_GAMUT)
+			pp_gamut_config(&mdss_pp_res->gamut_disp_cfg[disp_num], base,
+					pp_sts);
+
+		if (flags & PP_FLAGS_DIRTY_PGC) {
+			pgc_config = &mdss_pp_res->pgc_disp_cfg[disp_num];
+			if (pgc_config->flags & MDP_PP_OPS_WRITE) {
+				addr = base + MDSS_MDP_REG_DSPP_GC_BASE;
+				pp_update_argc_lut(addr, pgc_config);
+			}
+			if (pgc_config->flags & MDP_PP_OPS_DISABLE)
+				pp_sts->pgc_sts &= ~PP_STS_ENABLE;
+			else if (pgc_config->flags & MDP_PP_OPS_ENABLE)
+				pp_sts->pgc_sts |= PP_STS_ENABLE;
+			pp_sts_set_split_bits(&pp_sts->pgc_sts, pgc_config->flags);
 		}
-		if (pgc_config->flags & MDP_PP_OPS_DISABLE)
-			pp_sts->pgc_sts &= ~PP_STS_ENABLE;
-		else if (pgc_config->flags & MDP_PP_OPS_ENABLE)
-			pp_sts->pgc_sts |= PP_STS_ENABLE;
-		pp_sts_set_split_bits(&pp_sts->pgc_sts, pgc_config->flags);
 	}
 
 	pp_dspp_opmode_config(ctl, dspp_num, pp_sts, mdata->mdp_rev, &opmode);
@@ -1734,14 +1786,22 @@
 
 	/* treat fb_num the same as block logical id*/
 	disp_num = ctl->mfd->index;
+	if (disp_num >= MDSS_MAX_MIXER_DISP_NUM) {
+		pr_warn("Invalid display number found, %u", disp_num);
+		return -EINVAL;
+	}
 
 	mixer_cnt = mdss_mdp_get_ctl_mixers(disp_num, mixer_id);
 	if (!mixer_cnt) {
 		valid_mixers = false;
-		ret = -EINVAL;
-		pr_warn("Configuring post processing without mixers, err = %d",
-									ret);
-		goto exit;
+		/* exit if mixer is not writeback */
+		if (!ctl->mixer_left ||
+		   (ctl->mixer_left->type == MDSS_MDP_MIXER_TYPE_INTF)) {
+			ret = -EINVAL;
+			pr_warn("No mixers for post processing err = %d\n",
+				ret);
+			goto exit;
+		}
 	}
 	if (mdata->nad_cfgs == 0)
 		valid_mixers = false;
@@ -1771,7 +1831,7 @@
 		pp_dspp_setup(disp_num, ctl->mixer_right);
 	}
 	/* clear dirty flag */
-	if (disp_num < MDSS_BLOCK_DISP_NUM) {
+	if (disp_num < MDSS_MAX_MIXER_DISP_NUM) {
 		mdss_pp_res->pp_disp_flags[disp_num] = 0;
 		if (disp_num < mdata->nad_cfgs)
 			mdata->ad_cfgs[disp_num].reg_sts = 0;
@@ -1791,41 +1851,12 @@
 	struct pp_sts_type pp_sts;
 	struct mdss_ad_info *ad;
 	struct mdss_data_type *mdata = ctl->mdata;
+	struct msm_fb_data_type *bl_mfd;
 	if (dspp_num >= MDSS_MDP_MAX_DSPP) {
 		pr_warn("invalid dspp_num");
 		return -EINVAL;
 	}
 	disp_num = ctl->mfd->index;
-
-	if (dspp_num < mdata->nad_cfgs) {
-		ret = mdss_mdp_get_ad(ctl->mfd, &ad);
-		if (ret)
-			return ret;
-
-		if (PP_AD_STATE_CFG & ad->state)
-			pp_ad_cfg_write(&mdata->ad_off[dspp_num], ad);
-		if (PP_AD_STATE_INIT & ad->state)
-			pp_ad_init_write(&mdata->ad_off[dspp_num], ad, ctl);
-		if ((PP_AD_STATE_DATA & ad->state) &&
-			(ad->sts & PP_STS_ENABLE)) {
-			bl = ad->bl_mfd->bl_level;
-			ad->last_bl = bl;
-			if (ad->state & PP_AD_STATE_BL_LIN) {
-				bl = ad->bl_lin[bl >> ad->bl_bright_shift];
-				bl = bl << ad->bl_bright_shift;
-				ret = pp_ad_attenuate_bl(bl, &bl, ad->mfd);
-				if (ret)
-					pr_err("Failed to attenuate BL\n");
-			}
-			linear_map(bl, &ad->bl_data,
-				ad->bl_mfd->panel_info->bl_max,
-				MDSS_MDP_AD_BL_SCALE);
-			pp_ad_input_write(&mdata->ad_off[dspp_num], ad);
-		}
-		if ((PP_AD_STATE_VSYNC & ad->state) && ad->calc_itr)
-			ctl->add_vsync_handler(ctl, &ad->handle);
-	}
-
 	pp_sts = mdss_pp_res->pp_disp_sts[disp_num];
 
 	if (pp_sts.pa_sts & PP_STS_ENABLE) {
@@ -1893,6 +1924,44 @@
 	}
 
 	mdss_pp_res->pp_disp_flags[disp_num] |= flags;
+
+	if (dspp_num < mdata->nad_cfgs) {
+		ret = mdss_mdp_get_ad(ctl->mfd, &ad);
+		if (ret) {
+			pr_warn("Failed to get AD info, err = %d\n", ret);
+			return ret;
+		}
+		if (ctl->mfd->panel_info->type == WRITEBACK_PANEL) {
+			bl_mfd = mdss_get_mfd_from_index(0);
+			if (!bl_mfd) {
+				ret = -EINVAL;
+				pr_warn("Failed to get primary FB bl handle, err = %d\n",
+						ret);
+				return ret;
+			}
+		} else {
+			bl_mfd = ctl->mfd;
+		}
+
+		mutex_lock(&ad->lock);
+		bl = bl_mfd->ad_bl_level;
+		if (PP_AD_STATE_CFG & ad->state)
+			pp_ad_cfg_write(&mdata->ad_off[dspp_num], ad);
+		if (PP_AD_STATE_INIT & ad->state)
+			pp_ad_init_write(&mdata->ad_off[dspp_num], ad, ctl);
+		if ((PP_AD_STATE_DATA & ad->state) &&
+				(ad->sts & PP_STS_ENABLE)) {
+			ad->last_bl = bl;
+			linear_map(bl, &ad->bl_data,
+					ad->bl_mfd->panel_info->bl_max,
+					MDSS_MDP_AD_BL_SCALE);
+			pp_ad_input_write(&mdata->ad_off[dspp_num], ad);
+		}
+		if ((PP_AD_STATE_VSYNC & ad->state) && ad->calc_itr)
+			ctl->add_vsync_handler(ctl, &ad->handle);
+		mutex_unlock(&ad->lock);
+	}
+
 	return 0;
 }
 
@@ -1902,6 +1971,10 @@
 	struct mdss_data_type *mdata = mdss_mdp_get_mdata();
 	struct mdss_mdp_pipe *vig;
 	struct msm_bus_scale_pdata *pp_bus_pdata;
+	struct mdp_pgc_lut_data *gc_cfg;
+
+	if (!mdata)
+		return -EPERM;
 
 	mutex_lock(&mdss_pp_mutex);
 	if (!mdss_pp_res) {
@@ -1921,6 +1994,17 @@
 				init_completion(
 					&mdss_pp_res->dspp_hist[i].first_kick);
 			}
+
+			/*
+			 * Set LM ARGC flags to disable. This would program
+			 * default GC which would allow for rounding in HW.
+			 */
+			for (i = 0; i < MDSS_MAX_MIXER_DISP_NUM; i++) {
+				gc_cfg = &mdss_pp_res->argc_disp_cfg[i];
+				gc_cfg->flags = MDP_PP_OPS_DISABLE;
+				mdss_pp_res->pp_disp_flags[i] |=
+					PP_FLAGS_DIRTY_ARGC;
+			}
 		}
 	}
 	if (mdata && mdata->vig_pipes) {
@@ -1967,6 +2051,89 @@
 		mutex_unlock(&mdss_pp_mutex);
 	}
 }
+int mdss_mdp_pp_overlay_init(struct msm_fb_data_type *mfd)
+{
+	if (!mfd) {
+		pr_err("Invalid mfd.\n");
+		return -EPERM;
+	}
+
+	mfd->mdp.ad_calc_bl = pp_ad_calc_bl;
+	return 0;
+}
+
+static int pp_ad_calc_bl(struct msm_fb_data_type *mfd, int bl_in, int *bl_out,
+		bool *bl_out_notify)
+{
+	int ret = -1;
+	int temp = bl_in;
+	u32 ad_bl_out = 0;
+	struct mdss_ad_info *ad;
+
+	ret = mdss_mdp_get_ad(mfd, &ad);
+	if (ret == -ENODEV) {
+		pr_debug("AD not supported on device.\n");
+		return ret;
+	} else if (ret || !ad) {
+		pr_err("Failed to get ad info: ret = %d, ad = 0x%p.\n",
+				ret, ad);
+		return ret;
+	}
+
+	mutex_lock(&ad->lock);
+	if (!(ad->state & PP_AD_STATE_RUN)) {
+		pr_debug("AD is not running.\n");
+		mutex_unlock(&ad->lock);
+		return -EPERM;
+	}
+
+	if (!ad->bl_mfd || !ad->bl_mfd->panel_info ||
+			!ad->bl_att_lut) {
+		pr_err("Invalid ad info: bl_mfd = 0x%p, ad->bl_mfd->panel_info = 0x%p, bl_att_lut = 0x%p\n",
+				ad->bl_mfd,
+				(!ad->bl_mfd) ? NULL : ad->bl_mfd->panel_info,
+				ad->bl_att_lut);
+		mutex_unlock(&ad->lock);
+		return -EINVAL;
+	}
+
+	ret = pp_ad_linearize_bl(ad, bl_in, &temp,
+			MDP_PP_AD_BL_LINEAR);
+	if (ret) {
+		pr_err("Failed to linearize BL: %d\n", ret);
+		mutex_unlock(&ad->lock);
+		return ret;
+	}
+
+	ret = pp_ad_attenuate_bl(ad, temp, &temp);
+	if (ret) {
+		pr_err("Failed to attenuate BL: %d\n", ret);
+		mutex_unlock(&ad->lock);
+		return ret;
+	}
+	ad_bl_out = temp;
+
+	ret = pp_ad_linearize_bl(ad, temp, &temp, MDP_PP_AD_BL_LINEAR_INV);
+	if (ret) {
+		pr_err("Failed to inverse linearize BL: %d\n", ret);
+		mutex_unlock(&ad->lock);
+		return ret;
+	}
+	*bl_out = temp;
+
+	if(!mfd->ad_bl_level)
+		mfd->ad_bl_level = bl_in;
+
+	if (ad_bl_out != mfd->ad_bl_level) {
+		mfd->ad_bl_level = ad_bl_out;
+		*bl_out_notify = true;
+	}
+
+	pp_ad_invalidate_input(mfd);
+	mutex_unlock(&ad->lock);
+	return 0;
+}
+
 static int pp_get_dspp_num(u32 disp_num, u32 *dspp_num)
 {
 	int i;
@@ -4018,34 +4185,42 @@
 	return ret;
 }
 
-static int pp_update_ad_input(struct msm_fb_data_type *mfd)
+/* must call this function from within ad->lock */
+static int pp_ad_invalidate_input(struct msm_fb_data_type *mfd)
 {
 	int ret;
 	struct mdss_ad_info *ad;
-	struct mdss_ad_input input;
 	struct mdss_mdp_ctl *ctl;
 
-	if (!mfd)
+	if (!mfd) {
+		pr_err("Invalid mfd\n");
 		return -EINVAL;
+	}
 	ctl = mfd_to_ctl(mfd);
-	if (!ctl)
+	if (!ctl) {
+		pr_err("Invalid ctl\n");
 		return -EINVAL;
+	}
 
 	ret = mdss_mdp_get_ad(mfd, &ad);
-	if (ret)
-		return ret;
-	if (!ad || ad->cfg.mode == MDSS_AD_MODE_AUTO_BL)
+	if (ret || !ad) {
+		pr_err("Fail to get ad: ret = %d, ad = 0x%p\n", ret, ad);
+		return -EINVAL;
+	}
+	pr_debug("AD backlight level changed (%d), trigger update to AD\n",
+			mfd->ad_bl_level);
+	if (ad->cfg.mode == MDSS_AD_MODE_AUTO_BL) {
+		pr_err("AD auto backlight no longer supported.\n");
 		return -EINVAL;
+	}
 
-	pr_debug("backlight level changed (%d), trigger update to AD",
-						mfd->bl_level);
-	input.mode = ad->cfg.mode;
-	if (MDSS_AD_MODE_DATA_MATCH(ad->cfg.mode, MDSS_AD_INPUT_AMBIENT))
-		input.in.amb_light = ad->ad_data;
-	else
-		input.in.strength = ad->ad_data;
-	/* call to ad_input will trigger backlight read */
-	return mdss_mdp_ad_input(mfd, &input, 0);
+	if (ad->state & PP_AD_STATE_RUN) {
+		ad->calc_itr = ad->cfg.stab_itr;
+		ad->sts |= PP_AD_STS_DIRTY_VSYNC;
+		ad->sts |= PP_AD_STS_DIRTY_DATA;
+	}
+
+	return 0;
 }
 
 int mdss_mdp_ad_config(struct msm_fb_data_type *mfd,
@@ -4054,7 +4229,7 @@
 	struct mdss_ad_info *ad;
 	struct msm_fb_data_type *bl_mfd;
 	int lin_ret = -1, inv_ret = -1, att_ret = -1, ret = 0;
-	u32 ratio_temp, shift = 0, last_ops;
+	u32 last_ops;
 
 	ret = mdss_mdp_get_ad(mfd, &ad);
 	if (ret)
@@ -4087,12 +4262,6 @@
 				sizeof(uint32_t));
 			if (lin_ret || inv_ret)
 				ret = -ENOMEM;
-			ratio_temp =  mfd->panel_info->bl_max / AD_BL_LIN_LEN;
-			while (ratio_temp > 0) {
-				ratio_temp = ratio_temp >> 1;
-				shift++;
-			}
-			ad->bl_bright_shift = shift;
 		} else {
 			ret = -EINVAL;
 		}
@@ -4192,7 +4361,7 @@
 			goto error;
 		}
 		ad->ad_data_mode = MDSS_AD_INPUT_AMBIENT;
-		pr_debug("ambient = %d", input->in.amb_light);
+		pr_debug("ambient = %d\n", input->in.amb_light);
 		ad->ad_data = input->in.amb_light;
 		ad->calc_itr = ad->cfg.stab_itr;
 		ad->sts |= PP_AD_STS_DIRTY_VSYNC;
@@ -4211,7 +4380,7 @@
 			goto error;
 		}
 		ad->ad_data_mode = MDSS_AD_INPUT_STRENGTH;
-		pr_debug("strength = %d", input->in.strength);
+		pr_debug("strength = %d\n", input->in.strength);
 		ad->ad_data = input->in.strength;
 		ad->calc_itr = ad->cfg.stab_itr;
 		ad->sts |= PP_AD_STS_DIRTY_VSYNC;
@@ -4527,26 +4696,18 @@
 		 */
 		ad->sts &= ~PP_AD_STS_DIRTY_DATA;
 		ad->state |= PP_AD_STATE_DATA;
-		mutex_lock(&bl_mfd->bl_lock);
-		bl = bl_mfd->bl_level;
 		pr_debug("dirty data, last_bl = %d ", ad->last_bl);
+		bl = bl_mfd->ad_bl_level;
+
 		if ((ad->cfg.mode == MDSS_AD_MODE_AUTO_STR) &&
 							(ad->last_bl != bl)) {
 			ad->last_bl = bl;
 			ad->calc_itr = ad->cfg.stab_itr;
 			ad->sts |= PP_AD_STS_DIRTY_VSYNC;
-			if (ad->state & PP_AD_STATE_BL_LIN) {
-				bl = ad->bl_lin[bl >> ad->bl_bright_shift];
-				bl = bl << ad->bl_bright_shift;
-				ret = pp_ad_attenuate_bl(bl, &bl, ad->mfd);
-				if (ret)
-					pr_err("Failed to attenuate BL\n");
-			}
 			linear_map(bl, &ad->bl_data,
 				ad->bl_mfd->panel_info->bl_max,
 				MDSS_MDP_AD_BL_SCALE);
 		}
-		mutex_unlock(&bl_mfd->bl_lock);
 		ad->reg_sts |= PP_AD_STS_DIRTY_DATA;
 	}
 
@@ -4590,14 +4751,9 @@
 		bypass = 0;
 		ad->reg_sts |= PP_AD_STS_DIRTY_ENABLE;
 		ad->state |= PP_AD_STATE_RUN;
-		mutex_lock(&bl_mfd->bl_lock);
 		if (bl_mfd != mfd)
 			bl_mfd->ext_ad_ctrl = mfd->index;
-		bl_mfd->mdp.update_ad_input = pp_update_ad_input;
-		bl_mfd->mdp.ad_attenuate_bl = pp_ad_attenuate_bl;
 		bl_mfd->ext_bl_ctrl = ad->cfg.bl_ctrl_mode;
-		mutex_unlock(&bl_mfd->bl_lock);
-
 	} else {
 		if (ad->state & PP_AD_STATE_RUN) {
 			ad->reg_sts = PP_AD_STS_DIRTY_ENABLE;
@@ -4608,7 +4764,6 @@
 			ad->state &= !PP_AD_STATE_CFG;
 			ad->state &= !PP_AD_STATE_DATA;
 			ad->state &= !PP_AD_STATE_BL_LIN;
-			ad->bl_bright_shift = 0;
 			ad->ad_data = 0;
 			ad->ad_data_mode = 0;
 			ad->last_bl = 0;
@@ -4622,12 +4777,8 @@
 				AD_BL_ATT_LUT_LEN);
 			memset(&ad->init, 0, sizeof(struct mdss_ad_init));
 			memset(&ad->cfg, 0, sizeof(struct mdss_ad_cfg));
-			mutex_lock(&bl_mfd->bl_lock);
-			bl_mfd->mdp.update_ad_input = NULL;
-			bl_mfd->mdp.ad_attenuate_bl = NULL;
 			bl_mfd->ext_bl_ctrl = 0;
 			bl_mfd->ext_ad_ctrl = -1;
-			mutex_unlock(&bl_mfd->bl_lock);
 		}
 		ad->state &= ~PP_AD_STATE_RUN;
 	}
@@ -4669,7 +4820,7 @@
 	struct msm_fb_data_type *mfd, *bl_mfd;
 	struct mdss_data_type *mdata;
 	char __iomem *base;
-	u32 bl, calc_done = 0;
+	u32 calc_done = 0;
 	ad = container_of(work, struct mdss_ad_info, calc_work);
 
 	mutex_lock(&ad->lock);
@@ -4711,22 +4862,8 @@
 		if (calc_done) {
 			ad->last_str = 0xFF & readl_relaxed(base +
 						MDSS_MDP_REG_AD_STR_OUT);
-			if (MDSS_AD_RUNNING_AUTO_BL(ad)) {
-				bl = 0xFFFF & readl_relaxed(base +
-						MDSS_MDP_REG_AD_BL_OUT);
-				if (ad->state & PP_AD_STATE_BL_LIN) {
-					bl = bl >> ad->bl_bright_shift;
-					bl = min_t(u32, bl, (AD_BL_LIN_LEN-1));
-					bl = ad->bl_lin_inv[bl];
-					bl = bl << ad->bl_bright_shift;
-				}
-				pr_debug("calc bl = %d", bl);
-				ad->last_str |= bl << 16;
-				mutex_lock(&ad->bl_mfd->bl_lock);
-				if (ad->bl_mfd->bl_level)
-					mdss_fb_set_backlight(ad->bl_mfd, bl);
-				mutex_unlock(&ad->bl_mfd->bl_lock);
-			}
+			if (MDSS_AD_RUNNING_AUTO_BL(ad))
+				pr_err("AD auto backlight no longer supported.\n");
 			pr_debug("calc_str = %d, calc_itr %d",
 							ad->last_str & 0xFF,
 							ad->calc_itr);
@@ -4765,25 +4902,17 @@
 			addr + ((PP_AD_LUT_LEN - 1) * 2));
 }
 
-static int  pp_ad_attenuate_bl(u32 bl, u32 *bl_out,
-	struct msm_fb_data_type *mfd)
+/* must call this function from within ad->lock */
+static int  pp_ad_attenuate_bl(struct mdss_ad_info *ad, u32 bl, u32 *bl_out)
 {
 	u32 shift = 0, ratio_temp = 0;
 	u32 n, lut_interval, bl_att;
-	int ret = -1;
-	struct mdss_ad_info *ad;
 
 	if (bl < 0) {
 		pr_err("Invalid backlight input\n");
-		return ret;
+		return -EINVAL;
 	}
 
-	ret = mdss_mdp_get_ad(mfd, &ad);
-	if (ret || !ad || !ad->bl_mfd || !ad->bl_mfd->panel_info ||
-		!ad->bl_mfd->panel_info->bl_max || !ad->bl_att_lut) {
-		pr_err("Failed to get the ad.\n");
-		return ret;
-	}
 	pr_debug("bl_in = %d\n", bl);
 	/* map panel backlight range to AD backlight range */
 	linear_map(bl, &bl, ad->bl_mfd->panel_info->bl_max,
@@ -4798,7 +4927,7 @@
 	n = bl >> shift;
 	if (n >= (AD_BL_ATT_LUT_LEN - 1)) {
 		pr_err("Invalid index for BL attenuation: %d.\n", n);
-		return ret;
+		return -EINVAL;
 	}
 	lut_interval = (MDSS_MDP_AD_BL_SCALE + 1) / (AD_BL_ATT_LUT_LEN - 1);
 	bl_att = ad->bl_att_lut[n] + (bl - lut_interval * n) *
@@ -4816,6 +4945,63 @@
 	/* map AD backlight range back to panel backlight range */
 	linear_map(*bl_out, bl_out, MDSS_MDP_AD_BL_SCALE,
 		ad->bl_mfd->panel_info->bl_max);
+
+	pr_debug("bl_out = %d\n", *bl_out);
+	return 0;
+}
+
+/* must call this function from within ad->lock */
+static int pp_ad_linearize_bl(struct mdss_ad_info *ad, u32 bl, u32 *bl_out,
+	int inv)
+{
+
+	u32 n;
+	int ret = -EINVAL;
+
+	if (bl < 0 || bl > ad->bl_mfd->panel_info->bl_max) {
+		pr_err("Invalid backlight input: bl = %d, bl_max = %d\n", bl,
+			ad->bl_mfd->panel_info->bl_max);
+		return -EINVAL;
+	}
+
+	pr_debug("bl_in = %d, inv = %d\n", bl, inv);
+
+	/* map panel backlight range to AD backlight range */
+	linear_map(bl, &bl, ad->bl_mfd->panel_info->bl_max,
+		MDSS_MDP_AD_BL_SCALE);
+
+	pr_debug("Before linearization = %d\n", bl);
+	n = bl * (AD_BL_LIN_LEN - 1) / MDSS_MDP_AD_BL_SCALE;
+	pr_debug("n = %d\n", n);
+	if (n > (AD_BL_LIN_LEN - 1)) {
+		pr_err("Invalid index for BL linearization: %d.\n", n);
+		return ret;
+	} else if (n == (AD_BL_LIN_LEN - 1)) {
+		if (inv == MDP_PP_AD_BL_LINEAR_INV)
+			*bl_out = ad->bl_lin_inv[n];
+		else if (inv == MDP_PP_AD_BL_LINEAR)
+			*bl_out = ad->bl_lin[n];
+	} else {
+		/* linear piece-wise interpolation */
+		if (inv == MDP_PP_AD_BL_LINEAR_INV) {
+			*bl_out = bl * (AD_BL_LIN_LEN - 1) *
+				(ad->bl_lin_inv[n + 1] - ad->bl_lin_inv[n]) /
+				MDSS_MDP_AD_BL_SCALE - n *
+				(ad->bl_lin_inv[n + 1] - ad->bl_lin_inv[n]) +
+				ad->bl_lin_inv[n];
+		} else if (inv == MDP_PP_AD_BL_LINEAR) {
+			*bl_out = bl * (AD_BL_LIN_LEN - 1) *
+				(ad->bl_lin[n + 1] - ad->bl_lin[n]) /
+				MDSS_MDP_AD_BL_SCALE -
+				n * (ad->bl_lin[n + 1] - ad->bl_lin[n]) +
+				ad->bl_lin[n];
+		}
+	}
+	pr_debug("After linearization = %d\n", *bl_out);
+
+	/* map AD backlight range back to panel backlight range */
+	linear_map(*bl_out, bl_out, MDSS_MDP_AD_BL_SCALE,
+		ad->bl_mfd->panel_info->bl_max);
 
 	pr_debug("bl_out = %d\n", *bl_out);
 	return 0;
diff -Nur a/drivers/video/msm/mdss/mdss_mdp_rotator.c b/drivers/video/msm/mdss/mdss_mdp_rotator.c
--- a/drivers/video/msm/mdss/mdss_mdp_rotator.c	2016-01-10 16:25:37.430141000 -0500
+++ b/drivers/video/msm/mdss/mdss_mdp_rotator.c	2015-12-01 05:57:16.000000000 -0500
@@ -1,4 +1,4 @@
-/* Copyright (c) 2012-2015, The Linux Foundation. All rights reserved.
+/* Copyright (c) 2012-2014, The Linux Foundation. All rights reserved.
  *
  * This program is free software; you can redistribute it and/or modify
  * it under the terms of the GNU General Public License version 2 and
@@ -475,7 +475,7 @@
 			goto rot_err;
 		}
 
-		if (work_busy(&rot->commit_work)) {
+		if (work_pending(&rot->commit_work)) {
 			mutex_unlock(&rotator_lock);
 			flush_work(&rot->commit_work);
 			mutex_lock(&rotator_lock);
@@ -646,11 +646,12 @@
 
 	rot_pipe = rot->pipe;
 	if (rot_pipe) {
-		if (work_busy(&rot->commit_work)) {
+		if (work_pending(&rot->commit_work)) {
 			mutex_unlock(&rotator_lock);
-			flush_work(&rot->commit_work);
+			cancel_work_sync(&rot->commit_work);
 			mutex_lock(&rotator_lock);
 		}
+
 		mdss_mdp_rotator_busy_wait(rot);
 		list_del(&rot->head);
 	}
diff -Nur a/drivers/video/msm/mdss/mdss_mdp_splash_logo.c b/drivers/video/msm/mdss/mdss_mdp_splash_logo.c
--- a/drivers/video/msm/mdss/mdss_mdp_splash_logo.c	2016-01-10 16:25:37.430141000 -0500
+++ b/drivers/video/msm/mdss/mdss_mdp_splash_logo.c	2015-12-01 05:57:13.000000000 -0500
@@ -229,8 +229,8 @@
 			}
 		}
 	}
-
-	if (rc || mdp5_data->handoff) {
+	if (rc || mdp5_data->handoff)
+	{
 		/* Add all the handed off pipes to the cleanup list */
 		mdss_mdp_handoff_cleanup_pipes(mfd, MDSS_MDP_PIPE_TYPE_RGB);
 		mdss_mdp_handoff_cleanup_pipes(mfd, MDSS_MDP_PIPE_TYPE_VIG);
diff -Nur a/drivers/video/msm/mdss/mdss_mdp_wb.c b/drivers/video/msm/mdss/mdss_mdp_wb.c
--- a/drivers/video/msm/mdss/mdss_mdp_wb.c	2016-01-10 16:25:37.430141000 -0500
+++ b/drivers/video/msm/mdss/mdss_mdp_wb.c	2015-12-01 05:57:13.000000000 -0500
@@ -406,11 +406,28 @@
 	int ret;
 
 	if (!list_empty(&wb->register_queue)) {
+		struct ion_client *iclient = mdss_get_ionclient();
+		struct ion_handle *ihdl;
+
+		if (!iclient) {
+			pr_err("iclient is NULL\n");
+			return NULL;
+		}
+
+		ihdl = ion_import_dma_buf(iclient, data->memory_id);
+		if (IS_ERR_OR_NULL(ihdl)) {
+			pr_err("unable to import fd %d\n", data->memory_id);
+			return NULL;
+		}
+		/* only interested in ptr address, so we can free handle */
+		ion_free(iclient, ihdl);
+
 		list_for_each_entry(node, &wb->register_queue, registered_entry)
-			if ((node->buf_info.memory_id == data->memory_id) &&
+			if ((node->buf_data.p[0].srcp_ihdl == ihdl) &&
 				    (node->buf_info.offset == data->offset)) {
-				pr_debug("found node fd=%x off=%x addr=%x\n",
-						data->memory_id, data->offset,
+				pr_debug("found fd=%d hdl=%p off=%x addr=%x\n",
+						data->memory_id, ihdl,
+						data->offset,
 						node->buf_data.p[0].addr);
 				return node;
 			}
@@ -465,8 +482,9 @@
 
 	if (node->user_alloc) {
 		buf = &node->buf_data.p[0];
-		pr_debug("free user node mem_id=%d offset=%u addr=0x%x\n",
+		pr_debug("free user mem_id=%d ihdl=%p, offset=%u addr=0x%x\n",
 				node->buf_info.memory_id,
+				buf->srcp_ihdl,
 				node->buf_info.offset,
 				buf->addr);
 
@@ -547,6 +565,7 @@
 {
 	struct mdss_mdp_wb *wb = mfd_to_wb(mfd);
 	struct mdss_mdp_wb_data *node = NULL;
+	struct mdss_mdp_ctl *ctl = mfd_to_ctl(mfd);
 	int ret;
 
 	if (!wb) {
@@ -554,6 +573,11 @@
 		return -ENODEV;
 	}
 
+	if (!ctl) {
+		pr_err("unable to dequeue, ctl is not initialized\n");
+		return -ENODEV;
+	}
+
 	ret = wait_event_interruptible(wb->wait_q, is_buffer_ready(wb));
 	if (ret) {
 		pr_err("failed to get dequeued buffer\n");
@@ -563,6 +587,7 @@
 	mutex_lock(&wb->lock);
 	if (wb->state == WB_STOPING) {
 		pr_debug("wfd stopped\n");
+		mdss_mdp_display_wait4comp(ctl);
 		wb->state = WB_STOP;
 		ret = -ENOBUFS;
 	} else if (!list_empty(&wb->busy_queue)) {
diff -Nur a/drivers/video/msm/mdss/mdss_panel.h b/drivers/video/msm/mdss/mdss_panel.h
--- a/drivers/video/msm/mdss/mdss_panel.h	2016-01-10 16:25:37.430141000 -0500
+++ b/drivers/video/msm/mdss/mdss_panel.h	2015-12-01 05:57:13.000000000 -0500
@@ -267,6 +267,7 @@
 	bool dynamic_switch_enabled;
 	u32 pixel_packing;
 	u32 dsi_pclk_rate;
+	u32 samsung_power_on_reset_delay;
 	/* The packet-size should not bet changed */
 	char no_max_pkt_size;
 	/* Clock required during LP commands */
diff -Nur a/drivers/video/msm/mdss/mdss_s6e8aa0a_hd_dsi_panel.c b/drivers/video/msm/mdss/mdss_s6e8aa0a_hd_dsi_panel.c
--- a/drivers/video/msm/mdss/mdss_s6e8aa0a_hd_dsi_panel.c	2016-01-10 16:25:37.431141000 -0500
+++ b/drivers/video/msm/mdss/mdss_s6e8aa0a_hd_dsi_panel.c	2015-12-01 05:57:13.000000000 -0500
@@ -89,7 +89,7 @@
 	0x08, 0x23, 0x37, 0xC0, 0xC1,
 	0x01, 0x81, 0xC1, 0x00, 0xC3,
 	0xF6, 0xF6, 0xC1,
-	
+
 /*	0x00, 0x00, 0x00, 0x00,
 	0x00, 0x00, 0x00, 0x00,*/
 };
@@ -99,7 +99,7 @@
 	0x14, 0x40, 0x0C, 0xCB, 0xCE,
 	0x6E, 0xC4, 0x07, 0xC0, 0x41,
 	0xC1, 0x00, 0x60, 0x19,
-	
+
 /*	0x00, 0x00, 0x00, 0x00,
 	0x00, 0x00, 0x00, 0x00,*/
 };
@@ -111,7 +111,7 @@
 	0x00, 0x00, 0x00, 0x00, 0x00,
 	0x00, 0x00, 0x00, 0x00, 0x00,
 	0x00, 0x00, 0x00, 0x00, 0x00,
-	
+
 /*	0x00, 0x00, 0x00, 0x00,
 	0x00, 0x00, 0x00, 0x00,*/
 };
@@ -119,7 +119,7 @@
 static char gamma_set_update[] = {
 	0xF7,
 	0x03,
-	
+
 /*	0x00, 0x00, 0x00, 0x00,
 	0x00, 0x00, 0x00, 0x00,*/
 };
@@ -143,7 +143,7 @@
 static char acl_on[] = {
 	0xC0,
 	0x01,
-	
+
 	0x00, 0x00, 0x00, 0x00,
 	0x00, 0x00, 0x00, 0x00,
 };
@@ -178,8 +178,8 @@
 	0x00, 0x00, 0x00, 0x00, 0x00,
 	0x01, 0x06, 0x0A, 0x0F, 0x14, 0x19,
 	0x1D, 0x22, 0x27, 0x2B, 0x30,
-	
-	
+
+
 };
 
 
@@ -226,8 +226,8 @@
 	0x0C,// 0 = 20_dimming,
 	0x0C,// 1 = 30
 	0x0C,  // 2 = 40
-	0x0C,//3        	
-	0x0C,//4 	
+	0x0C,//3
+	0x0C,//4
 	0x0C,//5 = 70
 	0x0C,//6 = 80
 	0x0C,//7 = 90
@@ -267,8 +267,8 @@
 	0x11,// 0 = 20_dimming,
 	0x11,// 1 = 30
 	0x11,  // 2 = 40
-	0x11,//3        	
-	0x11,//4 	
+	0x11,//3
+	0x11,//4
 	0x11,//5 = 70
 	0x11,//6 = 80
 	0x11,//7 = 90
@@ -379,8 +379,8 @@
 	 sizeof(ACL_COND_SET_40)}, ACL_COND_SET_40}
 	,
 };
-	
-	
+
+
 
 static struct dsi_cmd_desc DSI_CMD_ACL_40 = {
 	{DTYPE_DCS_LWRITE, 1, 0, 0, 0, sizeof(ACL_COND_SET_40)}, ACL_COND_SET_40 };
@@ -438,7 +438,7 @@
 	int backlightlevel;
 
 	//brightness setting from platform is from 0 to 255
-	 // But in this driver, brightness is only supported from 0 to 24 
+	 // But in this driver, brightness is only supported from 0 to 24
 
 	switch (bl_level) {
 	case 0 ... 20:
@@ -584,7 +584,7 @@
 	cd = get_candela_index(bl_level);
 	elvss_pulse = mpd.lcd_elvss_data[0];
 
-	if (msd.dstat.acl_on) 
+	if (msd.dstat.acl_on)
 	{
 		calc_elvss = elvss_pulse + GET_SMART_ACL_ID_4_8[cd];
 	}
@@ -610,7 +610,7 @@
 
 #define aid_ratio_index 18
 static int aid_below_110_ratio_table[10][2] = {
-	//	RATIO	
+	//	RATIO
 	{20,	0x88},
 	{30,	0x7A},
 	{40,	0x6C},
@@ -620,7 +620,7 @@
 	{80,	0x32},
 	{90,	0x22},
 	{100,	0x12},
-	//upper 110CD 
+	//upper 110CD
 	{110,	0x42},
 };
 static int  aid_operation(int lux)
@@ -702,7 +702,7 @@
 			aid_status = 1;
 		}
 		pr_debug("%s brightness_level : %d adi_status:%d\n", __func__,lux, aid_status);
-	
+
 	no_change = (panel_cond_aid_ref_1 == panel_cond_aid_ref[1])
 		&& (panel_cond_aid_ref_18 == panel_cond_aid_ref[18])
 		&& (etc_cond_set3_aid_ref_9 == etc_cond_set3_aid_ref[9]);
@@ -728,7 +728,7 @@
 
 	if (gamma_mode == GAMMA_SMART) {
 
-		//  SMART Dimming gamma_lux;  
+		//  SMART Dimming gamma_lux;
 		char pBuffer[256];
 		int i;
 		int gamma_lux;
@@ -798,7 +798,7 @@
 	if (!set_elvss_level_4_8(bl_level)){
 		cmds_send_flag |= 1<<1;
 	}
-	
+
 	if (msd.dstat.acl_on) {
 		int acl_change = is_acl_para_change(bl_level);
 		int acl_30_40_case = set_acl_on_level(bl_level);
@@ -824,7 +824,7 @@
 		cmd_size++;
 	}
 
-	if (cmds_send_flag & 0x10) { // acl update 
+	if (cmds_send_flag & 0x10) { // acl update
 
 		combined_ctrl[cmd_size].payload =
 			samsung_panel_acl_update_cmds[0].payload;
@@ -844,7 +844,7 @@
 	cmd_size++;
 
 	if (cmds_send_flag & 0x1) {
-		// aid change 
+		// aid change
 		combined_ctrl[cmd_size].payload = panel_cond_aid_ref;
 		combined_ctrl[cmd_size].dchdr.dlen = sizeof(panel_cond_aid_ref);
 		cmd_size++;
@@ -854,7 +854,7 @@
 		cmd_size++;
 	}
 
-	if (cmds_send_flag & 0x2) { // elvss change 
+	if (cmds_send_flag & 0x2) { // elvss change
 
 		combined_ctrl[cmd_size].payload =
 			samsung_panel_elvss_update_cmds[0].payload;
@@ -929,7 +929,7 @@
 	memset(&cmdreq, 0, sizeof(cmdreq));
 	cmdreq.cmds = cmds;
 	cmdreq.cmds_cnt = cnt;
-	
+
 	if (flag & CMD_REQ_SINGLE_TX) {
 		cmdreq.flags = CMD_REQ_SINGLE_TX | CMD_CLK_CTRL | CMD_REQ_COMMIT;
 	}else
@@ -937,9 +937,9 @@
 
 	cmdreq.rlen = 0;
 	cmdreq.cb = NULL;
-	
+
 	mdss_dsi_cmdlist_put(ctrl, &cmdreq);
-	
+
 }
 
 
@@ -975,15 +975,15 @@
         cmdreq.flags = CMD_REQ_RX | CMD_REQ_COMMIT;
         cmdreq.rlen = rlen;
         cmdreq.cb = NULL;
-        
+
         // This mutex is to sync up with dynamic FPS changes
     	// so that DSI lockups shall not happen
-    	
+
     	BUG_ON(msd.ctrl_pdata == NULL);
 //    	mutex_lock(&msd.ctrl_pdata->dfps_mutex);
         mdss_dsi_cmdlist_put(ctrl, &cmdreq);
 //      mutex_unlock(&msd.ctrl_pdata->dfps_mutex);
-        
+
          // blocked here, untill call back called
         return ctrl->rx_buf.len;
 }
@@ -995,23 +995,23 @@
 	const int one_read_size = 4;
 
 	const int loop_limit = 16;
-	// first byte = read-register 
+	// first byte = read-register
 	static char read_reg[2] = { 0xFF, 0x00 };
 	static struct dsi_cmd_desc s6e8aa0_read_reg_cmd[] = {{
 	{DTYPE_DCS_READ, 1, 0, 1, 5, sizeof(read_reg)}, read_reg}, };
-	// first byte is size of Register 
+	// first byte is size of Register
 	static char packet_size[] = { 0x04, 0 };
 	static struct dsi_cmd_desc s6e8aa0_packet_size_cmd[] = {{
 	{DTYPE_MAX_PKTSIZE, 1, 0, 0, 0, sizeof(packet_size)}, packet_size}, };
 
-	// second byte is Read-position 
+	// second byte is Read-position
 	static char reg_read_pos[] = { 0xB0, 0x00 };
 	static struct dsi_cmd_desc s6e8aa0_read_pos_cmd[] = {{
 	{DTYPE_DCS_WRITE1, 1, 0, 0, 0, sizeof(reg_read_pos)},reg_read_pos}, };
 
 	struct dsi_cmd_desc *cmd_desc;
 	int cmd_size = 0;
-        
+
 	int flag = 0;
 
 
@@ -1036,7 +1036,7 @@
 	cmd_size = ARRAY_SIZE(s6e8aa0_packet_size_cmd);
 
 	packet_size[0] = (char)srcLength;
-	
+
 	mdss_dsi_cmds_send(msd.ctrl_pdata, cmd_desc, cmd_size, flag);
 
 
@@ -1174,7 +1174,7 @@
 	return scaled_level;
 }
 
-#if defined (CONFIG_LCD_CLASS_DEVICE) 
+#if defined (CONFIG_LCD_CLASS_DEVICE)
 static char lcd_cabc[2] = {0x55, 0x0};	/* CABC COMMAND : default disabled */
 static struct dsi_cmd_desc cabc_cmd= {
 	{DTYPE_DCS_WRITE1, 1, 0, 0, 1, sizeof(lcd_cabc)},
@@ -1183,7 +1183,7 @@
 
 static void mdss_dsi_panel_cabc_dcs(struct mdss_dsi_ctrl_pdata *ctrl, int siop_status)
 {
-	
+
 	struct dcs_cmd_req cmdreq;
 
 	pr_debug("%s: cabc=%d\n", __func__, siop_status);
@@ -1267,7 +1267,7 @@
 			pr_debug("%s: Reset panel done\n", __func__);
 		}
 	} else {
-		
+
 		if (gpio_is_valid(ctrl_pdata->disp_en_gpio))
 			gpio_set_value((ctrl_pdata->disp_en_gpio), 0);
 
@@ -1329,17 +1329,17 @@
 			cmd_size = mpd.acl_off.size;
 
 			break;
-			
+
 		case PANEL_ACL_UPDATE:
 
 			cmd_desc = mpd.acl_update.cmd;
 			cmd_size = mpd.acl_update.size;
-			
+
 			break;
 
 		default:
 		pr_err("%s: Unknown acl_ctrl configuration\n",__func__);
-		
+
 		break;
 	}
 
@@ -1352,7 +1352,7 @@
 				}
 #endif
 
-				mdss_dsi_cmds_send(ctrl_pdata, cmd_desc, cmd_size, flag);		
+				mdss_dsi_cmds_send(ctrl_pdata, cmd_desc, cmd_size, flag);
 
 
 	return;
@@ -1380,7 +1380,7 @@
 	struct mdss_panel_data *pdata = msd.mpd;
 	struct mdss_dsi_ctrl_pdata *ctrl_pdata = NULL;
 	struct msm_fb_data_type *mfd= msd.mfd;
-	struct mdss_mdp_ctl *msdCtl = mfd_to_ctl(mfd); 
+	struct mdss_mdp_ctl *msdCtl = mfd_to_ctl(mfd);
 
 	if(msd.mfd == NULL){
 		pr_err("%s: mfd not initialized Skip ESD recovery\n", __func__);
@@ -1402,15 +1402,15 @@
 	err_fg_working = 1;
 
 	mdss_mdp_rotator_unset(MDSS_MDP_ROT_SESSION_MASK);
-	
+
 	msd.mfd->fbi->esd_active = true;
 	msd.mfd->fbi->fbops->fb_blank(FB_BLANK_POWERDOWN, msd.mfd->fbi);
 	msd.mfd->fbi->fbops->fb_blank(FB_BLANK_UNBLANK, msd.mfd->fbi);
 
-	if (msdCtl->vsync_handler.enabled == 0) { 
+	if (msdCtl->vsync_handler.enabled == 0) {
 		mdss_mdp_overlay_vsync_ctrl(msd.mfd, 1);
-//	        mdss_mdp_irq_clear(msdCtl->mdata, MDSS_MDP_IRQ_INTF_VSYNC, msdCtl->intf_num); 
-//		mdss_mdp_irq_enable(MDSS_MDP_IRQ_INTF_VSYNC, msdCtl->intf_num); 
+//	        mdss_mdp_irq_clear(msdCtl->mdata, MDSS_MDP_IRQ_INTF_VSYNC, msdCtl->intf_num);
+//		mdss_mdp_irq_enable(MDSS_MDP_IRQ_INTF_VSYNC, msdCtl->intf_num);
 	}
 
 	esd_count++;
@@ -1479,11 +1479,11 @@
 
 	if(first_boot == 0)
 	{
-		
+
 		msd.mfd = (struct msm_fb_data_type *)registered_fb[0]->par;
 		panel_state = MIPI_RESUME_STATE;
 		msd.mpd = pdata;
-	
+
 		msd.ctrl_pdata = ctrl_pdata;
 		first_boot =1;
 
@@ -1498,9 +1498,9 @@
 				psmart->plux_table = mpd.lux_table;
 				psmart->lux_table_max = mpd.lux_table_max_cnt;
 				psmart->ldi_revision = 0x60;
-		
+
 				smart_dimming_init(psmart);
-		
+
 				msd.dstat.is_smart_dim_loaded = true;
 
 			}
@@ -1509,12 +1509,12 @@
 						GAMMA_SET_MAX);
 			reset_gamma_level();
 #if defined(CONFIG_ESD_ERR_FG_RECOVERY)
-#if defined (CONFIG_LCD_CONNECTION_CHECK)	
+#if defined (CONFIG_LCD_CONNECTION_CHECK)
 			if(lcd_connected_status == 1){
 #endif
 					INIT_WORK(&err_fg_work, err_fg_work_func);
-					
-					rc = request_threaded_irq(err_fg_gpio, NULL, err_fg_irq_handler, 
+
+					rc = request_threaded_irq(err_fg_gpio, NULL, err_fg_irq_handler,
 						IRQF_TRIGGER_LOW | IRQF_ONESHOT, "esd_detect", NULL);
 					if (rc) {
 						pr_err("%s : Failed to request_irq. :ret=%d", __func__, rc);
@@ -1528,7 +1528,7 @@
 #endif
 #endif
 	}
-	
+
 #if defined(CONFIG_ESD_ERR_FG_RECOVERY)
 	if (err_fg_working) {
 		pr_info("[LCD] %s : esd is working!! return.. \n", __func__);
@@ -1538,7 +1538,7 @@
 
 	if(bl_level)
 	msd.mfd->bl_previous = bl_level;
-	
+
 	switch (ctrl_pdata->bklt_ctrl) {
 
 	case BL_DCS_CMD:
@@ -1553,7 +1553,7 @@
 					pr_info("cmds_sent: %x\n", cmds_sent);
 					goto end;
 				}
-				
+
 				cmd_desc = mpd.combined_ctrl.cmd;
 				cmd_size = mpd.combined_ctrl.size;
 
@@ -1566,15 +1566,15 @@
 				}
 #endif
 
-				mdss_dsi_cmds_send(ctrl_pdata, cmd_desc, cmd_size, flag);				
-				
+				mdss_dsi_cmds_send(ctrl_pdata, cmd_desc, cmd_size, flag);
+
 				}
-			
+
 		break;
-		
+
 	default:
 		pr_err("%s: Unknown bl_ctrl configuration\n",__func__);
-		
+
 		break;
 	}
 
@@ -1585,35 +1585,35 @@
 static int mdss_dsi_panel_on(struct mdss_panel_data *pdata)
 {
 	struct mdss_dsi_ctrl_pdata *ctrl = NULL;
-	
+
 	msd.mfd = (struct msm_fb_data_type *)registered_fb[0]->par;
 	if (pdata == NULL) {
 		pr_err("%s: Invalid input data\n", __func__);
 		return -EINVAL;
 	}
-	
+
 	ctrl = container_of(pdata, struct mdss_dsi_ctrl_pdata,
 				panel_data);
-	
+
 	msd.ctrl_pdata = ctrl;
 	msd.mpd = pdata;
-	
+
 	printk("%s: ctrl=%p ndx=%d\n", __func__, ctrl, ctrl->ndx);
-	
+
 			get_min_lux_table(&(mpd.gamma_initial[2]),
 						GAMMA_SET_MAX);
 			reset_gamma_level();
 
 	if (ctrl->on_cmds.cmd_cnt)
 		mdss_dsi_panel_cmds_send(ctrl, &ctrl->on_cmds);
-		
-#if defined(CONFIG_MACH_S3VE3G_EUR)	
+
+#if defined(CONFIG_MACH_S3VE3G_EUR)
 	if(bl_first_update== 0)
 		pr_err("to maintain ddefault brightness \n");
 	else
 		mdss_dsi_panel_bl_ctrl(pdata,msd.mfd->bl_previous);
 #endif
-	
+
 	panel_state = MIPI_RESUME_STATE;
 #if defined(CONFIG_LCD_CLASS_DEVICE)
 	mdss_dsi_panel_cabc_dcs(ctrl, msd.dstat.siop_status);
@@ -1622,7 +1622,7 @@
 	is_negative_on();
 #endif
 #if defined(CONFIG_ESD_ERR_FG_RECOVERY)
-#if defined (CONFIG_LCD_CONNECTION_CHECK)	
+#if defined (CONFIG_LCD_CONNECTION_CHECK)
 	if(lcd_connected_status == 1){
 #endif
 		if(!esd_irq_on && !err_fg_working) {
@@ -1888,7 +1888,6 @@
 	int rc, i, len, res[2];
 	const char *data;
 	static const char *pdest;
-	static const char *on_cmds_state, *off_cmds_state; 
 	struct mdss_panel_info *pinfo = &(ctrl_pdata->panel_data.panel_info);
 	rc = of_property_read_u32(np, "qcom,mdss-dsi-panel-width", &tmp);
 	if (rc) {
@@ -1942,7 +1941,7 @@
 		pinfo->mipi.dst_format =
 			DSI_VIDEO_DST_FORMAT_RGB888;
 	}
-	
+
 	pdest = of_get_property(np,
 			"qcom,mdss-dsi-panel-destination", NULL);
 	if (strlen(pdest) != 9) {
@@ -1994,7 +1993,7 @@
 			rc = of_property_read_u32(np,
 				"qcom,mdss-dsi-bl-pmic-pwm-frequency", &tmp);
 			if (rc) {
-				pr_err("%s:%d, Error, panel pwm_period\n",		
+				pr_err("%s:%d, Error, panel pwm_period\n",
 					__func__, __LINE__);
 			return -EINVAL;
 			}
@@ -2024,7 +2023,7 @@
 
 	rc = of_property_read_u32(np, "qcom,mdss-dsi-interleave-mode", &tmp);
 	pinfo->mipi.interleave_mode = (!rc ? tmp : 0);
- 
+
 	pinfo->mipi.vsync_enable = of_property_read_bool(np,
 		"qcom,mdss-dsi-te-check-enable");
 	pinfo->mipi.hw_vsync_mode = of_property_read_bool(np,
@@ -2073,7 +2072,7 @@
 
 	rc = of_property_read_u32(np, "qcom,mdss-dsi-color-order", &tmp);
 	pinfo->mipi.rgb_swap = (!rc ? tmp : DSI_RGB_SWAP_RGB);
-	
+
 	rc = of_property_read_u32(np, "qcom,mdss-force-clk-lane-hs", &tmp);
 	pinfo->mipi.force_clk_lane_hs = (!rc ? tmp : 0);
 
@@ -2139,7 +2138,7 @@
 	}
 	for (i = 0; i < len; i++)
 		pinfo->mipi.dsi_phy_db.timing[i] = data[i];
-		
+
 		pinfo->mipi.dsi_phy_db.timing[8] = 0x20;
 
 	mdss_dsi_parse_fbc_params(np, pinfo);
@@ -2148,29 +2147,6 @@
 	mdss_dsi_parse_dcs_cmds(np, &ctrl_pdata->off_cmds,
 		"qcom,mdss-dsi-off-command", "qcom,mdss-dsi-off-command-state");
 
- 
-        on_cmds_state = of_get_property(np, "qcom,mdss-dsi-on-command-state", NULL); 
- 
-        if (!strncmp(on_cmds_state, "dsi_lp_mode", 11)) { 
-            ctrl_pdata->dsi_on_state = DSI_LP_MODE; 
-        } else if (!strncmp(on_cmds_state, "dsi_hs_mode", 11)) { 
-            ctrl_pdata->dsi_on_state = DSI_HS_MODE; 
-        } else { 
-             pr_debug("%s: ON cmds state not specified. Set Default\n", __func__); 
-             ctrl_pdata->dsi_on_state = DSI_LP_MODE; 
-        }
- 
-        off_cmds_state = of_get_property(np, "qcom,mdss-dsi-off-command-state", NULL); 
- 
-        if (!strncmp(off_cmds_state, "dsi_lp_mode", 11)) { 
-            ctrl_pdata->dsi_off_state = DSI_LP_MODE; 
-        } else if (!strncmp(off_cmds_state, "dsi_hs_mode", 11)) { 
-            ctrl_pdata->dsi_off_state = DSI_HS_MODE; 
-        } else { 
-            pr_debug("%s: ON cmds state not specified. Set Default\n", __func__); 
-            ctrl_pdata->dsi_off_state = DSI_LP_MODE; 
-        } 
-        pr_err("[ on state : %d, off state : %d\n",ctrl_pdata->dsi_on_state ,ctrl_pdata->dsi_off_state ); 
 	return 0;
 error:
 	return -EINVAL;
@@ -2197,7 +2173,7 @@
 	struct msm_fb_data_type *mfd;
 	struct mdss_dsi_ctrl_pdata *ctrl_pdata = NULL;
 	struct mdss_panel_data *pdata = msd.mpd;
-	
+
 	mfd = msd.mfd;
 	ctrl_pdata = container_of(pdata, struct mdss_dsi_ctrl_pdata,
 							panel_data);
@@ -2275,14 +2251,14 @@
 static ssize_t mdss_siop_enable_store(struct device *dev,
 		struct device_attribute *attr, const char *buf, size_t size)
 {
-	
+
 	if (sysfs_streq(buf, "1") && !msd.dstat.siop_status)
 		msd.dstat.siop_status = true;
 	else if (sysfs_streq(buf, "0") && msd.dstat.siop_status)
 		msd.dstat.siop_status = false;
 	else
 		pr_info("%s: Invalid argument!!", __func__);
-	
+
 	return size;
 
 }
@@ -2430,7 +2406,7 @@
 	mutex_unlock(&bg_lock);
 	pr_info("%s :[MDSS_s6e8aa0a] CABC: %d\n", __func__,msd.dstat.siop_status);
 
-}	
+}
 
 #endif
 
@@ -2469,11 +2445,11 @@
 		lcd_connected_status = 1;
 	else
 		lcd_connected_status = 0;
-	
+
 	pr_info("detect_lcd_panel_vendor lcd_id = %x & lcd_id3 = %x\n",lcd_id,lcd_id3);
 	pr_info("%s %s", __func__, lcd_connected_status == 1 ?
 				"lcd_attached" : "lcd_detached");
-	
+
 	return 1;
 }
 __setup("lcd_id=0x", detect_lcd_panel_vendor);
@@ -2565,32 +2541,32 @@
 
 	mpd.gamma_update.cmd= samsung_panel_gamma_update_cmds;
 	mpd.gamma_update.size =  ARRAY_SIZE(samsung_panel_gamma_update_cmds);
-			
+
 	mpd.elvss_update.cmd= samsung_panel_elvss_update_cmds;
 	mpd.elvss_update.size= ARRAY_SIZE(samsung_panel_elvss_update_cmds);
-				 
+
 	mpd.elvss_update_4_8.cmd = samsung_panel_elvss_update_cmds_4_8;
 	mpd.elvss_update_4_8.size =	 ARRAY_SIZE(samsung_panel_elvss_update_cmds_4_8);
-				 
+
 	mpd.acl_on.cmd = samsung_panel_acl_on_cmds;
 	mpd.acl_on.size =	ARRAY_SIZE(samsung_panel_acl_on_cmds);
-					
+
 	mpd.acl_off.cmd = samsung_panel_acl_off_cmds;
 	mpd.acl_off.size =  ARRAY_SIZE(samsung_panel_acl_off_cmds);
-					
+
 	mpd.acl_update.cmd = samsung_panel_acl_update_cmds;
 	mpd.acl_update.size = ARRAY_SIZE(samsung_panel_acl_update_cmds);
-			
+
 	mpd.combined_ctrl.cmd = combined_ctrl;
 	mpd.combined_ctrl.size = ARRAY_SIZE(combined_ctrl);
-	
+
 	mpd.gamma_initial = gamma_cond_set_4_8;
 	mpd.gamma_smartdim_4_8 = gamma_cond_300cd_4_8;
 
 	mpd.lcd_current_cd_idx = -1;
 	mpd.lux_table = lux_tbl_acl;
 	mpd.lux_table_max_cnt = ARRAY_SIZE(lux_tbl_acl);
-		
+
 	mpd.set_acl = set_acl_on_level;
 	mpd.prepare_brightness_control_cmd_array = prepare_brightness_control_cmd_array;
 	msd.dstat.gamma_mode = GAMMA_SMART;
@@ -2612,7 +2588,7 @@
 
 	if (rc) {
 		pr_info("sysfs create fail-%s\n",dev_attr_lcd_power.attr.name);
-	
+
 	}
 	rc = sysfs_create_file(&lcd_device->dev.kobj,
 					&dev_attr_lcd_type.attr);
@@ -2627,7 +2603,7 @@
 		pr_info("sysfs create fail-%s\n",
 				dev_attr_power_reduce.attr.name);
 	}
-	
+
 	rc= sysfs_create_file(&lcd_device->dev.kobj,
 					&dev_attr_siop_enable.attr);
 	if (rc) {
@@ -2650,7 +2626,7 @@
 	}
 
 
-	
+
 #endif
 #endif
 #if defined(CONFIG_MDNIE_LITE_TUNING)
diff -Nur a/drivers/video/msm/mdss/mdss_samsung_dsi_panel.c b/drivers/video/msm/mdss/mdss_samsung_dsi_panel.c
--- a/drivers/video/msm/mdss/mdss_samsung_dsi_panel.c	2016-01-10 16:25:37.431141000 -0500
+++ b/drivers/video/msm/mdss/mdss_samsung_dsi_panel.c	2015-12-01 05:57:16.000000000 -0500
@@ -316,7 +316,7 @@
 
 #if (defined(CONFIG_FB_MSM_MDSS_MAGNA_OCTA_VIDEO_720P_PT_PANEL)\
 		&& !defined(CONFIG_FB_MSM_MDSS_MAGNA_LDI_EA8061))\
-		|| defined(CONFIG_FB_MSM_MDSS_SAMSUNG_OCTA_VIDEO_720P_PT_PANEL)		
+		|| defined(CONFIG_FB_MSM_MDSS_SAMSUNG_OCTA_VIDEO_720P_PT_PANEL)
 /* fresco ldi id3 */
 #define EVT0_REV_A 0x80
 #define EVT1_REV_B_C 0xA1
@@ -1723,6 +1723,7 @@
 }
 
 #ifdef LDI_FPS_CHANGE
+static int ldi_fps_state=MIPI_SUSPEND_STATE;
 static unsigned int current_ldi_fps=0;
 static unsigned int current_ldi_fps_otp=0;
 unsigned int current_change_ldi_fps=0;
@@ -1745,7 +1746,7 @@
 		return 0;
 	}
 
-	if(msd.mfd->resume_state == MIPI_RESUME_STATE) {
+	if(ldi_fps_state == MIPI_RESUME_STATE) {
 		dest_fps_delta = (proper_fps - (int)input_fps)/200;
 		if(dest_fps_delta == 0) {
 			pr_info("%s::No FPS Delta, Skip!! \n",__func__);
@@ -1756,8 +1757,12 @@
 		pr_info("%s:current_ldi_fps_register_value=0x%x\n",__func__,current_ldi_fps);
 		pr_info("%s:dest_ldi_fps_register_value=0x%x\n",__func__,current_ldi_fps+dest_fps_delta);
 		current_ldi_fps = current_ldi_fps + dest_fps_delta;
+		if(current_ldi_fps < 0x35 || current_ldi_fps > 0x55)
+			panic("LDI FPS Check input_fps");
 		write_ldi_fps_cmds.cmd_desc[1].payload[1] = current_ldi_fps;
+		mipi_samsung_disp_send_cmd(PANEL_MTP_ENABLE, true);
 		mipi_samsung_disp_send_cmd(PANEL_LDI_FPS_CHANGE, true);
+		mipi_samsung_disp_send_cmd(PANEL_MTP_DISABLE, true);
 	} else {
 		pr_err("%s:Panel is off state!!\n",__func__);
 		return 0;
@@ -2132,27 +2137,30 @@
 
 u32 mdss_dsi_cmd_receive(struct mdss_dsi_ctrl_pdata *ctrl, struct dsi_cmd_desc *cmd, int rlen)
 {
-        struct dcs_cmd_req cmdreq;
+    struct dcs_cmd_req cmdreq;
+	char *buf;
 
-        memset(&cmdreq, 0, sizeof(cmdreq));
-        cmdreq.cmds = cmd;
-        cmdreq.cmds_cnt = 1;
-        cmdreq.flags = CMD_REQ_RX | CMD_REQ_COMMIT;
-        cmdreq.rbuf = ctrl->rx_buf.data;
-        cmdreq.rlen = rlen;
-        cmdreq.cb = NULL; /* call back */
-        /*
-    	 * This mutex is to sync up with dynamic FPS changes
-    	 * so that DSI lockups shall not happen
-    	 */
-    	BUG_ON(msd.ctrl_pdata == NULL);
-    	mutex_lock(&msd.ctrl_pdata->dfps_mutex);
-        mdss_dsi_cmdlist_put(ctrl, &cmdreq);
-        mutex_unlock(&msd.ctrl_pdata->dfps_mutex);
-        /*
-         * blocked here, untill call back called
-         */
-        return ctrl->rx_buf.len;
+	buf = kmalloc(sizeof(rlen), GFP_KERNEL);
+    memset(&cmdreq, 0, sizeof(cmdreq));
+    cmdreq.cmds = cmd;
+    cmdreq.cmds_cnt = 1;
+    cmdreq.flags = CMD_REQ_RX | CMD_REQ_COMMIT;
+	cmdreq.rbuf = buf;
+    cmdreq.rlen = rlen;
+    cmdreq.cb = NULL; /* call back */
+    /*
+	 * This mutex is to sync up with dynamic FPS changes
+	 * so that DSI lockups shall not happen
+	 */
+	BUG_ON(msd.ctrl_pdata == NULL);
+	mutex_lock(&msd.ctrl_pdata->dfps_mutex);
+    mdss_dsi_cmdlist_put(ctrl, &cmdreq);
+    mutex_unlock(&msd.ctrl_pdata->dfps_mutex);
+    /*
+     * blocked here, untill call back called
+     */
+    kfree(buf);
+    return ctrl->rx_buf.len;
 }
 
 static int samsung_nv_read(struct dsi_cmd_desc *desc, char *destBuffer,
@@ -2224,7 +2232,9 @@
 	int nv_read_cnt = 0;
 	int i = 0, j = 0;
 
-#if defined(CONFIG_FB_MSM_MDSS_SAMSUNG_OCTA_VIDEO_720P_PT_PANEL)
+#if defined(CONFIG_FB_MSM_MDSS_SAMSUNG_OCTA_VIDEO_720P_PT_PANEL) \
+	|| defined(CONFIG_FB_MSM_MIPI_SAMSUNG_OCTA_VIDEO_FULL_HD_PT_PANEL) \
+	|| defined(CONFIG_FB_MSM_MIPI_SAMSUNG_OCTA_CMD_FULL_HD_PT_PANEL)
 	j = 5; // do not repeat
 #elif defined(CONFIG_FB_MSM_MDSS_MAGNA_OCTA_VIDEO_720P_PANEL)\
 	||defined(CONFIG_FB_MSM_MIPI_SAMSUNG_OCTA_VIDEO_HD_PANEL)
@@ -2526,10 +2536,9 @@
 			else
 				flag = 0;
 
-			if(msd.dstat.bright_level)
-				msd.dstat.recent_bright_level = msd.dstat.bright_level;
+			msd.dstat.recent_bright_level = msd.dstat.bright_level;
 #if defined(HBM_RE) || defined(CONFIG_HBM_PSRE)
-			if(msd.dstat.auto_brightness == 6) {
+			if(msd.dstat.auto_brightness >= 6 && msd.dstat.bright_level == 255) {
 				cmd_size = make_brightcontrol_hbm_set(msd.dstat.bright_level);
 				msd.dstat.hbm_mode = 1;
 			} else {
@@ -2538,13 +2547,8 @@
 				if(msd.dstat.hbm_mode)
 					mdss_dsi_cmds_send(msd.ctrl_pdata, hbm_hbm_off_elvss_cmds.cmd_desc, hbm_hbm_off_elvss_cmds.num_of_cmds, flag);
 #endif
-#if defined(CONFIG_MACH_KS01EUR)
-				msd.dstat.hbm_mode = 0;
-				cmd_size = make_brightcontrol_set(msd.dstat.bright_level);
-#else
 				cmd_size = make_brightcontrol_set(msd.dstat.bright_level);
 				msd.dstat.hbm_mode = 0;
-#endif
 			}
 #else
 			cmd_size = make_brightcontrol_set(msd.dstat.bright_level);
@@ -2553,6 +2557,7 @@
 				pr_info("%s : panel is off state!!\n", __func__);
 				goto unknown_command;
 			}
+			udelay(300);
 			break;
 		case PANEL_MTP_ENABLE:
 			cmd_desc = nv_enable_cmds.cmd_desc;
@@ -2613,8 +2618,7 @@
 #if defined(FORCE_500CD)
 		case PANEl_FORCE_500CD:
 			cmd_desc = brightness_packet;
-			if(msd.dstat.bright_level)
-				msd.dstat.recent_bright_level = msd.dstat.bright_level;
+			msd.dstat.recent_bright_level = msd.dstat.bright_level;
 			cmd_size = make_force_500cd_set(msd.dstat.bright_level);
 			break;
 #endif
@@ -3063,6 +3067,11 @@
 #endif
 	msd.dstat.wait_disp_on = 1;
 	msd.mfd->resume_state = MIPI_RESUME_STATE;
+
+#ifdef LDI_FPS_CHANGE
+	ldi_fps_state = MIPI_RESUME_STATE;
+#endif
+
 #ifdef LDI_ADJ_VDDM_OFFSET
 	mipi_samsung_disp_send_cmd(PANEL_LDI_SET_VDDM_OFFSET, true);
 #endif
@@ -3093,11 +3102,8 @@
 #if defined(CONFIG_DUAL_LCD)
 	mipi_samsung_disp_send_cmd(PANEL_BRIGHT_CTRL, true);
 #else
-	if(msd.dstat.recent_bright_level)
-	{
-		msd.dstat.bright_level = msd.dstat.recent_bright_level;
-		mipi_samsung_disp_send_cmd(PANEL_BRIGHT_CTRL, true);
-	}
+	msd.dstat.bright_level = msd.dstat.recent_bright_level;
+	mipi_samsung_disp_send_cmd(PANEL_BRIGHT_CTRL, true);
 #endif
 
 #if defined(CONFIG_DUAL_LCD)
@@ -3162,6 +3168,10 @@
 	msd.mfd->resume_state = MIPI_SUSPEND_STATE;
 	ctrl->dsi_err_cnt = 0;
 
+#ifdef LDI_FPS_CHANGE
+	ldi_fps_state = MIPI_SUSPEND_STATE;
+#endif
+
 	mipi_samsung_disp_send_cmd(PANEL_DISP_OFF, true);
 
 	pr_info("mdss_dsi_panel_off --\n");
@@ -3432,7 +3442,7 @@
 
 }
 
-int mdss_panel_get_dst_fmt(u32 bpp, char mipi_mode, u32 pixel_packing,
+int mdss_panel_dt_get_dst_fmt(u32 bpp, char mipi_mode, u32 pixel_packing,
 				char *dst_format)
 {
 	int rc = 0;
@@ -3533,6 +3543,93 @@
 	panel_info->te.refx100 = (!rc ? tmp : 6000);
 }
 #endif
+static int mdss_dsi_parse_dcs_cmds(struct device_node *np,
+		struct dsi_panel_cmds *pcmds, char *cmd_key, char *link_key)
+{
+	const char *data;
+	int blen = 0, len;
+	char *buf, *bp;
+	struct dsi_ctrl_hdr *dchdr;
+	int i, cnt;
+
+	data = of_get_property(np, cmd_key, &blen);
+	if (!data) {
+		pr_err("%s: failed, key=%s\n", __func__, cmd_key);
+		return -ENOMEM;
+	}
+
+	buf = kzalloc(sizeof(char) * blen, GFP_KERNEL);
+	if (!buf)
+		return -ENOMEM;
+
+	memcpy(buf, data, blen);
+
+	/* scan dcs commands */
+	bp = buf;
+	len = blen;
+	cnt = 0;
+	while (len > sizeof(*dchdr)) {
+		dchdr = (struct dsi_ctrl_hdr *)bp;
+		dchdr->dlen = ntohs(dchdr->dlen);
+		if (dchdr->dlen > len) {
+			pr_err("%s: dtsi cmd=%x error, len=%d",
+				__func__, dchdr->dtype, dchdr->dlen);
+			goto exit_free;
+		}
+		bp += sizeof(*dchdr);
+		len -= sizeof(*dchdr);
+		bp += dchdr->dlen;
+		len -= dchdr->dlen;
+		cnt++;
+	}
+
+	if (len != 0) {
+		pr_err("%s: dcs_cmd=%x len=%d error!",
+				__func__, buf[0], blen);
+		goto exit_free;
+	}
+
+	pcmds->cmds = kzalloc(cnt * sizeof(struct dsi_cmd_desc),
+						GFP_KERNEL);
+	if (!pcmds->cmds)
+		goto exit_free;
+
+	pcmds->cmd_cnt = cnt;
+	pcmds->buf = buf;
+	pcmds->blen = blen;
+
+	bp = buf;
+	len = blen;
+	for (i = 0; i < cnt; i++) {
+		dchdr = (struct dsi_ctrl_hdr *)bp;
+		len -= sizeof(*dchdr);
+		bp += sizeof(*dchdr);
+		pcmds->cmds[i].dchdr = *dchdr;
+		pcmds->cmds[i].payload = bp;
+		bp += dchdr->dlen;
+		len -= dchdr->dlen;
+	}
+
+	/*Set default link state to LP Mode*/
+	pcmds->link_state = DSI_LP_MODE;
+
+	if (link_key) {
+		data = of_get_property(np, link_key, NULL);
+		if (data && !strcmp(data, "dsi_hs_mode"))
+			pcmds->link_state = DSI_HS_MODE;
+		else
+			pcmds->link_state = DSI_LP_MODE;
+	}
+
+	pr_info("%s: dcs_cmd=%x len=%d, cmd_cnt=%d link_state=%d\n", __func__,
+		pcmds->buf[0], pcmds->blen, pcmds->cmd_cnt, pcmds->link_state);
+
+	return 0;
+
+exit_free:
+	kfree(buf);
+	return -ENOMEM;
+}
 
 static int mdss_panel_parse_dt(struct device_node *np,
 					struct mdss_dsi_ctrl_pdata *ctrl_pdata)
@@ -3542,7 +3639,6 @@
 	int rc, i, len;
 	const char *data;
 	static const char *bl_ctrl_type, *pdest;
-	static const char *on_cmds_state, *off_cmds_state;
 	struct mdss_panel_info *pinfo = &(ctrl_pdata->panel_data.panel_info);
 	bool fbc_enabled = false;
 
@@ -3784,6 +3880,9 @@
 	rc = of_property_read_u32(np, "qcom,mdss-pan-dsi-frame-rate", &tmp);
 	pinfo->mipi.frame_rate = (!rc ? tmp : 60);
 
+	rc = of_property_read_u32(np, "samsung,mdss-power-on-reset-delay-us", &tmp);
+	pinfo->mipi.samsung_power_on_reset_delay = (!rc ? tmp : 0);
+
 	rc = of_property_read_u32(np, "qcom,mdss-pan-clk-rate", &tmp);
 	pinfo->clk_rate = (!rc ? tmp : 0);
 
@@ -3880,29 +3979,11 @@
 		pinfo->fbc.target_bpp =
 			pinfo->bpp;
 	}
+	mdss_dsi_parse_dcs_cmds(np, &ctrl_pdata->on_cmds,
+		"qcom,panel-on-cmds", "qcom,on-cmds-dsi-state");
 
-	on_cmds_state = of_get_property(np,
-				"qcom,on-cmds-dsi-state", NULL);
-	if (!strncmp(on_cmds_state, "DSI_LP_MODE", 11)) {
-		ctrl_pdata->dsi_on_state = DSI_LP_MODE;
-	} else if (!strncmp(on_cmds_state, "DSI_HS_MODE", 11)) {
-		ctrl_pdata->dsi_on_state = DSI_HS_MODE;
-	} else {
-		pr_debug("%s: ON cmds state not specified. Set Default\n",
-							__func__);
-		ctrl_pdata->dsi_on_state = DSI_LP_MODE;
-	}
-
-	off_cmds_state = of_get_property(np, "qcom,off-cmds-dsi-state", NULL);
-	if (!strncmp(off_cmds_state, "DSI_LP_MODE", 11)) {
-		ctrl_pdata->dsi_off_state = DSI_LP_MODE;
-	} else if (!strncmp(off_cmds_state, "DSI_HS_MODE", 11)) {
-		ctrl_pdata->dsi_off_state = DSI_HS_MODE;
-	} else {
-		pr_debug("%s: ON cmds state not specified. Set Default\n",
-							__func__);
-		ctrl_pdata->dsi_off_state = DSI_LP_MODE;
-	}
+	mdss_dsi_parse_dcs_cmds(np, &ctrl_pdata->off_cmds,
+		"qcom,panel-off-cmds", "qcom,off-cmds-dsi-state");
 
 
 #if 1
@@ -4558,6 +4639,7 @@
 	mutex_init(&msd.lock);
 
 	msd.dstat.on = 0;
+	msd.dstat.recent_bright_level = 255;
 
 #if !defined(CONFIG_FB_MSM_MIPI_SAMSUNG_OCTA_VIDEO_FULL_HD_PT_PANEL)\
 		&& !defined(CONFIG_FB_MSM_MDSS_MAGNA_OCTA_VIDEO_720P_PT_PANEL)\
diff -Nur a/drivers/video/msm/mdss/mdss_samsung_dual_oled_cmd_wqxga_panel.c b/drivers/video/msm/mdss/mdss_samsung_dual_oled_cmd_wqxga_panel.c
--- a/drivers/video/msm/mdss/mdss_samsung_dual_oled_cmd_wqxga_panel.c	2016-01-10 16:25:37.431141000 -0500
+++ b/drivers/video/msm/mdss/mdss_samsung_dual_oled_cmd_wqxga_panel.c	2015-12-01 05:57:13.000000000 -0500
@@ -326,14 +326,17 @@
 		msleep(50);
 
 	} else {
+		usleep_range(3000, 3000);
 		if (gpio_is_valid(ctrl_pdata->disp_en_gpio2)) {
 			pr_info("%s : Set Low TCON Enable GPIO (1.8V) \n", __func__);
 			gpio_set_value((ctrl_pdata->disp_en_gpio2), 0);
 		}
+		msleep(10);
 		if (gpio_is_valid(ctrl_pdata->disp_en_gpio)) {
 			pr_info("%s : Set Low LCD Enable GPIO (3.3V) \n", __func__);
 			gpio_set_value((ctrl_pdata->disp_en_gpio), 0);
 		}
+		msleep(300); // Chagall Panel issue
 	}
 
 }
@@ -756,32 +759,34 @@
 
 u32 mdss_dsi_cmd_receive(struct mdss_dsi_ctrl_pdata *ctrl, struct dsi_cmd_desc *cmd, int rlen)
 {
-	struct dcs_cmd_req cmdreq;
-
+    struct dcs_cmd_req cmdreq;
+	char *buf;
 	if (get_lcd_attached() == 0) {
 		printk("%s: get_lcd_attached(0)!\n",__func__);
 		return 0;
 	}
 
-	memset(&cmdreq, 0, sizeof(cmdreq));
-	cmdreq.cmds = cmd;
-	cmdreq.cmds_cnt = 1;
-	cmdreq.flags = CMD_REQ_RX | CMD_REQ_COMMIT;
-	cmdreq.rlen = rlen;
-	cmdreq.rbuf = ctrl->rx_buf.data;
-	cmdreq.cb = NULL; /* call back */
-	/*
+	buf = kmalloc(sizeof(rlen), GFP_KERNEL);
+    memset(&cmdreq, 0, sizeof(cmdreq));
+    cmdreq.cmds = cmd;
+    cmdreq.cmds_cnt = 1;
+    cmdreq.flags = CMD_REQ_RX | CMD_REQ_COMMIT;
+	cmdreq.rbuf = buf;
+    cmdreq.rlen = rlen;
+    cmdreq.cb = NULL; /* call back */
+    /*
 	 * This mutex is to sync up with dynamic FPS changes
 	 * so that DSI lockups shall not happen
 	 */
 	BUG_ON(msd.ctrl_pdata == NULL);
 	mutex_lock(&msd.ctrl_pdata->dfps_mutex);
-	mdss_dsi_cmdlist_put(ctrl, &cmdreq);
-	mutex_unlock(&msd.ctrl_pdata->dfps_mutex);
-	/*
-	* blocked here, untill call back called
-	*/
-	return ctrl->rx_buf.len;
+    mdss_dsi_cmdlist_put(ctrl, &cmdreq);
+    mutex_unlock(&msd.ctrl_pdata->dfps_mutex);
+    /*
+     * blocked here, untill call back called
+     */
+    kfree(buf);
+    return ctrl->rx_buf.len;
 }
 
 static int samsung_nv_read(struct dsi_cmd_desc *desc, char *destBuffer,
@@ -992,6 +997,9 @@
 {
 	struct mdss_dsi_ctrl_pdata *ctrl_pdata = NULL;
 
+	//Update the bl_level in msd.dstat.bright_level even if Panel is not ON
+	msd.dstat.bright_level = bl_level;
+
 	/*Dont need to send backlight command if display off*/
 	if (msd.mfd->resume_state != MIPI_RESUME_STATE)
 		return;
@@ -1072,7 +1080,7 @@
 			if (msd.dstat.bright_level)
 				msd.dstat.recent_bright_level = msd.dstat.bright_level;
 #if defined(HBM_RE)
-			if(msd.dstat.auto_brightness == 6) {
+			if(msd.dstat.auto_brightness >= 6 && msd.dstat.bright_level == 255) {
 				cmd_size = make_brightcontrol_hbm_set();
 				msd.dstat.hbm_mode = 1;
 			} else {
@@ -1352,6 +1360,8 @@
 	// to prevent splash during wakeup
 	if (msd.dstat.recent_bright_level) {
 		msd.dstat.bright_level = msd.dstat.recent_bright_level;
+		if(!msd.mfd->unset_bl_level)
+			msd.mfd->unset_bl_level = msd.dstat.bright_level;
 		mipi_samsung_disp_send_cmd(PANEL_BRIGHT_CTRL, true);
 	}
 
@@ -1603,6 +1613,189 @@
 
 }
 
+int mdss_panel_dt_get_dst_fmt(u32 bpp, char mipi_mode, u32 pixel_packing,
+				char *dst_format)
+{
+	int rc = 0;
+	switch (bpp) {
+	case 3:
+		*dst_format = DSI_CMD_DST_FORMAT_RGB111;
+		break;
+	case 8:
+		*dst_format = DSI_CMD_DST_FORMAT_RGB332;
+		break;
+	case 12:
+		*dst_format = DSI_CMD_DST_FORMAT_RGB444;
+		break;
+	case 16:
+		switch (mipi_mode) {
+		case DSI_VIDEO_MODE:
+			*dst_format = DSI_VIDEO_DST_FORMAT_RGB565;
+			break;
+		case DSI_CMD_MODE:
+			*dst_format = DSI_CMD_DST_FORMAT_RGB565;
+			break;
+		default:
+			*dst_format = DSI_VIDEO_DST_FORMAT_RGB565;
+			break;
+		}
+		break;
+	case 18:
+		switch (mipi_mode) {
+		case DSI_VIDEO_MODE:
+			if (pixel_packing == 0)
+				*dst_format = DSI_VIDEO_DST_FORMAT_RGB666;
+			else
+				*dst_format = DSI_VIDEO_DST_FORMAT_RGB666_LOOSE;
+			break;
+		case DSI_CMD_MODE:
+			*dst_format = DSI_CMD_DST_FORMAT_RGB666;
+			break;
+		default:
+			if (pixel_packing == 0)
+				*dst_format = DSI_VIDEO_DST_FORMAT_RGB666;
+			else
+				*dst_format = DSI_VIDEO_DST_FORMAT_RGB666_LOOSE;
+			break;
+		}
+		break;
+	case 24:
+		switch (mipi_mode) {
+		case DSI_VIDEO_MODE:
+			*dst_format = DSI_VIDEO_DST_FORMAT_RGB888;
+			break;
+		case DSI_CMD_MODE:
+			*dst_format = DSI_CMD_DST_FORMAT_RGB888;
+			break;
+		default:
+			*dst_format = DSI_VIDEO_DST_FORMAT_RGB888;
+			break;
+		}
+		break;
+	default:
+		rc = -EINVAL;
+		break;
+	}
+	return rc;
+}
+
+static void mdss_panel_parse_te_params(struct device_node *np,
+				       struct mdss_panel_info *panel_info)
+{
+
+	u32 tmp;
+	int rc = 0;
+	/*
+	 * TE default: dsi byte clock calculated base on 70 fps;
+	 * around 14 ms to complete a kickoff cycle if te disabled;
+	 * vclk_line base on 60 fps; write is faster than read;
+	 * init == start == rdptr;
+	 */
+	panel_info->te.tear_check_en =
+		!of_property_read_bool(np, "qcom,mdss-tear-check-disable");
+	rc = of_property_read_u32
+		(np, "qcom,mdss-tear-check-sync-cfg-height", &tmp);
+	panel_info->te.sync_cfg_height = (!rc ? tmp : 0xfff0);
+	rc = of_property_read_u32
+		(np, "qcom,mdss-tear-check-sync-init-val", &tmp);
+	panel_info->te.vsync_init_val = (!rc ? tmp : panel_info->yres);
+	rc = of_property_read_u32
+		(np, "qcom,mdss-tear-check-sync-threshold-start", &tmp);
+	panel_info->te.sync_threshold_start = (!rc ? tmp : 4);
+	rc = of_property_read_u32
+		(np, "qcom,mdss-tear-check-sync-threshold-continue", &tmp);
+	panel_info->te.sync_threshold_continue = (!rc ? tmp : 4);
+	rc = of_property_read_u32(np, "qcom,mdss-tear-check-start-pos", &tmp);
+	panel_info->te.start_pos = (!rc ? tmp : panel_info->yres);
+	rc = of_property_read_u32
+		(np, "qcom,mdss-tear-check-rd-ptr-trigger-intr", &tmp);
+	panel_info->te.rd_ptr_irq = (!rc ? tmp : panel_info->yres + 1);
+	rc = of_property_read_u32(np, "qcom,mdss-tear-check-frame-rate", &tmp);
+	panel_info->te.refx100 = (!rc ? tmp : 6000);
+}
+
+static int mdss_dsi_parse_dcs_cmds(struct device_node *np,
+		struct dsi_panel_cmds *pcmds, char *cmd_key, char *link_key)
+{
+	const char *data;
+	int blen = 0, len;
+	char *buf, *bp;
+	struct dsi_ctrl_hdr *dchdr;
+	int i, cnt;
+
+	data = of_get_property(np, cmd_key, &blen);
+	if (!data) {
+		pr_err("%s: failed, key=%s\n", __func__, cmd_key);
+		return -ENOMEM;
+	}
+
+	buf = kzalloc(sizeof(char) * blen, GFP_KERNEL);
+	if (!buf)
+		return -ENOMEM;
+
+	memcpy(buf, data, blen);
+
+	/* scan dcs commands */
+	bp = buf;
+	len = blen;
+	cnt = 0;
+	while (len > sizeof(*dchdr)) {
+		dchdr = (struct dsi_ctrl_hdr *)bp;
+		dchdr->dlen = ntohs(dchdr->dlen);
+		if (dchdr->dlen > len) {
+			pr_err("%s: dtsi cmd=%x error, len=%d",
+				__func__, dchdr->dtype, dchdr->dlen);
+			return -ENOMEM;
+		}
+		bp += sizeof(*dchdr);
+		len -= sizeof(*dchdr);
+		bp += dchdr->dlen;
+		len -= dchdr->dlen;
+		cnt++;
+	}
+
+	if (len != 0) {
+		pr_err("%s: dcs_cmd=%x len=%d error!",
+				__func__, buf[0], blen);
+		kfree(buf);
+		return -ENOMEM;
+	}
+
+	pcmds->cmds = kzalloc(cnt * sizeof(struct dsi_cmd_desc),
+						GFP_KERNEL);
+	if (!pcmds->cmds){
+		kfree(buf);
+		return -ENOMEM;
+	}
+
+	pcmds->cmd_cnt = cnt;
+	pcmds->buf = buf;
+	pcmds->blen = blen;
+
+	bp = buf;
+	len = blen;
+	for (i = 0; i < cnt; i++) {
+		dchdr = (struct dsi_ctrl_hdr *)bp;
+		len -= sizeof(*dchdr);
+		bp += sizeof(*dchdr);
+		pcmds->cmds[i].dchdr = *dchdr;
+		pcmds->cmds[i].payload = bp;
+		bp += dchdr->dlen;
+		len -= dchdr->dlen;
+	}
+
+
+	data = of_get_property(np, link_key, NULL);
+	if (!strncmp(data, "dsi_hs_mode", 11))
+		pcmds->link_state = DSI_HS_MODE;
+	else
+		pcmds->link_state = DSI_LP_MODE;
+	pr_debug("%s: dcs_cmd=%x len=%d, cmd_cnt=%d link_state=%d\n", __func__,
+		pcmds->buf[0], pcmds->blen, pcmds->cmd_cnt, pcmds->link_state);
+
+	return 0;
+}
+
 static int mdss_panel_parse_dt(struct device_node *np,
 					struct mdss_dsi_ctrl_pdata *ctrl_pdata)
 {
@@ -1611,7 +1804,6 @@
 	int rc, i, len;
 	const char *data;
 	static const char *bl_ctrl_type, *pdest;
-	static const char *on_cmds_state, *off_cmds_state;
 	struct mdss_panel_info *pinfo = &(ctrl_pdata->panel_data.panel_info);
 	bool fbc_enabled = false;
 
@@ -1771,10 +1963,13 @@
 	pinfo->mipi.wr_mem_start =
 		(!rc ? tmp : 0x2c);
 
-	rc = of_property_read_u32(np,
+/*	rc = of_property_read_u32(np,
 		"qcom,mdss-pan-te-sel", &tmp);
 	pinfo->mipi.te_sel =
 		(!rc ? tmp : 1);
+*/
+
+	mdss_panel_parse_te_params(np, pinfo);
 
 	rc = of_property_read_u32(np,
 		"qcom,mdss-pan-dsi-dst-format", &tmp);
@@ -1936,6 +2131,14 @@
 			pinfo->bpp;
 	}
 
+	mdss_dsi_parse_dcs_cmds(np, &ctrl_pdata->on_cmds,
+		"qcom,panel-display-on-seq", "qcom,on-cmds-dsi-state");
+
+	mdss_dsi_parse_dcs_cmds(np, &ctrl_pdata->off_cmds,
+		"qcom,panel-display-off-seq", "qcom,off-cmds-dsi-state");
+
+
+
 	mdss_samsung_parse_panel_cmd(np, &display_on_seq,
 				"qcom,panel-display-on-seq");
 
@@ -1945,30 +2148,6 @@
 				"qcom,panel-display-on-cmds");
 	mdss_samsung_parse_panel_cmd(np, &display_off_cmd,
 				"qcom,panel-display-off-cmds");
-
-	on_cmds_state = of_get_property(np,
-				"qcom,on-cmds-dsi-state", NULL);
-	if (!strncmp(on_cmds_state, "DSI_LP_MODE", 11)) {
-		ctrl_pdata->dsi_on_state = DSI_LP_MODE;
-	} else if (!strncmp(on_cmds_state, "DSI_HS_MODE", 11)) {
-		ctrl_pdata->dsi_on_state = DSI_HS_MODE;
-	} else {
-		pr_debug("%s: ON cmds state not specified. Set Default\n",
-							__func__);
-		ctrl_pdata->dsi_on_state = DSI_LP_MODE;
-	}
-
-	off_cmds_state = of_get_property(np, "qcom,off-cmds-dsi-state", NULL);
-	if (!strncmp(off_cmds_state, "DSI_LP_MODE", 11)) {
-		ctrl_pdata->dsi_off_state = DSI_LP_MODE;
-	} else if (!strncmp(off_cmds_state, "DSI_HS_MODE", 11)) {
-		ctrl_pdata->dsi_off_state = DSI_HS_MODE;
-	} else {
-		pr_debug("%s: ON cmds state not specified. Set Default\n",
-							__func__);
-		ctrl_pdata->dsi_off_state = DSI_LP_MODE;
-	}
-
 	mdss_samsung_parse_panel_cmd(np, &nv_mtp_read_cmds,
 				"samsung,panel-nv-mtp-read-cmds");
 	mdss_samsung_parse_panel_cmd(np, &nv_mtp2_read_cmds,
@@ -2300,7 +2479,7 @@
 	if (unlikely(mfd->key != MFD_KEY))
 		return -EINVAL;
 
-	rc = snprintf((char *)buf, sizeof(buf), "%d\n", mfd->panel_power_on);
+	rc = snprintf((char *)buf, PAGE_SIZE, "%d\n", mfd->panel_power_on);
 	pr_info("mipi_samsung_disp_get_power(%d)\n", mfd->panel_power_on);
 
 	return rc;
@@ -2355,7 +2534,7 @@
 	id2 = (msd.manufacture_id & 0x0000FF00) >> 8;
 	id3 = msd.manufacture_id & 0xFF;
 
-	snprintf(temp, sizeof(temp), "%x %x %x\n",	id1, id2, id3);
+	snprintf(temp,  PAGE_SIZE, "%x %x %x\n",	id1, id2, id3);
 	strlcat(buf, temp, 15);
 	return strnlen(buf, 15);
 }
@@ -2365,7 +2544,7 @@
 {
 	char temp[30];
 
-	snprintf((char *)temp, sizeof(temp), "manufacture date : %d\n", msd.manufacture_date);
+	snprintf((char *)temp,  PAGE_SIZE, "manufacture date : %d\n", msd.manufacture_date);
 	strlcat(buf, temp, 30);
 
 	pr_info("manufacture date : %d\n", msd.manufacture_date);
@@ -2378,7 +2557,7 @@
 {
 	char temp[30];
 
-	snprintf((char *)temp, sizeof(temp), "ddi id : %02x %02x %02x %02x %02x\n",
+	snprintf((char *)temp,  PAGE_SIZE, "ddi id : %02x %02x %02x %02x %02x\n",
 		msd.ddi_id[0], msd.ddi_id[1], msd.ddi_id[2], msd.ddi_id[3], msd.ddi_id[4]);
 	strlcat(buf, temp, 30);
 
@@ -2393,7 +2572,7 @@
 {
 	int rc;
 
-	rc = snprintf((char *)buf, sizeof(buf), "%d\n", msd.dstat.acl_on);
+	rc = snprintf((char *)buf,  PAGE_SIZE, "%d\n", msd.dstat.acl_on);
 	pr_info("acl status: %d\n", *buf);
 
 	return rc;
@@ -2455,7 +2634,7 @@
 {
 	int rc;
 
-	rc = snprintf((char *)buf, sizeof(buf), "%d\n", msd.dstat.siop_status);
+	rc = snprintf((char *)buf,  PAGE_SIZE, "%d\n", msd.dstat.siop_status);
 	pr_info("siop status: %d\n", *buf);
 
 	return rc;
@@ -2517,7 +2696,10 @@
 	int rc = 0;
 
 	if (msd.dstat.is_smart_dim_loaded)
-		msd.sdimconf->print_aid_log();
+	{
+		if(msd.sdimconf->print_aid_log)
+		        msd.sdimconf->print_aid_log();
+	}
 	else
 		pr_err("smart dim is not loaded..\n");
 
@@ -2530,7 +2712,7 @@
 {
 	int rc;
 
-	rc = snprintf((char *)buf, sizeof(buf), "%d\n",
+	rc = snprintf((char *)buf, PAGE_SIZE, "%d\n",
 					msd.dstat.auto_brightness);
 	pr_info("auto_brightness: %d\n", *buf);
 
diff -Nur a/drivers/video/msm/mdss/mdss_samsung_dual_oled_cmd_wqxga_s6e3ha1_panel.c b/drivers/video/msm/mdss/mdss_samsung_dual_oled_cmd_wqxga_s6e3ha1_panel.c
--- a/drivers/video/msm/mdss/mdss_samsung_dual_oled_cmd_wqxga_s6e3ha1_panel.c	2016-01-10 16:25:37.431141000 -0500
+++ b/drivers/video/msm/mdss/mdss_samsung_dual_oled_cmd_wqxga_s6e3ha1_panel.c	2015-12-01 05:57:13.000000000 -0500
@@ -41,6 +41,7 @@
 
 #define SMART_ACL
 #define HBM_RE
+#define TEMPERATURE_ELVSS_S6E3HA1
 //#define PARTIAL_UPDATE
 
 static struct dsi_buf dsi_panel_tx_buf;
@@ -92,6 +93,9 @@
 static struct dsi_cmd smart_acl_elvss_underzero_cmds_list;
 static struct cmd_map smart_acl_elvss_map_table;
 #endif
+#if defined(TEMPERATURE_ELVSS_S6E3HA1)
+static struct dsi_cmd elvss_lowtemp_cmds_list;
+#endif
 #if defined(DYNAMIC_FPS_USE_TE_CTRL)
 int dynamic_fps_use_te_ctrl;
 #endif
@@ -467,6 +471,29 @@
 	return acl_control;
 }
 
+#if defined(TEMPERATURE_ELVSS_S6E3HA1)
+// ELVSS TEMPERATURE COMPENSATION for S6E3HA1
+static struct dsi_cmd get_elvss_tempcompen_control_set(void)
+{
+	struct dsi_cmd elvss_tempcompen_control = {0,};
+
+	/* Get the command desc */
+	if (msd.dstat.temperature >= 0) {
+		pr_debug("%s temp >= 0 \n",__func__);
+		elvss_lowtemp_cmds_list.cmd_desc[1].payload[1] = 0x19;
+	} else if (msd.dstat.temperature > -20) {
+		pr_debug("%s 0 > temp > -20 \n",__func__);
+		elvss_lowtemp_cmds_list.cmd_desc[1].payload[1] = 0x8A;
+	} else {
+		pr_debug("%s temp <= -20 \n",__func__);
+		elvss_lowtemp_cmds_list.cmd_desc[1].payload[1] = 0x94;
+	}
+	elvss_tempcompen_control.cmd_desc = elvss_lowtemp_cmds_list.cmd_desc;
+	elvss_tempcompen_control.num_of_cmds = elvss_lowtemp_cmds_list.num_of_cmds;
+
+	return elvss_tempcompen_control;
+}
+#endif
 
 /*
 	This function takes acl_map_table and uses cd_idx,
@@ -672,6 +699,9 @@
 	struct dsi_cmd gamma_control = {0,};
 	struct dsi_cmd testKey = {0,};
 	int cmd_count = 0, cd_idx = 0, cd_level =0;
+#if defined(TEMPERATURE_ELVSS_S6E3HA1)
+	struct dsi_cmd temperature_elvss_control = {0, 0, 0, 0, 0};
+#endif
 
 	cd_idx = get_cmd_idx(bl_level);
 	cd_level = get_candela_value(bl_level);
@@ -699,18 +729,33 @@
 	elvss_control = get_elvss_control_set(cd_idx);
 	cmd_count = update_bright_packet(cmd_count, &elvss_control);
 
+#if defined(TEMPERATURE_ELVSS_S6E3HA1)
+		// ELVSS TEMPERATURE COMPENSATION
+		// ELVSS for Temperature set cmd should be sent after normal elvss set cmd
+		temperature_elvss_control = get_elvss_tempcompen_control_set();
+		cmd_count = update_bright_packet(cmd_count, &temperature_elvss_control);
+#endif
+
 	/*gamma*/
 	gamma_control = get_gamma_control_set(cd_level);
 	cmd_count = update_bright_packet(cmd_count, &gamma_control);
 
 	testKey = get_testKey_set(0);
 	cmd_count = update_bright_packet(cmd_count, &testKey);
+#if defined(TEMPERATURE_ELVSS_S6E3HA1)
 	LCD_DEBUG("bright_level: %d, candela_idx: %d( %d cd ), "\
-		"cmd_count(aid,acl,elvss,temperature,gamma)::(%d,%d,%d,%d)%d,id3(0x%x)\n",
+		"cmd_count(aid,acl,elvss,temperature,gamma)::(%d,%d,%d,%d,%d)%d,id3(0x%x)\n",
+#else
+	LCD_DEBUG("bright_level: %d, candela_idx: %d( %d cd ), "\
+		"cmd_count(aid,acl,elvss,gamma)::(%d,%d,%d,%d)%d,id3(0x%x)\n",
+#endif
 		msd.dstat.bright_level, cd_idx, cd_level,
 		aid_control.num_of_cmds,
 		msd.dstat.acl_on | msd.dstat.siop_status,
 		elvss_control.num_of_cmds,
+#if defined(TEMPERATURE_ELVSS_S6E3HA1)
+		temperature_elvss_control.num_of_cmds,
+#endif
 		gamma_control.num_of_cmds,
 		cmd_count,
 		msd.id3);
@@ -771,31 +816,33 @@
 u32 mdss_dsi_cmd_receive(struct mdss_dsi_ctrl_pdata *ctrl, struct dsi_cmd_desc *cmd, int rlen)
 {
 	struct dcs_cmd_req cmdreq;
-
+	char *buf;
 	if (get_lcd_attached() == 0) {
 		printk("%s: get_lcd_attached(0)!\n",__func__);
 		return 0;
 	}
 
-	memset(&cmdreq, 0, sizeof(cmdreq));
-	cmdreq.cmds = cmd;
-	cmdreq.cmds_cnt = 1;
-	cmdreq.flags = CMD_REQ_RX | CMD_REQ_COMMIT;
-	cmdreq.rlen = rlen;
-	cmdreq.rbuf = ctrl->rx_buf.data;
-	cmdreq.cb = NULL; /* call back */
-	/*
+	buf = kmalloc(sizeof(rlen), GFP_KERNEL);
+    memset(&cmdreq, 0, sizeof(cmdreq));
+    cmdreq.cmds = cmd;
+    cmdreq.cmds_cnt = 1;
+    cmdreq.flags = CMD_REQ_RX | CMD_REQ_COMMIT;
+	cmdreq.rbuf = buf;
+    cmdreq.rlen = rlen;
+    cmdreq.cb = NULL; /* call back */
+    /*
 	 * This mutex is to sync up with dynamic FPS changes
 	 * so that DSI lockups shall not happen
 	 */
 	BUG_ON(msd.ctrl_pdata == NULL);
 	mutex_lock(&msd.ctrl_pdata->dfps_mutex);
-	mdss_dsi_cmdlist_put(ctrl, &cmdreq);
-	mutex_unlock(&msd.ctrl_pdata->dfps_mutex);
-	/*
-	* blocked here, untill call back called
-	*/
-	return ctrl->rx_buf.len;
+    mdss_dsi_cmdlist_put(ctrl, &cmdreq);
+    mutex_unlock(&msd.ctrl_pdata->dfps_mutex);
+    /*
+     * blocked here, untill call back called
+     */
+    kfree(buf);
+    return ctrl->rx_buf.len;
 }
 
 static int samsung_nv_read(struct dsi_cmd_desc *desc, char *destBuffer,
@@ -1089,9 +1136,8 @@
 			if (msd.dstat.bright_level)
 				msd.dstat.recent_bright_level = msd.dstat.bright_level;
 #if defined(HBM_RE)
-			if(msd.dstat.auto_brightness == 6) {
+			if(msd.dstat.auto_brightness >= 6 && msd.dstat.bright_level == 255) {
 				cmd_size = make_brightcontrol_hbm_set();
-				msd.dstat.hbm_mode = 1;
 			} else {
 				msd.dstat.hbm_mode = 0;
 				cmd_size = make_brightcontrol_set(msd.dstat.bright_level);
@@ -1306,6 +1352,7 @@
 
 static int mdss_dsi_panel_on(struct mdss_panel_data *pdata)
 {
+	static int first_boot = 1;
 	struct mdss_dsi_ctrl_pdata *ctrl = NULL;
 
 	if (pdata == NULL) {
@@ -1339,7 +1386,10 @@
 	if (!msd.dstat.is_smart_dim_loaded)
 		mdss_dsi_panel_dimming_init(pdata);
 
-	mipi_samsung_disp_send_cmd(PANEL_DISPLAY_ON_SEQ, true);
+	if (first_boot)
+		first_boot = 0; /* klimt panel doens't send sleep out cmd if splash enabled */
+	else
+		mipi_samsung_disp_send_cmd(PANEL_DISPLAY_ON_SEQ, true);
 
 	/* Recovery Mode : Set some default brightness */
 	if (msd.dstat.recovery_boot_mode) {
@@ -1365,6 +1415,8 @@
 	// to prevent splash during wakeup
 	if (msd.dstat.recent_bright_level) {
 		msd.dstat.bright_level = msd.dstat.recent_bright_level;
+		if(!msd.mfd->unset_bl_level)
+			msd.mfd->unset_bl_level = msd.dstat.bright_level;
 		mipi_samsung_disp_send_cmd(PANEL_BRIGHT_CTRL, true);
 	}
 
@@ -1608,6 +1660,189 @@
 
 }
 
+int mdss_panel_dt_get_dst_fmt(u32 bpp, char mipi_mode, u32 pixel_packing,
+				char *dst_format)
+{
+	int rc = 0;
+	switch (bpp) {
+	case 3:
+		*dst_format = DSI_CMD_DST_FORMAT_RGB111;
+		break;
+	case 8:
+		*dst_format = DSI_CMD_DST_FORMAT_RGB332;
+		break;
+	case 12:
+		*dst_format = DSI_CMD_DST_FORMAT_RGB444;
+		break;
+	case 16:
+		switch (mipi_mode) {
+		case DSI_VIDEO_MODE:
+			*dst_format = DSI_VIDEO_DST_FORMAT_RGB565;
+			break;
+		case DSI_CMD_MODE:
+			*dst_format = DSI_CMD_DST_FORMAT_RGB565;
+			break;
+		default:
+			*dst_format = DSI_VIDEO_DST_FORMAT_RGB565;
+			break;
+		}
+		break;
+	case 18:
+		switch (mipi_mode) {
+		case DSI_VIDEO_MODE:
+			if (pixel_packing == 0)
+				*dst_format = DSI_VIDEO_DST_FORMAT_RGB666;
+			else
+				*dst_format = DSI_VIDEO_DST_FORMAT_RGB666_LOOSE;
+			break;
+		case DSI_CMD_MODE:
+			*dst_format = DSI_CMD_DST_FORMAT_RGB666;
+			break;
+		default:
+			if (pixel_packing == 0)
+				*dst_format = DSI_VIDEO_DST_FORMAT_RGB666;
+			else
+				*dst_format = DSI_VIDEO_DST_FORMAT_RGB666_LOOSE;
+			break;
+		}
+		break;
+	case 24:
+		switch (mipi_mode) {
+		case DSI_VIDEO_MODE:
+			*dst_format = DSI_VIDEO_DST_FORMAT_RGB888;
+			break;
+		case DSI_CMD_MODE:
+			*dst_format = DSI_CMD_DST_FORMAT_RGB888;
+			break;
+		default:
+			*dst_format = DSI_VIDEO_DST_FORMAT_RGB888;
+			break;
+		}
+		break;
+	default:
+		rc = -EINVAL;
+		break;
+	}
+	return rc;
+}
+
+static void mdss_panel_parse_te_params(struct device_node *np,
+				       struct mdss_panel_info *panel_info)
+{
+
+	u32 tmp;
+	int rc = 0;
+	/*
+	 * TE default: dsi byte clock calculated base on 70 fps;
+	 * around 14 ms to complete a kickoff cycle if te disabled;
+	 * vclk_line base on 60 fps; write is faster than read;
+	 * init == start == rdptr;
+	 */
+	panel_info->te.tear_check_en =
+		!of_property_read_bool(np, "qcom,mdss-tear-check-disable");
+	rc = of_property_read_u32
+		(np, "qcom,mdss-tear-check-sync-cfg-height", &tmp);
+	panel_info->te.sync_cfg_height = (!rc ? tmp : 0xfff0);
+	rc = of_property_read_u32
+		(np, "qcom,mdss-tear-check-sync-init-val", &tmp);
+	panel_info->te.vsync_init_val = (!rc ? tmp : panel_info->yres);
+	rc = of_property_read_u32
+		(np, "qcom,mdss-tear-check-sync-threshold-start", &tmp);
+	panel_info->te.sync_threshold_start = (!rc ? tmp : 4);
+	rc = of_property_read_u32
+		(np, "qcom,mdss-tear-check-sync-threshold-continue", &tmp);
+	panel_info->te.sync_threshold_continue = (!rc ? tmp : 4);
+	rc = of_property_read_u32(np, "qcom,mdss-tear-check-start-pos", &tmp);
+	panel_info->te.start_pos = (!rc ? tmp : panel_info->yres);
+	rc = of_property_read_u32
+		(np, "qcom,mdss-tear-check-rd-ptr-trigger-intr", &tmp);
+	panel_info->te.rd_ptr_irq = (!rc ? tmp : panel_info->yres + 1);
+	rc = of_property_read_u32(np, "qcom,mdss-tear-check-frame-rate", &tmp);
+	panel_info->te.refx100 = (!rc ? tmp : 6000);
+}
+
+static int mdss_dsi_parse_dcs_cmds(struct device_node *np,
+		struct dsi_panel_cmds *pcmds, char *cmd_key, char *link_key)
+{
+	const char *data;
+	int blen = 0, len;
+	char *buf, *bp;
+	struct dsi_ctrl_hdr *dchdr;
+	int i, cnt;
+
+	data = of_get_property(np, cmd_key, &blen);
+	if (!data) {
+		pr_err("%s: failed, key=%s\n", __func__, cmd_key);
+		return -ENOMEM;
+	}
+
+	buf = kzalloc(sizeof(char) * blen, GFP_KERNEL);
+	if (!buf)
+		return -ENOMEM;
+
+	memcpy(buf, data, blen);
+
+	/* scan dcs commands */
+	bp = buf;
+	len = blen;
+	cnt = 0;
+	while (len > sizeof(*dchdr)) {
+		dchdr = (struct dsi_ctrl_hdr *)bp;
+		dchdr->dlen = ntohs(dchdr->dlen);
+		if (dchdr->dlen > len) {
+			pr_err("%s: dtsi cmd=%x error, len=%d",
+				__func__, dchdr->dtype, dchdr->dlen);
+			return -ENOMEM;
+		}
+		bp += sizeof(*dchdr);
+		len -= sizeof(*dchdr);
+		bp += dchdr->dlen;
+		len -= dchdr->dlen;
+		cnt++;
+	}
+
+	if (len != 0) {
+		pr_err("%s: dcs_cmd=%x len=%d error!",
+				__func__, buf[0], blen);
+		kfree(buf);
+		return -ENOMEM;
+	}
+
+	pcmds->cmds = kzalloc(cnt * sizeof(struct dsi_cmd_desc),
+						GFP_KERNEL);
+	if (!pcmds->cmds){
+		kfree(buf);
+		return -ENOMEM;
+	}
+
+	pcmds->cmd_cnt = cnt;
+	pcmds->buf = buf;
+	pcmds->blen = blen;
+
+	bp = buf;
+	len = blen;
+	for (i = 0; i < cnt; i++) {
+		dchdr = (struct dsi_ctrl_hdr *)bp;
+		len -= sizeof(*dchdr);
+		bp += sizeof(*dchdr);
+		pcmds->cmds[i].dchdr = *dchdr;
+		pcmds->cmds[i].payload = bp;
+		bp += dchdr->dlen;
+		len -= dchdr->dlen;
+	}
+
+
+	data = of_get_property(np, link_key, NULL);
+	if (!strncmp(data, "dsi_hs_mode", 11))
+		pcmds->link_state = DSI_HS_MODE;
+	else
+		pcmds->link_state = DSI_LP_MODE;
+	pr_debug("%s: dcs_cmd=%x len=%d, cmd_cnt=%d link_state=%d\n", __func__,
+		pcmds->buf[0], pcmds->blen, pcmds->cmd_cnt, pcmds->link_state);
+
+	return 0;
+}
+
 static int mdss_panel_parse_dt(struct device_node *np,
 					struct mdss_dsi_ctrl_pdata *ctrl_pdata)
 {
@@ -1616,7 +1851,6 @@
 	int rc, i, len;
 	const char *data;
 	static const char *bl_ctrl_type, *pdest;
-	static const char *on_cmds_state, *off_cmds_state;
 	struct mdss_panel_info *pinfo = &(ctrl_pdata->panel_data.panel_info);
 	bool fbc_enabled = false;
 
@@ -1779,12 +2013,13 @@
 		"qcom,mdss-pan-wr-mem-start", &tmp);
 	pinfo->mipi.wr_mem_start =
 		(!rc ? tmp : 0x2c);
-
+/*
 	rc = of_property_read_u32(np,
 		"qcom,mdss-pan-te-sel", &tmp);
 	pinfo->mipi.te_sel =
 		(!rc ? tmp : 1);
-
+*/
+	mdss_panel_parse_te_params(np, pinfo);
 	rc = of_property_read_u32(np,
 		"qcom,mdss-pan-dsi-dst-format", &tmp);
 	pinfo->mipi.dst_format =
@@ -1945,6 +2180,11 @@
 			pinfo->bpp;
 	}
 
+	mdss_dsi_parse_dcs_cmds(np, &ctrl_pdata->on_cmds,
+		"qcom,panel-display-on-cmds", "qcom,on-cmds-dsi-state");
+	mdss_dsi_parse_dcs_cmds(np, &ctrl_pdata->off_cmds,
+		"qcom,panel-display-on-cmds", "qcom,off-cmds-dsi-state");
+
 	mdss_samsung_parse_panel_cmd(np, &display_on_seq,
 				"qcom,panel-display-on-seq");
 
@@ -1955,29 +2195,6 @@
 	mdss_samsung_parse_panel_cmd(np, &display_off_cmd,
 				"qcom,panel-display-off-cmds");
 
-	on_cmds_state = of_get_property(np,
-				"qcom,on-cmds-dsi-state", NULL);
-	if (!strncmp(on_cmds_state, "DSI_LP_MODE", 11)) {
-		ctrl_pdata->dsi_on_state = DSI_LP_MODE;
-	} else if (!strncmp(on_cmds_state, "DSI_HS_MODE", 11)) {
-		ctrl_pdata->dsi_on_state = DSI_HS_MODE;
-	} else {
-		pr_debug("%s: ON cmds state not specified. Set Default\n",
-							__func__);
-		ctrl_pdata->dsi_on_state = DSI_LP_MODE;
-	}
-
-	off_cmds_state = of_get_property(np, "qcom,off-cmds-dsi-state", NULL);
-	if (!strncmp(off_cmds_state, "DSI_LP_MODE", 11)) {
-		ctrl_pdata->dsi_off_state = DSI_LP_MODE;
-	} else if (!strncmp(off_cmds_state, "DSI_HS_MODE", 11)) {
-		ctrl_pdata->dsi_off_state = DSI_HS_MODE;
-	} else {
-		pr_debug("%s: ON cmds state not specified. Set Default\n",
-							__func__);
-		ctrl_pdata->dsi_off_state = DSI_LP_MODE;
-	}
-
 	mdss_samsung_parse_panel_cmd(np, &nv_mtp_read_cmds,
 				"samsung,panel-nv-mtp-read-cmds");
 
@@ -1999,7 +2216,10 @@
 
 	mdss_samsung_parse_panel_cmd(np, &aclcont_cmds_list,
 				"samsung,panel-aclcont-cmds-list");
-
+#if defined(TEMPERATURE_ELVSS_S6E3HA1)
+	mdss_samsung_parse_panel_cmd(np, &elvss_lowtemp_cmds_list,
+			"samsung,panel-elvss-lowtemp-cmds-list");
+#endif
 	mdss_samsung_parse_panel_cmd(np, &gamma_cmds_list,
 				"samsung,panel-gamma-cmds-list");
 	mdss_samsung_parse_panel_cmd(np, &elvss_cmds_list,
@@ -2087,6 +2307,11 @@
 			if(msd.dstat.wait_disp_on) {
 				pr_info("DISPLAY_ON\n");
 				mipi_samsung_disp_send_cmd(PANEL_DISPLAY_ON, true);
+				if (msd.dstat.auto_brightness == 6 && !msd.dstat.hbm_mode) {
+					mipi_samsung_disp_send_cmd(PANEL_BRIGHT_CTRL, true);
+					msd.dstat.hbm_mode = 1;
+					pr_debug("DISPLAY_ON  HBM Mode Applied\n");
+				}
 				msd.dstat.wait_disp_on = 0;
 			}
 			break;
@@ -2311,7 +2536,7 @@
 	if (unlikely(mfd->key != MFD_KEY))
 		return -EINVAL;
 
-	rc = snprintf((char *)buf, sizeof(buf), "%d\n", mfd->panel_power_on);
+	rc = snprintf((char *)buf, PAGE_SIZE, "%d\n", mfd->panel_power_on);
 	pr_info("mipi_samsung_disp_get_power(%d)\n", mfd->panel_power_on);
 
 	return rc;
@@ -2366,7 +2591,7 @@
 	id2 = (msd.manufacture_id & 0x0000FF00) >> 8;
 	id3 = msd.manufacture_id & 0xFF;
 
-	snprintf(temp, sizeof(temp), "%x %x %x\n",	id1, id2, id3);
+	snprintf(temp, PAGE_SIZE, "%x %x %x\n",	id1, id2, id3);
 	strlcat(buf, temp, 15);
 	return strnlen(buf, 15);
 }
@@ -2376,7 +2601,7 @@
 {
 	char temp[30];
 
-	snprintf((char *)temp, sizeof(temp), "manufacture date : %d\n", msd.manufacture_date);
+	snprintf((char *)temp, PAGE_SIZE, "manufacture date : %d\n", msd.manufacture_date);
 	strlcat(buf, temp, 30);
 
 	pr_info("manufacture date : %d\n", msd.manufacture_date);
@@ -2404,7 +2629,7 @@
 {
 	int rc;
 
-	rc = snprintf((char *)buf, sizeof(buf), "%d\n", msd.dstat.acl_on);
+	rc = snprintf((char *)buf, PAGE_SIZE, "%d\n", msd.dstat.acl_on);
 	pr_info("acl status: %d\n", *buf);
 
 	return rc;
@@ -2466,7 +2691,7 @@
 {
 	int rc;
 
-	rc = snprintf((char *)buf, sizeof(buf), "%d\n", msd.dstat.siop_status);
+	rc = snprintf((char *)buf, PAGE_SIZE, "%d\n", msd.dstat.siop_status);
 	pr_info("siop status: %d\n", *buf);
 
 	return rc;
@@ -2527,8 +2752,10 @@
 {
 	int rc = 0;
 
-	if (msd.dstat.is_smart_dim_loaded)
-		msd.sdimconf->print_aid_log();
+	if (msd.dstat.is_smart_dim_loaded){
+		if(msd.sdimconf->print_aid_log)
+			msd.sdimconf->print_aid_log();
+	}
 	else
 		pr_err("smart dim is not loaded..\n");
 
@@ -2541,7 +2768,7 @@
 {
 	int rc;
 
-	rc = snprintf((char *)buf, sizeof(buf), "%d\n",
+	rc = snprintf((char *)buf, PAGE_SIZE, "%d\n",
 					msd.dstat.auto_brightness);
 	pr_info("auto_brightness: %d\n", *buf);
 
@@ -2583,6 +2810,9 @@
 
 	if (msd.mfd->resume_state == MIPI_RESUME_STATE) {
 		mipi_samsung_disp_send_cmd(PANEL_BRIGHT_CTRL, true);
+#if defined(CONFIG_MDNIE_LITE_TUNING)
+		mDNIe_Set_Mode(); // LOCAL CE tuning
+#endif
 		pr_info("%s %d %d\n", __func__, msd.dstat.auto_brightness, msd.dstat.bright_level);
 	} else {
 		pr_info("%s : panel is off state!!\n", __func__);
@@ -2639,7 +2869,7 @@
 
 #endif
 
-
+#if defined(TEMPERATURE_ELVSS_S6E3HA1)
 static ssize_t mipi_samsung_temperature_show(struct device *dev,
 		struct device_attribute *attr, char *buf)
 {
@@ -2684,6 +2914,7 @@
 
 	return size;
 }
+#endif
 
 #if defined(DYNAMIC_FPS_USE_TE_CTRL)
 static ssize_t dynamic_fps_use_te_ctrl_show(struct device *dev,
@@ -2733,12 +2964,14 @@
 static DEVICE_ATTR(read_mtp, S_IRUGO | S_IWUSR | S_IWGRP,
 			NULL,
 			mipi_samsung_read_mtp_store);
+#if defined(TEMPERATURE_ELVSS_S6E3HA1)
 static DEVICE_ATTR(temperature, S_IRUGO | S_IWUSR | S_IWGRP,
 			mipi_samsung_temperature_show,
 			mipi_samsung_temperature_store);
 static DEVICE_ATTR(aid_log, S_IRUGO | S_IWUSR | S_IWGRP,
 			mipi_samsung_aid_log_show,
 			NULL);
+#endif
 #if defined(DYNAMIC_FPS_USE_TE_CTRL)
 static DEVICE_ATTR(dynamic_fps_use_te, S_IRUGO | S_IWUSR | S_IWGRP,
 			dynamic_fps_use_te_ctrl_show,
@@ -2755,7 +2988,9 @@
 	&dev_attr_siop_enable.attr,
 	&dev_attr_aid_log.attr,
 	&dev_attr_read_mtp.attr,
+#if defined(TEMPERATURE_ELVSS_S6E3HA1)
 	&dev_attr_temperature.attr,
+#endif
 #if defined(DYNAMIC_FPS_USE_TE_CTRL)
 	&dev_attr_dynamic_fps_use_te.attr,
 #endif
diff -Nur a/drivers/video/msm/mdss/mdss_samsung_oled_cmd_hd_wqhd_panel.c b/drivers/video/msm/mdss/mdss_samsung_oled_cmd_hd_wqhd_panel.c
--- a/drivers/video/msm/mdss/mdss_samsung_oled_cmd_hd_wqhd_panel.c	2016-01-10 16:25:37.432141000 -0500
+++ b/drivers/video/msm/mdss/mdss_samsung_oled_cmd_hd_wqhd_panel.c	2015-12-01 05:57:13.000000000 -0500
@@ -29,6 +29,7 @@
 #include "mdss_dsi.h"
 #include "mdss_samsung_oled_cmd_hd_wqhd_panel.h"
 #include "mdss_fb.h"
+#include "mdss_debug.h"
 
 #if defined(CONFIG_MDNIE_LITE_TUNING)
 #include "mdnie_lite_tuning.h"
@@ -271,6 +272,7 @@
 		unsigned char lock);
 extern void mdss_dsi_panel_touchsensing(int enable);
 int get_lcd_attached(void);
+void set_samsung_lcd_attached(int set);
 int get_lcd_id(void);
 int get_lcd_ldi_info(void);
 #if defined(ALPM_MODE)
@@ -595,8 +597,8 @@
 static char caset[] = {0x2a, 0x00, 0x00, 0x03, 0x00};	/* DTYPE_DCS_LWRITE */
 static char paset[] = {0x2b, 0x00, 0x00, 0x05, 0x00};	/* DTYPE_DCS_LWRITE */
 static struct dsi_cmd_desc partial_update_enable_cmd[] = {
-	{{DTYPE_DCS_LWRITE, 0, 0, 0, 1, sizeof(caset)}, caset},
-	{{DTYPE_DCS_LWRITE, 1, 0, 0, 1, sizeof(paset)}, paset},
+	{{DTYPE_DCS_LWRITE, 0, 0, 0, 0, sizeof(caset)}, caset},
+	{{DTYPE_DCS_LWRITE, 1, 0, 0, 0, sizeof(paset)}, paset},
 };
 int mdss_dsi_panel_partial_update(struct mdss_panel_data *pdata)
 {
@@ -1345,6 +1347,11 @@
 {
 	struct dcs_cmd_req cmdreq;
 
+	if (!get_lcd_id()) {
+		printk("%s: get_my_check(0)!\n",__func__);
+		return;
+	}
+
 	if (get_lcd_attached() == 0) {
 		printk("%s: get_lcd_attached(0)!\n",__func__);
 		return;
@@ -1376,19 +1383,23 @@
     struct dcs_cmd_req cmdreq;
 	char *buf;
 
+	if (!get_lcd_id()) {
+		printk("%s: get_my_check(0)!\n",__func__);
+		return -ENODEV;
+	}
+
 	if (get_lcd_attached() == 0) {
 		printk("%s: get_lcd_attached(0)!\n",__func__);
 		return 0;
 	}
 
 	buf = kmalloc(sizeof(rlen), GFP_KERNEL);
-
     memset(&cmdreq, 0, sizeof(cmdreq));
     cmdreq.cmds = cmd;
     cmdreq.cmds_cnt = 1;
     cmdreq.flags = CMD_REQ_RX | CMD_REQ_COMMIT;
-    cmdreq.rlen = rlen;
 	cmdreq.rbuf = buf;
+    cmdreq.rlen = rlen;
     cmdreq.cb = NULL; /* call back */
     /*
 	 * This mutex is to sync up with dynamic FPS changes
@@ -1401,6 +1412,7 @@
     /*
      * blocked here, untill call back called
      */
+    kfree(buf);
     return ctrl->rx_buf.len;
 }
 
@@ -1584,6 +1596,10 @@
 	return 0x501401;
 #endif
 
+	if (!get_lcd_id()) {
+		printk("%s: get_my_check(0)!\n",__func__);
+		return -ENODEV;
+	}
 
 	if (get_lcd_attached() == 0)
 	{
@@ -1672,6 +1688,11 @@
 	int i,j;
 #endif
 
+	if (!get_lcd_id()) {
+		printk("%s: get_my_check(0)!\n",__func__);
+		return -ENODEV;
+	}
+
 	if (get_lcd_attached() == 0) {
 		printk("%s: get_lcd_attached(0)!\n",__func__);
 		return -ENODEV;
@@ -1745,10 +1766,17 @@
 			else
 				flag = 0;
 #endif
+
+#if defined(CONFIG_NEW_UX_ACL_SUPPORT)
+			if (msd.dstat.bright_level == 255)
+				msd.dstat.acl_on = 0;
+			else msd.dstat.acl_on = 1;/*default: acl on except max 255 bl level*/
+#endif
+
 			msd.dstat.recent_bright_level = msd.dstat.bright_level;
 
 #if defined(HBM_RE)
-			if(msd.dstat.auto_brightness == 6) {
+			if(msd.dstat.auto_brightness >= 6 && msd.dstat.bright_level == 255) {
 				cmd_size = make_brightcontrol_hbm_set(msd.dstat.bright_level);
 				msd.dstat.hbm_mode = 1;
 			} else {
@@ -1959,6 +1987,11 @@
 	return;
 #endif
 
+	if (!get_lcd_id()) {
+		printk("%s: get_my_check(0)!\n",__func__);
+		return;
+	}
+
 	if (get_lcd_attached() == 0) {
 		pr_err("%s: get_lcd_attached(0)!\n",__func__);
 		return;
@@ -2624,7 +2657,7 @@
 
 }
 
-int mdss_panel_get_dst_fmt(u32 bpp, char mipi_mode, u32 pixel_packing,
+int mdss_panel_dt_get_dst_fmt(u32 bpp, char mipi_mode, u32 pixel_packing,
 				char *dst_format)
 {
 	int rc = 0;
@@ -2785,6 +2818,87 @@
 				pinfo->min_height);
 	}
 }
+static int mdss_dsi_parse_dcs_cmds(struct device_node *np,
+		struct dsi_panel_cmds *pcmds, char *cmd_key, char *link_key)
+{
+	const char *data;
+	int blen = 0, len;
+	char *buf, *bp;
+	struct dsi_ctrl_hdr *dchdr;
+	int i, cnt;
+
+	data = of_get_property(np, cmd_key, &blen);
+	if (!data) {
+		pr_err("%s: failed, key=%s\n", __func__, cmd_key);
+		return -ENOMEM;
+	}
+
+	buf = kzalloc(sizeof(char) * blen, GFP_KERNEL);
+	if (!buf)
+		return -ENOMEM;
+
+	memcpy(buf, data, blen);
+
+	/* scan dcs commands */
+	bp = buf;
+	len = blen;
+	cnt = 0;
+	while (len > sizeof(*dchdr)) {
+		dchdr = (struct dsi_ctrl_hdr *)bp;
+		dchdr->dlen = ntohs(dchdr->dlen);
+		if (dchdr->dlen > len) {
+			pr_err("%s: dtsi cmd=%x error, len=%d",
+				__func__, dchdr->dtype, dchdr->dlen);
+			return -ENOMEM;
+		}
+		bp += sizeof(*dchdr);
+		len -= sizeof(*dchdr);
+		bp += dchdr->dlen;
+		len -= dchdr->dlen;
+		cnt++;
+	}
+
+	if (len != 0) {
+		pr_err("%s: dcs_cmd=%x len=%d error!",
+				__func__, buf[0], blen);
+		kfree(buf);
+		return -ENOMEM;
+	}
+
+	pcmds->cmds = kzalloc(cnt * sizeof(struct dsi_cmd_desc),
+						GFP_KERNEL);
+	if (!pcmds->cmds){
+		kfree(buf);
+		return -ENOMEM;
+	}
+
+	pcmds->cmd_cnt = cnt;
+	pcmds->buf = buf;
+	pcmds->blen = blen;
+
+	bp = buf;
+	len = blen;
+	for (i = 0; i < cnt; i++) {
+		dchdr = (struct dsi_ctrl_hdr *)bp;
+		len -= sizeof(*dchdr);
+		bp += sizeof(*dchdr);
+		pcmds->cmds[i].dchdr = *dchdr;
+		pcmds->cmds[i].payload = bp;
+		bp += dchdr->dlen;
+		len -= dchdr->dlen;
+	}
+
+
+	data = of_get_property(np, link_key, NULL);
+	if (!strncmp(data, "dsi_hs_mode", 11))
+		pcmds->link_state = DSI_HS_MODE;
+	else
+		pcmds->link_state = DSI_LP_MODE;
+	pr_debug("%s: dcs_cmd=%x len=%d, cmd_cnt=%d link_state=%d\n", __func__,
+		pcmds->buf[0], pcmds->blen, pcmds->cmd_cnt, pcmds->link_state);
+
+	return 0;
+}
 
 static int mdss_panel_parse_dt(struct device_node *np,
 					struct mdss_dsi_ctrl_pdata *ctrl_pdata)
@@ -2794,7 +2908,6 @@
 	int rc, i, len;
 	const char *data;
 	static const char *bl_ctrl_type, *pdest;
-	static const char *on_cmds_state, *off_cmds_state;
 	struct mdss_panel_info *pinfo = &(ctrl_pdata->panel_data.panel_info);
 	bool fbc_enabled = false;
 
@@ -3151,29 +3264,10 @@
 		pinfo->fbc.target_bpp =
 			pinfo->bpp;
 	}
-
-	on_cmds_state = of_get_property(np,
-				"qcom,on-cmds-dsi-state", NULL);
-	if (!strncmp(on_cmds_state, "DSI_LP_MODE", 11)) {
-		ctrl_pdata->dsi_on_state = DSI_LP_MODE;
-	} else if (!strncmp(on_cmds_state, "DSI_HS_MODE", 11)) {
-		ctrl_pdata->dsi_on_state = DSI_HS_MODE;
-	} else {
-		pr_debug("%s: ON cmds state not specified. Set Default\n",
-							__func__);
-		ctrl_pdata->dsi_on_state = DSI_LP_MODE;
-	}
-
-	off_cmds_state = of_get_property(np, "qcom,off-cmds-dsi-state", NULL);
-	if (!strncmp(off_cmds_state, "DSI_LP_MODE", 11)) {
-		ctrl_pdata->dsi_off_state = DSI_LP_MODE;
-	} else if (!strncmp(off_cmds_state, "DSI_HS_MODE", 11)) {
-		ctrl_pdata->dsi_off_state = DSI_HS_MODE;
-	} else {
-		pr_debug("%s: ON cmds state not specified. Set Default\n",
-							__func__);
-		ctrl_pdata->dsi_off_state = DSI_LP_MODE;
-	}
+	mdss_dsi_parse_dcs_cmds(np, &ctrl_pdata->on_cmds,
+		"qcom,panel-display-on-cmds", "qcom,on-cmds-dsi-state");
+	mdss_dsi_parse_dcs_cmds(np, &ctrl_pdata->off_cmds,
+		"qcom,panel-display-off-cmds", "qcom,off-cmds-dsi-state");
 
 	mdss_samsung_parse_panel_cmd(np, &display_on_seq,
 				"qcom,panel-display-on-seq");
@@ -5909,6 +6003,8 @@
 	static const char *panel_name;
 	bool cont_splash_enabled;
 	struct mdss_panel_info *pinfo;
+	struct mdss_debug_data *mdd =
+				(struct mdss_debug_data *)((mdss_mdp_get_mdata())->debug_inf.debug_data);
 
 	pr_debug("%s: ++ \n", __func__);
 
@@ -6001,7 +6097,28 @@
 	register_early_suspend(&msd.early_suspend);
 #endif
 
-	pr_debug("%s : --\n",__func__);
+	if (get_lcd_attached() == 0) {
+		pr_err("%s: get_lcd_attached(0)!.. set VIDEO mode..\n",__func__);
+
+		pinfo->type = MIPI_VIDEO_PANEL;
+		pinfo->mipi.mode = DSI_VIDEO_MODE;
+		pinfo->mipi.traffic_mode = DSI_BURST_MODE;
+		pinfo->mipi.bllp_power_stop = true;
+		pinfo->mipi.te_sel = 0;
+		pinfo->mipi.vsync_enable = 0;
+		pinfo->mipi.hw_vsync_mode = 0;
+		pinfo->mipi.force_clk_lane_hs = true;
+		pinfo->mipi.dst_format = DSI_VIDEO_DST_FORMAT_RGB888;
+		pinfo->cont_splash_enabled = false;
+		pinfo->esd_check_enabled = false;
+		ctrl_pdata->on_cmds.link_state = DSI_LP_MODE;
+		ctrl_pdata->off_cmds.link_state = DSI_LP_MODE;
+		mdd->logd.xlog_enable = 0;
+
+		set_samsung_lcd_attached(1);
+	}
+
+	pr_info("%s : --\n",__func__);
 
 	return 0;
 }
@@ -6023,6 +6140,12 @@
 	return lcd_attached;
 
 }
+
+void set_samsung_lcd_attached(int set)
+{
+	lcd_attached = set;
+}
+
 EXPORT_SYMBOL(get_samsung_lcd_attached);
 
 static int __init lcd_panel_info(char *mode)
diff -Nur a/drivers/video/msm/mdss/mdss_samsung_tft_video_dual_dsi_panel.c b/drivers/video/msm/mdss/mdss_samsung_tft_video_dual_dsi_panel.c
--- a/drivers/video/msm/mdss/mdss_samsung_tft_video_dual_dsi_panel.c	2016-01-10 16:25:37.432141000 -0500
+++ b/drivers/video/msm/mdss/mdss_samsung_tft_video_dual_dsi_panel.c	2015-12-01 05:57:13.000000000 -0500
@@ -367,6 +367,72 @@
 	return 0;
 }
 
+int mdss_panel_dt_get_dst_fmt(u32 bpp, char mipi_mode, u32 pixel_packing,
+				char *dst_format)
+{
+	int rc = 0;
+	switch (bpp) {
+	case 3:
+		*dst_format = DSI_CMD_DST_FORMAT_RGB111;
+		break;
+	case 8:
+		*dst_format = DSI_CMD_DST_FORMAT_RGB332;
+		break;
+	case 12:
+		*dst_format = DSI_CMD_DST_FORMAT_RGB444;
+		break;
+	case 16:
+		switch (mipi_mode) {
+		case DSI_VIDEO_MODE:
+			*dst_format = DSI_VIDEO_DST_FORMAT_RGB565;
+			break;
+		case DSI_CMD_MODE:
+			*dst_format = DSI_CMD_DST_FORMAT_RGB565;
+			break;
+		default:
+			*dst_format = DSI_VIDEO_DST_FORMAT_RGB565;
+			break;
+		}
+		break;
+	case 18:
+		switch (mipi_mode) {
+		case DSI_VIDEO_MODE:
+			if (pixel_packing == 0)
+				*dst_format = DSI_VIDEO_DST_FORMAT_RGB666;
+			else
+				*dst_format = DSI_VIDEO_DST_FORMAT_RGB666_LOOSE;
+			break;
+		case DSI_CMD_MODE:
+			*dst_format = DSI_CMD_DST_FORMAT_RGB666;
+			break;
+		default:
+			if (pixel_packing == 0)
+				*dst_format = DSI_VIDEO_DST_FORMAT_RGB666;
+			else
+				*dst_format = DSI_VIDEO_DST_FORMAT_RGB666_LOOSE;
+			break;
+		}
+		break;
+	case 24:
+		switch (mipi_mode) {
+		case DSI_VIDEO_MODE:
+			*dst_format = DSI_VIDEO_DST_FORMAT_RGB888;
+			break;
+		case DSI_CMD_MODE:
+			*dst_format = DSI_CMD_DST_FORMAT_RGB888;
+			break;
+		default:
+			*dst_format = DSI_VIDEO_DST_FORMAT_RGB888;
+			break;
+		}
+		break;
+	default:
+		rc = -EINVAL;
+		break;
+	}
+	return rc;
+}
+
 
 static int mdss_dsi_parse_dcs_cmds(struct device_node *np,
 		struct dsi_panel_cmds *pcmds, char *cmd_key, char *link_key)
@@ -443,7 +509,7 @@
 	pcmds->link_state = DSI_LP_MODE; /* default */
 
 	data = of_get_property(np, link_key, NULL);
-	if (!strncmp(data, "DSI_HS_MODE", 11))
+	if (!strncmp(data, "dsi_hs_mode", 11))
 		pcmds->link_state = DSI_HS_MODE;
 
 	pr_debug("%s: dcs_cmd=%x len=%d, cmd_cnt=%d link_state=%d\n", __func__,
@@ -566,7 +632,6 @@
 	int rc, i, len;
 	const char *data;
 	static const char *bl_ctrl_type, *pdest;
-	static const char *on_cmds_state, *off_cmds_state;
 	struct mdss_panel_info *pinfo = &(ctrl_pdata->panel_data.panel_info);
 
 	rc = of_property_read_u32_array(np, "qcom,mdss-pan-res", res, 2);
@@ -670,7 +735,7 @@
 	}
 
 	rc = of_property_read_u32(np, "qcom,mdss-brightness-max-level", &tmp);
-	pinfo->brightness_max = (!rc ? tmp : MDSS_MAX_BL_BRIGHTNESS);	
+	pinfo->brightness_max = (!rc ? tmp : MDSS_MAX_BL_BRIGHTNESS);
 
 	rc = of_property_read_u32_array(np,
 		"qcom,mdss-pan-bl-levels", res, 2);
@@ -853,30 +918,6 @@
 	mdss_dsi_parse_dcs_cmds(np, &ctrl_pdata->cabc_tune_cmds,
 		"samsung,panel-cabc-tune-cmds", "qcom,off-cmds-dsi-state");
 
-	on_cmds_state = of_get_property(np,
-				"qcom,on-cmds-dsi-state", NULL);
-	if (!strncmp(on_cmds_state, "DSI_LP_MODE", 11)) {
-		ctrl_pdata->dsi_on_state = DSI_LP_MODE;
-	} else if (!strncmp(on_cmds_state, "DSI_HS_MODE", 11)) {
-		ctrl_pdata->dsi_on_state = DSI_HS_MODE;
-	} else {
-		pr_debug("%s: ON cmds state not specified. Set Default\n",
-							__func__);
-		ctrl_pdata->dsi_on_state = DSI_LP_MODE;
-	}
-
-	off_cmds_state = of_get_property(np, "qcom,off-cmds-dsi-state", NULL);
-	if (!strncmp(off_cmds_state, "DSI_LP_MODE", 11)) {
-		ctrl_pdata->dsi_off_state = DSI_LP_MODE;
-	} else if (!strncmp(off_cmds_state, "DSI_HS_MODE", 11)) {
-		ctrl_pdata->dsi_off_state = DSI_HS_MODE;
-	} else {
-		pr_debug("%s: ON cmds state not specified. Set Default\n",
-							__func__);
-		ctrl_pdata->dsi_off_state = DSI_LP_MODE;
-	}
-
-
 	return 0;
 
 error:
diff -Nur a/drivers/video/msm/mdss/mdss_sdc_wxga_dsi_panel.c b/drivers/video/msm/mdss/mdss_sdc_wxga_dsi_panel.c
--- a/drivers/video/msm/mdss/mdss_sdc_wxga_dsi_panel.c	2016-01-10 16:25:37.432141000 -0500
+++ b/drivers/video/msm/mdss/mdss_sdc_wxga_dsi_panel.c	2015-12-01 05:57:13.000000000 -0500
@@ -540,7 +540,7 @@
 
 	ctrl_pdata = container_of(pdata, struct mdss_dsi_ctrl_pdata,
 				panel_data);
-	
+
 	pr_err("%s:@@@@@@@@@@@@@@@@@@@ bklt_ctrl:%d :bl_level=%d\n", __func__,ctrl_pdata->bklt_ctrl,bl_level);
 	/*
 	 * Some backlight controllers specify a minimum duty cycle
@@ -573,13 +573,15 @@
 }
 #if !defined(CONFIG_MACH_DEGASLTE_SPR)
 extern void pwm_backlight_enable(void);
-
+#endif
 static int samsung_dsi_panel_event_handler(int event)
 {
+	static int first_init = 0;
 	pr_debug("SS DSI Event Handler");
 		switch (event) {
 			case MDSS_EVENT_BACKLIGHT_LATE_ON:
 				if(msd.dstat.wait_bl_on) {
+#if !defined(CONFIG_MACH_DEGASLTE_SPR)
 					msleep(32);
 					if (gpio_is_valid(msd.bl_rst_gpio)) {
 						gpio_tlmm_config(GPIO_CFG(msd.bl_rst_gpio, 0,
@@ -589,8 +591,21 @@
 					msleep(1);
 					pwm_backlight_enable();
 					msleep(1);
+					if (!first_init) {
+						mdss_fb_set_backlight(msd.mfd, 255);
+						first_init = 1;
+					}
 					pr_info("SS DSI Event Handler Backlight Late on");
 					}
+#else
+					if (!first_init) {
+						/* This value should be equal to what the Android Application 
+						set as default on CSC setting apply */
+						mdss_fb_set_backlight(msd.mfd, 102);
+						first_init = 1;
+					}
+					pr_info("SS DSI Event Handler Backlight Late on");
+#endif
 					msd.dstat.wait_bl_on = 0;
 				}
 			break;
@@ -601,7 +616,7 @@
 	}
 	return 0;
 }
-#endif
+
 static int mdss_dsi_panel_on(struct mdss_panel_data *pdata)
 {
 	struct mdss_dsi_ctrl_pdata *ctrl = NULL;
@@ -654,7 +669,7 @@
 #endif
 	pr_debug("%s: ctrl=%p ndx=%d\n", __func__, ctrl, ctrl->ndx);
 
-#if defined(CONFIG_SEC_T10_PROJECT) || defined(CONFIG_SEC_RUBENS_PROJECT)
+#if defined(CONFIG_SEC_T10_PROJECT) || defined(CONFIG_SEC_RUBENS_PROJECT) || defined(CONFIG_SEC_MILLET_PROJECT)
 	if (gpio_is_valid(msd.bl_rst_gpio)) {
 			gpio_tlmm_config(GPIO_CFG(msd.bl_rst_gpio, 0,
 				GPIO_CFG_OUTPUT,GPIO_CFG_PULL_DOWN,GPIO_CFG_2MA),
@@ -761,7 +776,7 @@
 
 	return 0;
 }
-static int mdss_panel_dt_get_dst_fmt(u32 bpp, char mipi_mode, u32 pixel_packing,
+int mdss_panel_dt_get_dst_fmt(u32 bpp, char mipi_mode, u32 pixel_packing,
 				char *dst_format)
 {
 	int rc = 0;
@@ -987,7 +1002,6 @@
 	int rc, i, len;
 	const char *data;
 	static const char *pdest;
-	static const char *on_cmds_state, *off_cmds_state;
 	struct mdss_panel_info *pinfo = &(ctrl_pdata->panel_data.panel_info);
 	rc = of_property_read_u32(np, "qcom,mdss-dsi-panel-width", &tmp);
 	if (rc) {
@@ -1042,7 +1056,7 @@
 		pinfo->mipi.dst_format =
 			DSI_VIDEO_DST_FORMAT_RGB888;
 	}
-	
+
 	pdest = of_get_property(np,
 			"qcom,mdss-dsi-panel-destination", NULL);
 	if (strlen(pdest) != 9) {
@@ -1094,7 +1108,7 @@
 /*			rc = of_property_read_u32(np,
 				"qcom,mdss-dsi-bl-pmic-pwm-frequency", &tmp);
 			if (rc) {
-				pr_err("%s:%d, Error, panel pwm_period\n",		
+				pr_err("%s:%d, Error, panel pwm_period\n",
 					__func__, __LINE__);
 			return -EINVAL;
 			}
@@ -1125,7 +1139,7 @@
 
 	rc = of_property_read_u32(np, "qcom,mdss-dsi-interleave-mode", &tmp);
 	pinfo->mipi.interleave_mode = (!rc ? tmp : 0);
- 
+
 	pinfo->mipi.vsync_enable = of_property_read_bool(np,
 		"qcom,mdss-dsi-te-check-enable");
 	pinfo->mipi.hw_vsync_mode = of_property_read_bool(np,
@@ -1174,7 +1188,7 @@
 
 	rc = of_property_read_u32(np, "qcom,mdss-dsi-color-order", &tmp);
 	pinfo->mipi.rgb_swap = (!rc ? tmp : DSI_RGB_SWAP_RGB);
-	
+
 	rc = of_property_read_u32(np, "qcom,mdss-force-clk-lane-hs", &tmp);
 	pinfo->mipi.force_clk_lane_hs = (!rc ? tmp : 0);
 
@@ -1274,29 +1288,6 @@
 	mdss_dsi_parse_dcs_cmds(np, &ctrl_pdata->off_cmds,
 		"qcom,mdss-dsi-off-command", "qcom,mdss-dsi-off-command-state");
 
-	on_cmds_state = of_get_property(np,
-				"qcom,mdss-dsi-on-command-state", NULL);
-	if (!strncmp(on_cmds_state, "dsi_lp_mode", 11)) {
-		ctrl_pdata->dsi_on_state = DSI_LP_MODE;
-	} else if (!strncmp(on_cmds_state, "dsi_hs_mode", 11)) {
-		ctrl_pdata->dsi_on_state = DSI_HS_MODE;
-	} else {
-		pr_debug("%s: ON cmds state not specified. Set Default\n",
-							__func__);
-		ctrl_pdata->dsi_on_state = DSI_LP_MODE;
-	}
-
-	off_cmds_state = of_get_property(np, "qcom,mdss-dsi-off-command-state", NULL);
-	if (!strncmp(off_cmds_state, "dsi_lp_mode", 11)) {
-		ctrl_pdata->dsi_off_state = DSI_LP_MODE;
-	} else if (!strncmp(off_cmds_state, "dsi_hs_mode", 11)) {
-		ctrl_pdata->dsi_off_state = DSI_HS_MODE;
-	} else {
-		pr_debug("%s: ON cmds state not specified. Set Default\n",
-							__func__);
-		ctrl_pdata->dsi_off_state = DSI_LP_MODE;
-	}
-
 	return 0;
 error:
 	return -EINVAL;
@@ -1567,9 +1558,7 @@
 		}
 		ctrl_pdata->ctrl_state |= CTRL_STATE_PANEL_INIT;
 	}
-#if !defined(CONFIG_MACH_DEGASLTE_SPR)
 	ctrl_pdata->event_handler(MDSS_EVENT_BACKLIGHT_LATE_ON);
-#endif 
 	disable_irq_nosync(err_fg_gpio);
 	enable_irq(err_fg_gpio);
 	mdelay(20);
@@ -2038,9 +2027,9 @@
 	ctrl_pdata->panel_data.set_backlight = mdss_dsi_panel_bl_ctrl;
 	ctrl_pdata->panel_reset = mdss_dsi_sdc_panel_reset;
 	ctrl_pdata->registered = mdss_dsi_panel_registered;
-#if  !defined(CONFIG_MACH_DEGASLTE_SPR)
+
 	ctrl_pdata->event_handler = samsung_dsi_panel_event_handler;
-#endif
+
 #if defined(CONFIG_LCD_CLASS_DEVICE)
 	lcd_device = lcd_device_register("panel", &pdev->dev, NULL,
 					&mdss_dsi_disp_props);
diff -Nur a/drivers/video/msm/mdss/mdss_sharp_hd_dsi_panel.c b/drivers/video/msm/mdss/mdss_sharp_hd_dsi_panel.c
--- a/drivers/video/msm/mdss/mdss_sharp_hd_dsi_panel.c	2016-01-10 16:25:37.432141000 -0500
+++ b/drivers/video/msm/mdss/mdss_sharp_hd_dsi_panel.c	2015-12-01 05:57:13.000000000 -0500
@@ -137,10 +137,10 @@
 	cmdreq.flags = CMD_REQ_COMMIT | CMD_CLK_CTRL;
 	cmdreq.rlen = 0;
 	cmdreq.cb = NULL;
-	
-		
+
+
 	mdss_dsi_cmdlist_put(ctrl, &cmdreq);
-	
+
 }
 
 static void mdss_dsi_panel_cmds_send(struct mdss_dsi_ctrl_pdata *ctrl,
@@ -224,7 +224,7 @@
 
 	mdss_dsi_cmdlist_put(ctrl, &cmdreq);
 }
-#if defined (CONFIG_LCD_CLASS_DEVICE) 
+#if defined (CONFIG_LCD_CLASS_DEVICE)
 static char lcd_cabc[2] = {0x55, 0x0};	/* CABC COMMAND : default disabled */
 static struct dsi_cmd_desc cabc_cmd= {
 	{DTYPE_DCS_WRITE1, 1, 0, 0, 1, sizeof(lcd_cabc)},
@@ -238,7 +238,7 @@
 };
 static void mdss_dsi_panel_cabc_dcs(struct mdss_dsi_ctrl_pdata *ctrl, int siop_status)
 {
-	
+
 	struct dcs_cmd_req cmdreq;
 
 	pr_debug("%s: cabc=%d\n", __func__, siop_status);
@@ -261,12 +261,12 @@
 
 #if defined(CONFIG_LCD_CONNECTION_CHECK)
 	if (!(is_sharp_panel) ) {
-		if(lcd_cabc[1]  != 0) 
+		if(lcd_cabc[1]  != 0)
 			lcd_cabc_jdi_brightness[1] = 0x0B;
-		else  
+		else
 		lcd_cabc_jdi_brightness[1] = 0x00;
 		cmdreq.cmds = &cabc_jdi_brightness_cmd;
-		mdss_dsi_cmdlist_put(ctrl, &cmdreq);		
+		mdss_dsi_cmdlist_put(ctrl, &cmdreq);
 	}
 #endif
 }
@@ -364,7 +364,7 @@
 		if (rc)
 		pr_err("enabling disp_en_gpio_n failed, rc=%d\n",rc);
 		gpio_set_value(ctrl_pdata->disp_en_gpio_n, 1);
-		
+
 		rc = gpio_tlmm_config(GPIO_CFG(ctrl_pdata->rst_gpio, 0,
 					GPIO_CFG_OUTPUT,GPIO_CFG_PULL_UP,GPIO_CFG_8MA),
 					GPIO_CFG_ENABLE);
@@ -381,7 +381,7 @@
 					GPIO_CFG_OUTPUT,GPIO_CFG_NO_PULL,GPIO_CFG_8MA),
 					GPIO_CFG_ENABLE);
 		if (rc)
-		pr_err("enabling bl_on_gpio failed, rc=%d\n",rc);		
+		pr_err("enabling bl_on_gpio failed, rc=%d\n",rc);
 		gpio_set_value(ctrl_pdata->bl_on_gpio, 1);
 		if (ctrl_pdata->ctrl_state & CTRL_STATE_PANEL_INIT) {
 			pr_debug("%s: Panel Not properly turned OFF\n",
@@ -441,7 +441,7 @@
 #endif
 	} else {
 #if defined(CONFIG_LCD_CONNECTION_CHECK)
-	if (is_sharp_panel) {		
+	if (is_sharp_panel) {
 		if (gpio_is_valid(ctrl_pdata->disp_en_gpio))
 			gpio_set_value((ctrl_pdata->disp_en_gpio), 0);
 		rc = gpio_tlmm_config(GPIO_CFG(ctrl_pdata->disp_en_gpio_p, 0,
@@ -652,7 +652,7 @@
 	msd.mpd = pdata;
 	ctrl = container_of(pdata, struct mdss_dsi_ctrl_pdata,
 				panel_data);
-	
+
 	pr_debug("%s: ctrl=%p ndx=%d\n", __func__, ctrl, ctrl->ndx);
 
 	if (ctrl->on_cmds.cmd_cnt)
@@ -781,7 +781,7 @@
 
 	return 0;
 }
-int mdss_panel_get_dst_fmt(u32 bpp, char mipi_mode, u32 pixel_packing,
+int mdss_panel_dt_get_dst_fmt(u32 bpp, char mipi_mode, u32 pixel_packing,
 				char *dst_format)
 {
 	int rc = 0;
@@ -910,7 +910,6 @@
 	int rc, i, len;
 	const char *data;
 	static const char *pdest;
-	static const char *on_cmds_state, *off_cmds_state;
 	struct mdss_panel_info *pinfo = &(ctrl_pdata->panel_data.panel_info);
 	rc = of_property_read_u32(np, "qcom,mdss-dsi-panel-width", &tmp);
 	if (rc) {
@@ -956,7 +955,7 @@
 		pinfo->mipi.mode = DSI_CMD_MODE;
 	rc = of_property_read_u32(np, "qcom,mdss-dsi-pixel-packing", &tmp);
 	tmp = (!rc ? tmp : 0);
-	rc = mdss_panel_get_dst_fmt(pinfo->bpp,
+	rc = mdss_panel_dt_get_dst_fmt(pinfo->bpp,
 		pinfo->mipi.mode, pinfo->mipi.pixel_packing,
 		&(pinfo->mipi.dst_format));
 	if (rc) {
@@ -965,7 +964,7 @@
 		pinfo->mipi.dst_format =
 			DSI_VIDEO_DST_FORMAT_RGB888;
 	}
-	
+
 	pdest = of_get_property(np,
 			"qcom,mdss-dsi-panel-destination", NULL);
 	if (strlen(pdest) != 9) {
@@ -981,7 +980,7 @@
 							__func__);
 		pinfo->pdest = DISPLAY_1;
 	}
-	
+
 #if defined(CONFIG_LCD_CONNECTION_CHECK)
 	if(is_sharp_panel == 0) {
 		rc = of_property_read_u32(np, "qcom,mdss-dsi-h-front-porch-jdi", &tmp);
@@ -1031,7 +1030,7 @@
 			rc = of_property_read_u32(np,
 				"qcom,mdss-dsi-bl-pmic-pwm-frequency", &tmp);
 			if (rc) {
-				pr_err("%s:%d, Error, panel pwm_period\n",		
+				pr_err("%s:%d, Error, panel pwm_period\n",
 					__func__, __LINE__);
 			return -EINVAL;
 			}
@@ -1061,7 +1060,7 @@
 
 	rc = of_property_read_u32(np, "qcom,mdss-dsi-interleave-mode", &tmp);
 	pinfo->mipi.interleave_mode = (!rc ? tmp : 0);
- 
+
 	pinfo->mipi.vsync_enable = of_property_read_bool(np,
 		"qcom,mdss-dsi-te-check-enable");
 	pinfo->mipi.hw_vsync_mode = of_property_read_bool(np,
@@ -1110,7 +1109,7 @@
 
 	rc = of_property_read_u32(np, "qcom,mdss-dsi-color-order", &tmp);
 	pinfo->mipi.rgb_swap = (!rc ? tmp : DSI_RGB_SWAP_RGB);
-	
+
 	rc = of_property_read_u32(np, "qcom,mdss-force-clk-lane-hs", &tmp);
 	pinfo->mipi.force_clk_lane_hs = (!rc ? tmp : 0);
 
@@ -1183,43 +1182,20 @@
 		mdss_dsi_parse_dcs_cmds(np, &ctrl_pdata->on_cmds,
 			"qcom,mdss-dsi-sharp-on-command", "qcom,mdss-dsi-on-command-state");
 	mdss_dsi_parse_dcs_cmds(np, &ctrl_pdata->off_cmds,
-		"qcom,mdss-dsi-off-command", "qcom,mdss-dsi-off-command-state");		
+		"qcom,mdss-dsi-off-command", "qcom,mdss-dsi-off-command-state");
 	 } else {
 		mdss_dsi_parse_dcs_cmds(np, &ctrl_pdata->on_cmds,
 			"qcom,mdss-dsi-jdi-on-command", "qcom,mdss-dsi-on-command-state");
 		mdss_dsi_parse_dcs_cmds(np, &ctrl_pdata->off_cmds,
 			"qcom,mdss-dsi-jdi-off-command", "qcom,mdss-dsi-off-command-state");
 	 }
-	// changes made as QCom suggestion 
-	on_cmds_state = of_get_property(np, "qcom,mdss-dsi-on-command-state", NULL);
- 
-        if (!strncmp(on_cmds_state, "dsi_lp_mode", 11)) {
-            ctrl_pdata->dsi_on_state = DSI_LP_MODE;
-        } else if (!strncmp(on_cmds_state, "dsi_hs_mode", 11)) {
-            ctrl_pdata->dsi_on_state = DSI_HS_MODE;
-        } else {
-             pr_debug("%s: ON cmds state not specified. Set Default\n", __func__); 
-             ctrl_pdata->dsi_on_state = DSI_LP_MODE;
-        }
- 
-        off_cmds_state = of_get_property(np, "qcom,mdss-dsi-off-command-state", NULL); 
- 
-        if (!strncmp(off_cmds_state, "dsi_lp_mode", 11)) {
-            ctrl_pdata->dsi_off_state = DSI_LP_MODE;
-        } else if (!strncmp(off_cmds_state, "dsi_hs_mode", 11)) {
-            ctrl_pdata->dsi_off_state = DSI_HS_MODE;
-       } else {
-            pr_debug("%s: ON cmds state not specified. Set Default\n", __func__); 
-           ctrl_pdata->dsi_off_state = DSI_LP_MODE;
-       }
-        pr_err("[ on state : %d, off state : %d\n",ctrl_pdata->dsi_on_state ,ctrl_pdata->dsi_off_state );
 #else
 	mdss_dsi_parse_dcs_cmds(np, &ctrl_pdata->on_cmds,
 		"qcom,mdss-dsi-sharp-on-command", "qcom,mdss-dsi-on-command-state");
 	mdss_dsi_parse_dcs_cmds(np, &ctrl_pdata->off_cmds,
 		"qcom,mdss-dsi-off-command", "qcom,mdss-dsi-off-command-state");
 #endif
-	return 0;	
+	return 0;
 error:
 	return -EINVAL;
 }
@@ -1263,14 +1239,14 @@
 static ssize_t mdss_siop_enable_store(struct device *dev,
 		struct device_attribute *attr, const char *buf, size_t size)
 {
-	
+
 	if (sysfs_streq(buf, "1") && !msd.dstat.siop_status)
 		msd.dstat.siop_status = true;
 	else if (sysfs_streq(buf, "0") && msd.dstat.siop_status)
 		msd.dstat.siop_status = false;
 	else
 		pr_info("%s: Invalid argument!!", __func__);
-	
+
 	return size;
 
 }
@@ -1829,7 +1805,7 @@
 
 	if (rc) {
 		pr_info("sysfs create fail-%s\n",dev_attr_lcd_power.attr.name);
-	
+
 	}
 	rc = sysfs_create_file(&lcd_device->dev.kobj,
 					&dev_attr_lcd_type.attr);
@@ -1838,7 +1814,7 @@
 				dev_attr_lcd_type.attr.name);
 	}
 
-	
+
 	rc= sysfs_create_file(&lcd_device->dev.kobj,
 					&dev_attr_siop_enable.attr);
 	if (rc) {
@@ -1861,7 +1837,7 @@
 	}
 
 
-	
+
 #endif
 #endif
 #if defined(DDI_VIDEO_ENHANCE_TUNING)
@@ -1913,7 +1889,7 @@
 			__func__, disp_esd_gpio, rc);
 	}
 
-	rc = request_threaded_irq(err_fg_gpio, NULL, err_fg_irq_handler, 
+	rc = request_threaded_irq(err_fg_gpio, NULL, err_fg_irq_handler,
 		IRQF_TRIGGER_HIGH | IRQF_ONESHOT, "esd_detect", NULL);
 	if (rc) {
 		pr_err("%s : Failed to request_irq. :ret=%d", __func__, rc);
diff -Nur a/drivers/video/msm/mdss/mdss_tc358764_dsi2lvds.c b/drivers/video/msm/mdss/mdss_tc358764_dsi2lvds.c
--- a/drivers/video/msm/mdss/mdss_tc358764_dsi2lvds.c	2016-01-10 16:25:37.432141000 -0500
+++ b/drivers/video/msm/mdss/mdss_tc358764_dsi2lvds.c	2015-12-01 05:57:13.000000000 -0500
@@ -397,7 +397,7 @@
 		}
 		if (gpio_is_valid(msd.lcd_en_gpio))
 			gpio_set_value_cansleep(msd.lcd_en_gpio,0);
-#if defined(CONFIG_MACH_MATISSELTE_USC)
+#if defined(CONFIG_MACH_MATISSELTE_USC) || defined(CONFIG_MACH_MATISSELTE_OPEN)
 		if (gpio_is_valid(msd.bl_ldi_en)) {
 			gpio_tlmm_config(GPIO_CFG(msd.bl_ldi_en, 0,
 				GPIO_CFG_INPUT,GPIO_CFG_NO_PULL,GPIO_CFG_2MA),
@@ -709,7 +709,7 @@
 
 	return 0;
 }
-static int mdss_panel_dt_get_dst_fmt(u32 bpp, char mipi_mode, u32 pixel_packing,
+int mdss_panel_dt_get_dst_fmt(u32 bpp, char mipi_mode, u32 pixel_packing,
 				char *dst_format)
 {
 	int rc = 0;
@@ -951,7 +951,6 @@
 	int rc, i, len;
 	const char *data;
 	static const char *pdest;
-	static const char *on_cmds_state, *off_cmds_state;
 	struct mdss_panel_info *pinfo = &(ctrl_pdata->panel_data.panel_info);
 	rc = of_property_read_u32(np, "qcom,mdss-dsi-panel-width", &tmp);
 	if (rc) {
@@ -1217,28 +1216,6 @@
 		"qcom,mdss-dsi-on-command", "qcom,mdss-dsi-on-command-state");
 	mdss_dsi_parse_dcs_cmds(np, &ctrl_pdata->off_cmds,
 		"qcom,mdss-dsi-off-command", "qcom,mdss-dsi-off-command-state");
-	on_cmds_state = of_get_property(np,
-				"qcom,mdss-dsi-on-command-state", NULL);
-	if (!strncmp(on_cmds_state, "dsi_lp_mode", 11)) {
-		ctrl_pdata->dsi_on_state = DSI_LP_MODE;
-	} else if (!strncmp(on_cmds_state, "dsi_hs_mode", 11)) {
-		ctrl_pdata->dsi_on_state = DSI_HS_MODE;
-	} else {
-		pr_debug("%s: ON cmds state not specified. Set Default\n",
-							__func__);
-		ctrl_pdata->dsi_on_state = DSI_LP_MODE;
-	}
-
-	off_cmds_state = of_get_property(np, "qcom,mdss-dsi-off-command-state", NULL);
-	if (!strncmp(off_cmds_state, "dsi_lp_mode", 11)) {
-		ctrl_pdata->dsi_off_state = DSI_LP_MODE;
-	} else if (!strncmp(off_cmds_state, "dsi_hs_mode", 11)) {
-		ctrl_pdata->dsi_off_state = DSI_HS_MODE;
-	} else {
-		pr_debug("%s: ON cmds state not specified. Set Default\n",
-							__func__);
-		ctrl_pdata->dsi_off_state = DSI_LP_MODE;
-	}
 
 	return 0;
 error:
diff -Nur a/drivers/video/msm/mdss/smart_mtp_s6e3ha1.c b/drivers/video/msm/mdss/smart_mtp_s6e3ha1.c
--- a/drivers/video/msm/mdss/smart_mtp_s6e3ha1.c	2016-01-10 16:25:37.436141000 -0500
+++ b/drivers/video/msm/mdss/smart_mtp_s6e3ha1.c	2015-12-01 05:57:13.000000000 -0500
@@ -1472,70 +1472,68 @@
 #define AOR_ADJUST_CD 72
 
 
-#define CCG6_MAX_TABLE 61
+#define CCG6_MAX_TABLE 59
 static int ccg6_candela_table[][2] = {
-{2, 0,},
-{3, 1,},
-{4, 2,},
-{5, 3,},
-{6, 4,},
-{7, 5,},
-{8, 6,},
-{9, 7,},
-{10, 8,},
-{11, 9,},
-{12, 10,},
-{13, 11,},
-{14, 12,},
-{15, 13,},
-{16, 14,},
-{17, 15,},
-{19, 16,},
-{20, 17,},
-{21, 18,},
-{22, 19,},
-{24, 20,},
-{25, 21,},
-{27, 22,},
-{29, 23,},
-{30, 24,},
-{32, 25,},
-{34, 26,},
-{37, 27,},
-{39, 28,},
-{41, 29,},
-{44, 30,},
-{47, 31,},
-{50, 32,},
-{53, 33,},
-{56, 34,},
-{60, 35,},
-{64, 36,},
-{68, 37,},
-{72, 38,},
-{77, 39,},
-{82, 40,},
-{87, 41,},
-{93, 42,},
-{98, 43,},
-{105, 44,},
-{111, 45,},
-{119, 46,},
-{126, 47,},
-{134, 48,},
-{143, 49,},
-{152, 50,},
-{162, 51,},
-{172, 52,},
-{183, 53,},
-{195, 54,},
-{207, 55,},
-{220, 56,},
-{234, 57,},
-{249, 58,},
-{265, 59,},
-{282, 60,},
-{300, 61,},
+{4, 0,},
+{5, 1,},
+{6, 2,},
+{7, 3,},
+{8, 4,},
+{9, 5,},
+{10, 6,},
+{11, 7,},
+{12, 8,},
+{13, 9,},
+{14, 10,},
+{15, 11,},
+{16, 12,},
+{17, 13,},
+{19, 14,},
+{20, 15,},
+{21, 16,},
+{22, 17,},
+{24, 18,},
+{25, 19,},
+{27, 20,},
+{29, 21,},
+{30, 22,},
+{32, 23,},
+{34, 24,},
+{37, 25,},
+{39, 26,},
+{41, 27,},
+{44, 28,},
+{47, 29,},
+{50, 30,},
+{53, 31,},
+{56, 32,},
+{60, 33,},
+{64, 34,},
+{68, 35,},
+{72, 36,},
+{77, 37,},
+{82, 38,},
+{87, 39,},
+{93, 40,},
+{98, 41,},
+{105, 42,},
+{111, 43,},
+{119, 44,},
+{126, 45,},
+{134, 46,},
+{143, 47,},
+{152, 48,},
+{162, 49,},
+{172, 50,},
+{183, 51,},
+{195, 52,},
+{207, 53,},
+{220, 54,},
+{234, 55,},
+{249, 56,},
+{265, 57,},
+{282, 58,},
+{300, 59,},
 };
 
 static int find_cadela_table(int brightness)
@@ -1554,8 +1552,6 @@
 
 static int gradation_offset_revA[][9] = {
 /*	V255 V203 V151 V87 V51 V35 V23 V11 V3 */
-	{0, 13, 26, 39, 49, 55, 58, 61, 61},
-	{0, 11, 21, 32, 42, 48, 50, 52, 52},
 	{0, 10, 19, 28, 37, 42, 44, 46, 46},
 	{0, 8, 16, 24, 32, 36, 38, 41, 42},
 	{0, 8, 15, 22, 29, 33, 35, 38, 36},
@@ -1623,8 +1619,6 @@
 	R87 G87 B87 R51 G51 B51 R35 G35 B35
 	R23 G23 B23 R11 G11 B11
 */
-	{-9, 2, -10, -5, 1, -5, -7, 1, -8, -15, 6, -16, -11, 8, -17, -8, 6, -14, -5, 6, -13, -10, 7, -16},
-	{-6, 1, -7, -4, 1, -4, -7, 1, -7, -14, 5, -13, -13, 8, -18, -9, 6, -14, -5, 6, -13, -10, 7, -16},
 	{-4, 1, -4, -5, 0, -4, -5, 1, -7, -11, 5, -12, -16, 8, -16, -11, 6, -14, -6, 6, -13, -10, 7, -16},
 	{-3, 0, -4, -3, 0, -3, -5, 1, -5, -12, 4, -10, -16, 8, -16, -11, 6, -13, -10, 6, -16, -10, 7, -16},
 	{-2, 0, -3, -3, 0, -3, -4, 1, -4, -10, 4, -8, -16, 8, -16, -12, 6, -14, -10, 6, -15, -10, 7, -16},
@@ -1708,6 +1702,8 @@
 		/* 300CD ~ 172CD */
 		if (pSmart->brightness_level <= 249)
 			bl_level = 253;
+		else if (pSmart->brightness_level == 282)
+			bl_level = 283;
 		else
 			bl_level = pSmart->brightness_level;
 	} else if ((pSmart->brightness_level <= AOR_FIX_CD) &&
